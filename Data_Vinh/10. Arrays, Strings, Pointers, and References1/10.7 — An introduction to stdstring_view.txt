<main id="main" role="main" class="main"><article id="post-8971" class="post-8971 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.7 — An introduction to std::string_view</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/nascardriver/" title="View all posts by nascardriver" itemprop="url"><em itemprop="name">nascardriver</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2019-11-02T07:17:24-07:00" itemprop="datePublished">November 2, 2019, 7:17 am</time>
<time class="updated" datetime="2022-03-20T11:07:29-07:00" itemprop="dateModified">March 20, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CNe_qeqY-PYCFRMmlgodigwKCQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>In the previous lesson, we talked about C-style strings, and the dangers of using them. C-style strings are fast, but they’re not as easy to use and as safe as <code>std::string</code>.</p><p>But <code>std::string</code> (which we covered in lesson <a href="https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdstring/">4.13 -- An introduction to std::string</a>), has some of its own downsides, particularly when it comes to const strings.</p><p></p><p>Consider the following example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-5-close">{</span>
  <span class="token keyword keyword-char">char</span> text<span class="token punctuation brace-square brace-open brace-level-2" id="pair-1-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-1-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-2-close">{</span> <span class="token string">"hello"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-2-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-3-close">{</span> text <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-3-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string more<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-4-close">{</span> str <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-4-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> text <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> more <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-5-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>As expected, this prints</p><pre>hello hello hello
</pre><p>Internally, <code>main</code> copies the string “hello” 3 times, resulting in 4 copies. First, there is the string literal “hello”, which is known at compile-time and stored in the binary. One copy is created when we create the <code>char[]</code>. The following two <code>std::string</code> objects create one copy of the string each. Because <code>std::string</code> is designed to be modifiable, each <code>std::string</code> must contain its own copy of the string, so that a given <code>std::string</code> can be modified without affecting any other <code>std::string</code> object.</p><p>This holds true for const <code>std::string</code>, even though they can’t be modified.</p><p class="cpp-section cpp-topline" style="clear:both">Introducing std::string_view</p><p>Consider a window in your house, looking at a car sitting on the street. You can look through the window and see the car, but you can’t touch or move the car. Your window just provides a view to the car, which is a completely separate object.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>C++17 introduces another way of using strings, <code>std::string_view</code>, which lives in the &lt;string_view&gt; header.</p><p>Unlike <code>std::string</code>, which keeps its own copy of the string, <code>std::string_view</code> provides a <em>view</em> of a string that is defined elsewhere.</p><p>We can re-write the above code to use <code>std::string_view</code> by replacing every <code>std::string</code> with <code>std::string_view</code>.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-6-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-6-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-10-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view text<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-7-close">{</span> <span class="token string">"hello"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-7-open">}</span><span class="token punctuation">;</span> <span class="token comment">// view the text "hello", which is stored in the binary</span>
  std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-8-close">{</span> text <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-8-open">}</span><span class="token punctuation">;</span> <span class="token comment">// view of the same "hello"</span>
  std<span class="token double-colon punctuation">::</span>string_view more<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-9-close">{</span> str <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-9-open">}</span><span class="token punctuation">;</span> <span class="token comment">// view of the same "hello"</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> text <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> more <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-10-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The output is the same, but no more copies of the string “hello” are created. The string “hello” is stored in the binary and is not allocated at run-time. <code>text</code> is only a view onto the string “hello”, so no copy has to be created. When we copy a <code>std::string_view</code>, the new <code>std::string_view</code> observes the same string as the copied-from <code>std::string_view</code> is observing. This means that neither <code>str</code> nor <code>more</code> create any copies. They are views onto the existing string “hello”.</p><p><code>std::string_view</code> is not only fast, but has many of the functions that we know from <code>std::string</code>.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-11-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-11-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-19-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-18-close">{</span> <span class="token string">"Trains are fast!"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-18-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-12-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-12-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// 16</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-14-close">(</span><span class="token number">0</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-13-close">(</span><span class="token string">' '</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-13-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-14-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// Trains</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-15-close">(</span>str <span class="token operator">==</span> <span class="token string">"Trains are fast!"</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-15-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

  <span class="token comment">// Since C++20</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">starts_with</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-16-close">(</span><span class="token string">"Boats"</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-16-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">ends_with</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-17-close">(</span><span class="token string">"fast!"</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-17-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// Trains are fast!</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-19-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Because <code>std::string_view</code> doesn’t create a copy of the string, if we change the viewed string, the changes are reflected in the <code>std::string_view</code>.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-20-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-20-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-25-close">{</span>
  <span class="token keyword keyword-char">char</span> arr<span class="token punctuation brace-square brace-open brace-level-2" id="pair-21-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-21-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-23-close">{</span> <span class="token string">"Gold"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-23-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-24-close">{</span> arr <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-24-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// Gold</span>

  <span class="token comment">// Change 'd' to 'f' in arr</span>
  arr<span class="token punctuation brace-square brace-open brace-level-2" id="pair-22-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-22-open">]</span> <span class="token operator">=</span> <span class="token string">'f'</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// Golf</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-25-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>We modified <code>arr</code>, but <code>str</code> appears to be changing as well. That’s because <code>arr</code> and <code>str</code> share their string. When you use a <code>std::string_view</code>, it’s best to avoid modifications to the underlying string for the remainder of the <code>std::string_view</code>‘s life to prevent confusion and errors.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Use <code>std::string_view</code> instead of C-style strings.</p><p>Prefer <code>std::string_view</code> over <code>std::string</code> for read-only strings, unless you already have a <code>std::string</code>.</p></div><p class="cpp-section cpp-topline" style="clear:both">View modification functions</p><p>Back to our window analogy, consider a window with curtains. We can close either the left or right curtain to reduce what we can see. We don’t change what’s outside, we just reduce the visible area.</p><p>Similarly, <code>std::string_view</code> contains functions that let us manipulate the <em>view</em> of the string. This allows us to change the view without modifying the viewed string.</p><p>The functions for this are <code>remove_prefix</code>, which removes characters from the left side of the view, and <code>remove_suffix</code>, which removes characters from the right side of the view.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:90px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-26-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-26-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-30-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-29-close">{</span> <span class="token string">"Peach"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-29-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token comment">// Ignore the first character.</span>
  str<span class="token punctuation">.</span><span class="token function">remove_prefix</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-27-close">(</span><span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-27-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token comment">// Ignore the last 2 characters.</span>
  str<span class="token punctuation">.</span><span class="token function">remove_suffix</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-28-close">(</span><span class="token number">2</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-28-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-30-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This program produces the following output:</p><pre>Peach
each
ea
</pre><p>Unlike real curtains, a <code>std::string_view</code> cannot be opened back up. Once you shrink the area, the only way to re-widen it is to reset the view by reassigning the source string to it again.</p><p class="cpp-section cpp-topline" style="clear:both">std::string_view works with non-null-terminated strings</p><p>Unlike C-style strings and <code>std::string</code>, <code>std::string_view</code> doesn’t use null terminators to mark the end of the string. Rather, it knows where the string ends because it keeps track of its length.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// For std::size</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-31-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-31-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-36-close">{</span>
  <span class="token comment">// No null-terminator.</span>
  <span class="token keyword keyword-char">char</span> vowels<span class="token punctuation brace-square brace-open brace-level-2" id="pair-33-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-33-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-34-close">{</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'u'</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-34-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// vowels isn't null-terminated. We need to pass the length manually.</span>
  <span class="token comment">// Because vowels is an array, we can use std::size to get its length.</span>
  std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-35-close">{</span> vowels<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-32-close">(</span>vowels<span class="token punctuation brace-round brace-close brace-level-3" id="pair-32-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-35-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// This is safe. std::cout knows how to print std::string_view.</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-36-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This program prints:</p><pre>aeiou
</pre><p class="cpp-section cpp-topline" style="clear:both">Converting a std::string to a std::string_view</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p>A <code>std::string_view</code> can be constructed from a <code>std::string</code>, and a <code>std::string</code> will implicitly convert to a <code>std::string_view</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">printSV</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-37-close">(</span><span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>string_view sv<span class="token punctuation brace-round brace-close brace-level-1" id="pair-37-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-40-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sv <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-40-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-38-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-38-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-43-close">{</span>
    std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-41-close">{</span> <span class="token string">"Hello, world"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-41-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string_view sv<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-42-close">{</span> s <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-42-open">}</span><span class="token punctuation">;</span> <span class="token comment">// construct std::string_view from std::string</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sv<span class="token punctuation">;</span>

    <span class="token function">printSV</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-39-close">(</span>s<span class="token punctuation brace-round brace-close brace-level-2" id="pair-39-open">)</span><span class="token punctuation">;</span> <span class="token comment">// implicitly convert std::string to std::string_view</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-43-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p class="cpp-section cpp-topline" style="clear:both">Converting a <code>std::string_view</code> to a <code>std::string</code></p><p>An std::string_view will not implicitly convert to a <code>std::string</code>, but can be explicitly converted:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">print</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-44-close">(</span>std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation brace-round brace-close brace-level-1" id="pair-44-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-50-close">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-50-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-45-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-45-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-53-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view sv<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-51-close">{</span> <span class="token string">"balloon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-51-open">}</span><span class="token punctuation">;</span>

  sv<span class="token punctuation">.</span><span class="token function">remove_suffix</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-46-close">(</span><span class="token number">3</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-46-open">)</span><span class="token punctuation">;</span>

  <span class="token comment">// print(sv); // compile error: won't implicitly convert</span>

  std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-52-close">{</span> sv <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-52-open">}</span><span class="token punctuation">;</span> <span class="token comment">// okay</span>

  <span class="token function">print</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-47-close">(</span>str<span class="token punctuation brace-round brace-close brace-level-2" id="pair-47-open">)</span><span class="token punctuation">;</span> <span class="token comment">// okay</span>

  <span class="token function">print</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-49-close">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-48-close">(</span>sv<span class="token punctuation brace-round brace-close brace-level-3" id="pair-48-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-49-open">)</span><span class="token punctuation">;</span> <span class="token comment">// okay</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-53-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints:</p><pre>ball
ball
</pre><p class="cpp-section cpp-topline" style="clear:both">Converting a <code>std::string_view</code> to a C-style string</p><p>Some old functions (such as the old strlen function) still expect C-style strings. To convert a <code>std::string_view</code> to a C-style string, we can do so by first converting to a <code>std::string</code>:</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-54-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-54-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-61-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view sv<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-58-close">{</span> <span class="token string">"balloon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-58-open">}</span><span class="token punctuation">;</span>

  sv<span class="token punctuation">.</span><span class="token function">remove_suffix</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-55-close">(</span><span class="token number">3</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-55-open">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Create a std::string from the std::string_view</span>
  std<span class="token double-colon punctuation">::</span>string str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-59-close">{</span> sv <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-59-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Get the null-terminated C-style string.</span>
  <span class="token keyword keyword-auto">auto</span> szNullTerminated<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-60-close">{</span> str<span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-56-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-56-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-60-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Pass the null-terminated string to the function that we want to use.</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">" has "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-57-close">(</span>szNullTerminated<span class="token punctuation brace-round brace-close brace-level-2" id="pair-57-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" letter(s)\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-61-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints:</p><pre>ball has 4 letter(s)
</pre><p>However, creating a <code>std::string</code> every time we want to pass a <code>std::string_view</code> as a C-style string is expensive, so this should be avoided if possible.</p><p class="cpp-section cpp-topline" style="clear:both">Passing a string to a function</p><p>One question that often comes up: is it better to pass strings by <code>std::string_view</code> or <code>const std::string&amp;</code>?</p><p>If we want to write a function that takes a string parameter, making the parameter a <code>std::string_view</code> is the most flexible choice, because it can work efficiently with C-style string arguments (including string literals), <code>std::string</code> arguments (which will implicitly convert to <code>std::string_view</code>), and <code>std::string_view</code> arguments:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">printSV</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-62-close">(</span><span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>string_view sv<span class="token punctuation brace-round brace-close brace-level-1" id="pair-62-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-67-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> sv <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-67-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-63-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-63-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-70-close">{</span>
    std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-68-close">{</span> <span class="token string">"Hello, world"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-68-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string_view sv <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-69-close">{</span> s <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-69-open">}</span><span class="token punctuation">;</span>

    <span class="token function">printSV</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-64-close">(</span>s<span class="token punctuation brace-round brace-close brace-level-2" id="pair-64-open">)</span><span class="token punctuation">;</span>              <span class="token comment">// ok: pass std::string</span>
    <span class="token function">printSV</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-65-close">(</span>sv<span class="token punctuation brace-round brace-close brace-level-2" id="pair-65-open">)</span><span class="token punctuation">;</span>             <span class="token comment">// ok: pass std::string_view</span>
    <span class="token function">printSV</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-66-close">(</span><span class="token string">"Hello, world"</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-66-open">)</span><span class="token punctuation">;</span> <span class="token comment">// ok: pass C-style string literal</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-70-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that we pass <code>std::string_view</code> by value instead of by const reference. This is because <code>std::string_view</code> is typically fast to copy, and pass by value is optimal for cheap to copy types.</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:400px;min-width:580px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">var asau='8992865211';var cid='2886929358';var pid='ca-pub-0588844875925051';var slotId='div-gpt-ad-learncpp_com-large-leaderboard-2-0';var ffid=1;var alS=1036%1000;var container=document.getElementById(slotId);var ins=document.createElement('ins');ins.id=slotId+'-asloaded';ins.className='adsbygoogle ezasloaded';ins.dataset.adClient=pid;ins.dataset.adSlot=asau;ins.dataset.adChannel=cid;ins.dataset.fullWidthResponsive='true';ins.style.display='block';if(ffid!==2){ins.style.width=container.offsetWidth+'px';}else{container.attributes.ezaw.value+'px';}
if(alS>=30&&(alS!=34&&alS!=35)){ins.dataset.adFormat='auto';}else{ins.style.height=container.attributes.ezah.value+'px';}
container.appendChild(ins);(adsbygoogle=window.adsbygoogle||[]).push({});window.ezoSTPixelAdd(slotId,'stat_source_id',44);window.ezoSTPixelAdd(slotId,'adsensetype',2);var lo=new MutationObserver(window.ezaslEvent);lo.observe(document.getElementById(slotId+'-asloaded'),{attributes:true});</script><ins id="div-gpt-ad-learncpp_com-large-leaderboard-2-0-asloaded" class="adsbygoogle ezasloaded" data-ad-client="ca-pub-0588844875925051" data-ad-slot="8992865211" data-ad-channel="2886929358" data-full-width-responsive="true" data-ad-format="auto" style="display: block; width: 735px; height: 280px;" data-adsbygoogle-status="done"><ins id="aswift_0_expand" style="border: none; height: 280px; width: 735px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-table;"><ins id="aswift_0_anchor" style="border: none; height: 280px; width: 735px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: block;"></ins></ins></ins></span></span></div></div><p>There is one case where making the parameter a <code>const std::string&amp;</code> is generally better: if your function needs to call some other function that takes a C-style string or <code>std::string</code> parameter, then <code>const std::string&amp;</code> may be a better choice, as <code>std::string_view</code> is not guaranteed to be null-terminated (something that C-style string functions expect) and does not efficiently convert back to a std::string.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Prefer passing strings using <code>std::string_view</code> (by value) instead of <code>const std::string&amp;</code>, unless your function calls other functions that require C-style strings or std::string parameters.</p></div><p class="cpp-section cpp-topline" style="clear:both">Ownership issues</p><p>Being only a view, a <code>std::string_view</code>‘s lifetime is independent of that of the string it is viewing. If the viewed string goes out of scope, <code>std::string_view</code> has nothing to observe and accessing it causes undefined behavior. The string that a <code>std::string_view</code> is viewing has to have been created somewhere else. It might be a string literal that lives as long as the program does or it was created by a <code>std::string</code>, in which case the string lives until the <code>std::string</code> decides to destroy it or the <code>std::string</code> dies. <code>std::string_view</code> can’t create any strings on its own, because it’s just a view.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

std<span class="token double-colon punctuation">::</span>string_view <span class="token function">askForName</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-71-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-71-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-76-close">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"What's your name?\n"</span><span class="token punctuation">;</span>

  <span class="token comment">// Use a std::string, because std::cin needs to modify it.</span>
  std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-74-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-74-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> name<span class="token punctuation">;</span>

  <span class="token comment">// We're switching to std::string_view for demonstrative purposes only.</span>
  <span class="token comment">// If you already have a std::string, there's no reason to switch to</span>
  <span class="token comment">// a std::string_view.</span>
  std<span class="token double-colon punctuation">::</span>string_view view<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-75-close">{</span> name <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-75-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello "</span> <span class="token operator">&lt;&lt;</span> view <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> view<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-76-open">}</span> <span class="token comment">// name dies, and so does the string that name created.</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-72-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-72-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-78-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view view<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-77-close">{</span> <span class="token function">askForName</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-73-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-73-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-77-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// view is observing a string that already died.</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Your name is "</span> <span class="token operator">&lt;&lt;</span> view <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// Undefined behavior</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-78-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><pre>What's your name?
nascardriver
Hello nascardriver
Your name is  P@ P@
</pre><p>In function <code>askForName()</code>, we create <code>name</code> and fill it with data from <code>std::cin</code>. Then we create <code>view</code>, which can view that string. At the end of the function, we return <code>view</code>, but the string it is viewing (<code>name</code>) is destroyed, so <code>view</code> is now pointing to deallocated memory. The function returns a dangling <code>std::string_view</code>.</p><p>Accessing the returned <code>std::string_view</code> in <code>main</code> causes undefined behavior, which on the author’s machine produced weird characters.</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>The same can happen when we create a <code>std::string_view</code> from a <code>std::string</code> and then modify the <code>std::string</code>. Modifying a <code>std::string</code> can cause its internal string to die and be replaced with a new one in a different place. The <code>std::string_view</code> will still look at where the old string was, but it’s not there anymore.</p><div class="cpp-note cpp-lightredbackground"><p class="cpp-note-title cpp-bottomline">Warning</p><p>Make sure that the underlying string viewed with a <code>std::string_view</code> does not go out of scope and isn’t modified while using the std::string_view.</p></div><p class="cpp-section cpp-topline" style="clear:both">Opening the window (kinda) via the data() function</p><p>The string being viewed by a <code>std::string_view</code> can be accessed by using the <code>data()</code> function, which returns a C-style string. This provides fast access to the string being viewed (as a C-string). But it should also only be used if the <code>std::string_view</code>‘s view hasn’t been modified (e.g. by <code>remove_prefix</code> or <code>remove_suffix</code>) and the string being viewed is null-terminated.</p><p>In the following example, <code>std::strlen</code> doesn’t know what a <code>std::string_view</code> is, so we need to pass it <code>str.data()</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span> <span class="token comment">// For std::strlen</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-79-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-79-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-83-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-82-close">{</span> <span class="token string">"balloon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-82-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token comment">// We use std::strlen because it's simple, this could be any other function</span>
  <span class="token comment">// that needs a null-terminated string.</span>
  <span class="token comment">// It's okay to use data() because we haven't modified the view, and the</span>
  <span class="token comment">// string is null-terminated.</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-81-close">(</span>str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-80-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-80-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-81-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-83-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><pre>balloon
7
</pre><p>When a <code>std::string_view</code> has been modified, <code>data()</code> doesn’t always do what we’d like it to. The following example demonstrates what happens when we access <code>data()</code> after modifying the view:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-84-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-84-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-91-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-90-close">{</span> <span class="token string">"balloon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-90-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Remove the "b"</span>
  str<span class="token punctuation">.</span><span class="token function">remove_prefix</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-85-close">(</span><span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-85-open">)</span><span class="token punctuation">;</span>
  <span class="token comment">// remove the "oon"</span>
  str<span class="token punctuation">.</span><span class="token function">remove_suffix</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-86-close">(</span><span class="token number">3</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-86-open">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Remember that the above doesn't modify the string, it only changes</span>
  <span class="token comment">// the region that str is observing.</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">" has "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">strlen</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-88-close">(</span>str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-87-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-87-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-88-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" letter(s)\n"</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str.data() is "</span> <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-89-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-89-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str is "</span> <span class="token operator">&lt;&lt;</span> str <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-91-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><pre>all has 6 letter(s)
str.data() is alloon
str is all
</pre><p>Clearly this isn’t what we’d intended, and is a consequence of trying to access the data() of a <code>std::string_view</code> that has been modified. The length information about the string is lost when we access <code>data()</code>. <code>std::strlen</code> and <code>std::cout</code> keep reading characters from the underlying string until they find the null-terminator, which is at the end of “balloon”.</p><div class="cpp-note cpp-lightredbackground"><p class="cpp-note-title cpp-bottomline">Warning</p><p>Only use <code>std::string_view::data()</code> if the <code>std::string_view</code>‘s view hasn’t been modified and the string being viewed is null-terminated. Using <code>std::string_view::data()</code> of a non-null-terminated string can cause undefined behavior.</p></div><p class="cpp-section cpp-topline" style="clear:both">Incomplete implementation</p><p>Being a relatively recent feature, <code>std::string_view</code> isn’t implemented as well as it could be.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>string s<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-104-close">{</span> <span class="token string">"hello"</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-104-open">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>string_view v<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-105-close">{</span> <span class="token string">"world"</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-105-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Doesn't work</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-92-close">(</span>s <span class="token operator">+</span> v<span class="token punctuation brace-round brace-close brace-level-1" id="pair-92-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-93-close">(</span>v <span class="token operator">+</span> s<span class="token punctuation brace-round brace-close brace-level-1" id="pair-93-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

<span class="token comment">// Potentially unsafe, or not what we want, because we're treating</span>
<span class="token comment">// the std::string_view as a C-style string.</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-95-close">(</span>s <span class="token operator">+</span> v<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-94-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-94-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-95-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-97-close">(</span>v<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-96-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-96-open">)</span> <span class="token operator">+</span> s<span class="token punctuation brace-round brace-close brace-level-1" id="pair-97-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

<span class="token comment">// Ok, but ugly and wasteful because we have to construct a new std::string.</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-98-close">(</span>s <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-106-close">{</span> v <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-106-open">}</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-98-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-99-close">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-107-close">{</span> v <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-107-open">}</span> <span class="token operator">+</span> s<span class="token punctuation brace-round brace-close brace-level-1" id="pair-99-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-101-close">(</span>s <span class="token operator">+</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-100-close">(</span>v<span class="token punctuation brace-round brace-close brace-level-2" id="pair-100-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-101-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-103-close">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-102-close">(</span>v<span class="token punctuation brace-round brace-close brace-level-2" id="pair-102-open">)</span> <span class="token operator">+</span> s<span class="token punctuation brace-round brace-close brace-level-1" id="pair-103-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>There’s no reason why line 5 and 6 shouldn’t work. They will probably be supported in a future C++ version.</p><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/pointers-and-arrays/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.8</span>Pointers and arrays</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/c-style-strings/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.6</span>C-style strings</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:90px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/an-introduction-to-stdstring_view/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/o-1-bit-flags-and-bit-manipulation-via-stdbitset/" rel="prev"><span>O.1 — Bit flags and bit manipulation via std::bitset</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/configuring-your-compiler-choosing-a-language-standard/" rel="next"><span>0.12 — Configuring your compiler: Choosing a language standard</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="157"><span class="wpdtc" title="157">157</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CM7XpuqY-PYCFUyAlgodNeMGwA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=ecb1c64b-9f31-4476-5957-c99a65754443&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/4298982706899497&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdstring_view/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CM_XpuqY-PYCFUyAlgodNeMGwA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=ecb1c64b-9f31-4476-5957-c99a65754443&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/645809788877107&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdstring_view/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>