<main id="main" role="main" class="main"><article id="post-2334" class="post-2334 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.9 — Pointer arithmetic and array indexing</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2015-08-15T16:31:41-07:00" itemprop="datePublished">August 15, 2015, 4:31 pm</time>
<time class="updated" datetime="2022-01-18T10:38:27-08:00" itemprop="dateModified">January 18, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CKi49oOZ-PYCFceClgod1ckI_g"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p class="cpp-section">Pointer arithmetic</p><p>The C++ language allows you to perform integer addition or subtraction operations on pointers. If <code>ptr</code> points to an integer, <code>ptr + 1</code> is the address of the next integer in memory after ptr. <code>ptr - 1</code> is the address of the previous integer before <code>ptr</code>.</p><p>Note that <code>ptr + 1</code> does not return the <em>memory address</em> after <code>ptr</code>, but the memory address of the <em>next object of the type</em> that <code>ptr</code> points to. If <code>ptr</code> points to an integer (assuming 4 bytes), <code>ptr + 3</code> means 3 integers (12 bytes) after <code>ptr</code>. If <code>ptr</code> points to a <code>char</code>, which is always 1 byte, <code>ptr + 3</code> means 3 chars (3 bytes) after ptr.</p><p>When calculating the result of a pointer arithmetic expression, the compiler always multiplies the integer operand by the size of the object being pointed to. This is called <strong>scaling</strong>.</p><p>Consider the following program:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-3-close">{</span>
    <span class="token keyword keyword-int">int</span> value<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-1-close">{</span> <span class="token number">7</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-1-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span><span class="token operator">*</span> ptr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-2-close">{</span> <span class="token operator">&amp;</span>value <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-2-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr<span class="token operator">+</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-3-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>On the author’s machine, this output:</p><pre>0012FF7C
0012FF80
0012FF84
0012FF88
</pre><p>As you can see, each of these addresses differs by 4 (7C + 4 = 80 in hexadecimal). This is because an integer is 4 bytes on the author’s machine.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>The same program using <code>short</code> instead of <code>int</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-4-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-4-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-7-close">{</span>
    <span class="token keyword keyword-short">short</span> value<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-5-close">{</span> <span class="token number">7</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-5-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-short">short</span><span class="token operator">*</span> ptr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-6-close">{</span> <span class="token operator">&amp;</span>value <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-6-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr<span class="token operator">+</span><span class="token number">3</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-7-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>On the author’s machine, this output:</p><pre>0012FF7C
0012FF7E
0012FF80
0012FF82
</pre><p>Because a short is 2 bytes, each address differs by 2.</p><p><strong>Arrays are laid out sequentially in memory</strong></p><p>By using the address-of operator (&amp;), we can determine that arrays are laid out sequentially in memory. That is, elements 0, 1, 2, … are all adjacent to each other, in order.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-8-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-8-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-15-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-9-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-9-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-14-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-14-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Element 0 is at address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-10-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-10-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Element 1 is at address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-11-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-11-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Element 2 is at address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-12-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-12-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Element 3 is at address: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-13-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-13-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-15-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>On the author’s machine, this printed:</p><pre>Element 0 is at address: 0041FE9C
Element 1 is at address: 0041FEA0
Element 2 is at address: 0041FEA4
Element 3 is at address: 0041FEA8
</pre><p>Note that each of these memory addresses is 4 bytes apart, which is the size of an integer on the author’s machine.</p><p class="cpp-section cpp-topline" style="clear:both">Pointer arithmetic, arrays, and the magic behind indexing</p><p>In the section above, you learned that arrays are laid out in memory sequentially.</p><p>In the previous lesson, you learned that a fixed array can decay into a pointer that points to the first element (element 0) of the array.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p>Also in a section above, you learned that adding 1 to a pointer returns the memory address of the next object of that type in memory.</p><p>Therefore, we might conclude that adding 1 to an array should point to the second element (element 1) of the array. We can verify experimentally that this is true:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-16-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-16-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-22-close">{</span>
     <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-18-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-18-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-21-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-21-open">}</span><span class="token punctuation">;</span>

     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-19-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-19-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// print memory address of array element 1</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// print memory address of array pointer + 1</span>

     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-20-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-20-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// prints 7</span>
     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-17-close">(</span>array<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-17-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// prints 7 (note the parenthesis required here)</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-22-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that when performing indirection through the result of pointer arithmetic, parenthesis are necessary to ensure the operator precedence is correct, since operator * has higher precedence than operator +.</p><p>On the author’s machine, this printed:</p><pre>0017FB80
0017FB80
7
7
</pre><p>It turns out that when the compiler sees the subscript operator ([]), it actually translates that into a pointer addition and indirection! Generalizing, <code>array[n]</code> is the same as <code>*(array + n)</code>, where n is an integer. The subscript operator [] is there both to look nice and for ease of use (so you don’t have to remember the parenthesis).</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p class="cpp-section cpp-topline" style="clear:both">Using a pointer to iterate through an array</p><p>We can use a pointer and pointer arithmetic to loop through an array. Although not commonly done this way (using subscripts is generally easier to read and less error prone), the following example goes to show it is possible:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// for std::size</span></span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">isVowel</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-23-close">(</span><span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-round brace-close brace-level-1" id="pair-23-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-34-close">{</span>
    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-24-close">(</span>ch<span class="token punctuation brace-round brace-close brace-level-2" id="pair-24-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-33-close">{</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'A'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'a'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'E'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'e'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'I'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'i'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'O'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'o'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'U'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'u'</span><span class="token operator">:</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-default">default</span><span class="token operator">:</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-33-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-34-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-25-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-25-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-41-close">{</span>
    <span class="token keyword keyword-char">char</span> name<span class="token punctuation brace-square brace-open brace-level-2" id="pair-32-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-32-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-35-close">{</span> <span class="token string">"Mollie"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-35-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> arrayLength<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-36-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-27-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-26-close">(</span>name<span class="token punctuation brace-round brace-close brace-level-4" id="pair-26-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-27-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-36-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> numVowels<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-37-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-37-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-29-close">(</span><span class="token keyword keyword-char">char</span><span class="token operator">*</span> ptr<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-38-close">{</span> name <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-38-open">}</span><span class="token punctuation">;</span> ptr <span class="token operator">!=</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-28-close">(</span>name <span class="token operator">+</span> arrayLength<span class="token punctuation brace-round brace-close brace-level-3" id="pair-28-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-29-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-40-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-31-close">(</span><span class="token function">isVowel</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-30-close">(</span><span class="token operator">*</span>ptr<span class="token punctuation brace-round brace-close brace-level-4" id="pair-30-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-31-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-39-close">{</span>
            <span class="token operator">++</span>numVowels<span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-39-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-40-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">" has "</span> <span class="token operator">&lt;&lt;</span> numVowels <span class="token operator">&lt;&lt;</span> <span class="token string">" vowels.\n"</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-41-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>How does it work? This program uses a pointer to step through each of the elements in an array. Remember that arrays decay to pointers to the first element of the array. So by initializing <code>ptr</code> with <code>name</code>, <code>ptr</code> will point to the first element of the array. Indirection through <code>ptr</code> is performed for each element when we call <code>isVowel(*ptr)</code>, and if the element is a vowel, <code>numVowels</code> is incremented. Then the for loop uses the ++ operator to advance the pointer to the next character in the array. The for loop terminates when all characters have been examined.</p><p>The above program produces the result:</p><pre>Mollie has 3 vowels
</pre><p>Because counting elements is common, the algorithms library offers <code>std::count_if</code>, which counts elements that fulfill a condition. We can replace the <code>for</code>-loop with a call to <code>std::count_if</code>.</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// for std::begin and std::end</span></span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">isVowel</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-42-close">(</span><span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-round brace-close brace-level-1" id="pair-42-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-50-close">{</span>
    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-43-close">(</span>ch<span class="token punctuation brace-round brace-close brace-level-2" id="pair-43-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-49-close">{</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'A'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'a'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'E'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'e'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'I'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'i'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'O'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'o'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'U'</span><span class="token operator">:</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'u'</span><span class="token operator">:</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-default">default</span><span class="token operator">:</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-49-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-50-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-44-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-44-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-53-close">{</span>
    <span class="token keyword keyword-char">char</span> name<span class="token punctuation brace-square brace-open brace-level-2" id="pair-48-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-48-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-51-close">{</span> <span class="token string">"Mollie"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-51-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// walk through all the elements of name and count how many calls to isVowel return true</span>
    <span class="token keyword keyword-auto">auto</span> numVowels<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-52-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">count_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-47-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-45-close">(</span>name<span class="token punctuation brace-round brace-close brace-level-4" id="pair-45-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-46-close">(</span>name<span class="token punctuation brace-round brace-close brace-level-4" id="pair-46-open">)</span><span class="token punctuation">,</span> isVowel<span class="token punctuation brace-round brace-close brace-level-3" id="pair-47-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-52-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">" has "</span> <span class="token operator">&lt;&lt;</span> numVowels <span class="token operator">&lt;&lt;</span> <span class="token string">" vowels.\n"</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-53-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><code>std::begin</code> returns an iterator (pointer) to the first element, while <code>std::end</code> returns an iterator to the element that would be one after the last. The iterator returned by <code>std::end</code> is only used as a marker, accessing it causes undefined behavior, because it doesn’t point to a real element.</p><p><code>std::begin</code> and <code>std::end</code> only work on arrays with a known size. If the array decayed to a pointer, we can calculate begin and end manually.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// nameLength is the number of elements in the array.</span>
std<span class="token double-colon punctuation">::</span><span class="token function">count_if</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-54-close">(</span>name<span class="token punctuation">,</span> name <span class="token operator">+</span> nameLength<span class="token punctuation">,</span> isVowel<span class="token punctuation brace-round brace-close brace-level-1" id="pair-54-open">)</span>

<span class="token comment">// Don't do this. Accessing invalid indexes causes undefined behavior.</span>
<span class="token comment">// std::count_if(name, &amp;name[nameLength], isVowel)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that we’re calculating <code>name + nameLength</code>, not <code>name + nameLength - 1</code>, because we don’t want the last element, but the pseudo-element one past the last.</p><p>Calculating begin and end of an array like this works for all algorithms that need a begin and end argument.</p><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>Why does the following code work?</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-55-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-55-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-59-close">{</span>
	<span class="token keyword keyword-int">int</span> arr<span class="token punctuation brace-square brace-open brace-level-2" id="pair-56-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-56-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-58-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-58-open">}</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation brace-square brace-open brace-level-2" id="pair-57-close">[</span>arr<span class="token punctuation brace-square brace-close brace-level-2" id="pair-57-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

	<span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-59-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><p>The subscript operator (<code>[]</code>) is identical to an addition and an indirection, the operands can be swapped.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">arr<span class="token punctuation brace-square brace-open brace-level-1" id="pair-62-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-62-open">]</span>
<span class="token comment">// same as</span>
<span class="token operator">*</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-60-close">(</span>arr <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-60-open">)</span>
<span class="token comment">// same as</span>
<span class="token operator">*</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-61-close">(</span><span class="token number">2</span> <span class="token operator">+</span> arr<span class="token punctuation brace-round brace-close brace-level-1" id="pair-61-open">)</span>
<span class="token comment">// same as</span>
<span class="token number">2</span><span class="token punctuation brace-square brace-open brace-level-1" id="pair-63-close">[</span>arr<span class="token punctuation brace-square brace-close brace-level-1" id="pair-63-open">]</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>It’s an interesting observation, but don’t use this syntax in real code. This only works for the built-in subscript operator. You’ll learn about types with custom operators where this doesn’t work later.</p></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #2</p><p>Write a function named <code>find</code> that takes a pointer to the beginning and a pointer to the end (1 element past the last) of an array, as well as a value. The function should search for the given value and return a pointer to the first element with that value, or the end pointer if no element was found. The following program should run:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span></span>

<span class="token comment">// ...</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-64-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-64-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-74-close">{</span>
    <span class="token keyword keyword-int">int</span> arr<span class="token punctuation brace-square brace-open brace-level-2" id="pair-70-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-70-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-71-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-71-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Search for the first element with value 20.</span>
    <span class="token keyword keyword-int">int</span><span class="token operator">*</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-72-close">{</span> <span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-67-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-65-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-4" id="pair-65-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-66-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-4" id="pair-66-open">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-67-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-72-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// If an element with value 20 was found, print it.</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-69-close">(</span>found <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-68-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-3" id="pair-68-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-69-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-73-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-73-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-74-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightbluebackground"><p class="cpp-note-title cpp-bottomline">Tip</p><p><code>std::begin</code> and <code>std::end</code> return an <code>int*</code>. The call to <code>find</code> is equivalent to</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span><span class="token operator">*</span> found<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-77-close">{</span> <span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-76-close">(</span>arr<span class="token punctuation">,</span> arr <span class="token operator">+</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-75-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-3" id="pair-75-open">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-76-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-77-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span></span>

<span class="token keyword keyword-int">int</span><span class="token operator">*</span> <span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-78-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> begin<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token operator">*</span> end<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> value<span class="token punctuation brace-round brace-close brace-level-1" id="pair-78-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-91-close">{</span>
    <span class="token comment">// We're using !=, rather than &lt;, because != is compatible with more types</span>
    <span class="token comment">// than &lt;. This is common practice around iterators, which are covered later.</span>
    <span class="token comment">// It has no advantage when used with pointers, but makes code consistent.</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-79-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> p<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-88-close">{</span> begin <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-88-open">}</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>p<span class="token punctuation brace-round brace-close brace-level-2" id="pair-79-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-90-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-80-close">(</span><span class="token operator">*</span>p <span class="token operator">==</span> value<span class="token punctuation brace-round brace-close brace-level-3" id="pair-80-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-89-close">{</span>
            <span class="token keyword keyword-return">return</span> p<span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-89-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-90-open">}</span>

    <span class="token keyword keyword-return">return</span> end<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-91-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-81-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-81-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-95-close">{</span>
    <span class="token keyword keyword-int">int</span> arr<span class="token punctuation brace-square brace-open brace-level-2" id="pair-87-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-87-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-92-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-92-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span><span class="token operator">*</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-93-close">{</span> <span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-84-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-82-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-4" id="pair-82-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-83-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-4" id="pair-83-open">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-84-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-93-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-86-close">(</span>found <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-85-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-3" id="pair-85-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-86-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-94-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-94-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-95-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightbluebackground"><p class="cpp-note-title cpp-bottomline">Tip</p><p><code>find</code> is a standard function:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::find</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-96-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-96-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-106-close">{</span>
    <span class="token keyword keyword-int">int</span> arr<span class="token punctuation brace-square brace-open brace-level-2" id="pair-102-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-102-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-103-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-103-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Note: std::find returns an iterator, we'll talk about iterators later.</span>
    <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-104-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-99-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-97-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-4" id="pair-97-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-98-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-4" id="pair-98-open">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-99-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-104-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-101-close">(</span>found <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-100-close">(</span>arr<span class="token punctuation brace-round brace-close brace-level-3" id="pair-100-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-101-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-105-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-105-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-106-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/c-style-string-symbolic-constants/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.10</span>C-style string symbolic constants</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/pointers-and-arrays/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.8</span>Pointers and arrays</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/pointer-arithmetic-and-array-indexing/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/null-pointers/" rel="prev"><span>9.7 — Null pointers</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/c-style-string-symbolic-constants/" rel="next"><span>10.10 — C-style string symbolic constants</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="343"><span class="wpdtc" title="343">343</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CKm49oOZ-PYCFceClgod1ckI_g"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=b2f0971e-0391-41e9-6d63-9ec4ecd5a29b&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/8802010132839831&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/pointer-arithmetic-and-array-indexing/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CKq49oOZ-PYCFceClgod1ckI_g"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=b2f0971e-0391-41e9-6d63-9ec4ecd5a29b&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/8981021616840579&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/pointer-arithmetic-and-array-indexing/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>