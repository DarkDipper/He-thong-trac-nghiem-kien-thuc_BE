<main id="main" role="main" class="main"><article id="post-2809" class="post-2809 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.x — Chapter 10 comprehensive quiz</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2015-10-05T16:20:13-07:00" itemprop="datePublished">October 5, 2015, 4:20 pm</time>
<time class="updated" datetime="2022-02-15T17:08:42-08:00" itemprop="dateModified">February 15, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CLuQ7bqa-PYCFUGBvQodBDYHQA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p class="cpp-section">Words of encouragement</p><p>Congratulations on reaching the end of the longest chapter in the tutorials! Unless you have previous programming experience, this chapter was probably the most challenging one so far. If you made it this far, you’re doing great!</p><p>The good news is that the next chapter is easy in comparison. And in the chapter beyond that, we reach the heart of the tutorials: Object-oriented programming!</p><p class="cpp-section cpp-topline" style="clear:both">Chapter summary</p><p>Arrays allow us to store and access many variables of the same type through a single identifier. Array elements can be accessed using the subscript operator (<code>[]</code>). Be careful not to index an array out of the array’s range. Arrays can be initialized using an initializer list or uniform initialization.</p><p>Fixed arrays must have a length that is set at compile time. Fixed arrays will usually decay into a pointer when evaluated or passed to a function.</p><p>Loops can be used to iterate through an array. Beware of off-by-one errors, so you don’t iterate off the end of your array. Range-based for-loops are useful when the array hasn’t decayed into a pointer.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>Arrays can be made multidimensional by using multiple indices.</p><p>Arrays can be used to do C-style strings. You should generally avoid these and use <code>std::string_view</code> and <code>std::string</code> instead.</p><p>Pointers are variables that store the memory address of (point at) another variable. The address-of operator (<code>&amp;</code>) can be used to get the address of a variable. The indirection operator (<code>*</code>) can be used to get the value that a pointer points at.</p><p>A null pointer is a pointer that is not pointing at anything. Pointers can be made null by initializing or assigning the value <code>nullptr</code> to them. Avoid the <code>NULL</code> macro. Indirection through a null pointer can cause bad things to happen. Deleting a null pointer is okay (it doesn’t do anything).</p><p>A pointer to an array doesn’t know how large the array it is pointing to is. This means <code>sizeof()</code> and range-based for-loops won’t work.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><p>The <code>new</code> and <code>delete</code> operators can be used to dynamically allocate memory for a pointer variable or array. Although it’s unlikely to happen, operator <code>new</code> can fail if the operating system runs out of memory. If you’re writing software for a memory-limited system, make sure to check if <code>new</code> was successful.</p><p>Make sure to use the array delete (<code>delete[]</code>) when deleting an array. Pointers pointing to deallocated memory are called dangling pointers. Using the wrong <code>delete</code>, or indirection through a dangling pointer causes undefined behavior.</p><p>Failing to delete dynamically allocated memory can result in memory leaks when the last pointer to that memory goes out of scope.</p><p>Normal variables are allocated from limited memory called the stack. Dynamically allocated variables are allocated from a general pool of memory called the heap.</p><p>A pointer to a <code>const</code> value treats the value it is pointing to as <code>const</code>.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> value<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-0-close">{</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-0-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span><span class="token operator">*</span> ptr<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-1-close">{</span> <span class="token operator">&amp;</span>value <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-1-open">}</span><span class="token punctuation">;</span> <span class="token comment">// this is okay, ptr is pointing to a "const int"</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>A <code>const</code> pointer is a pointer whose value can not be changed after initialization.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> value<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-2-close">{</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-2-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span><span class="token operator">*</span> <span class="token keyword keyword-const">const</span> ptr<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-3-close">{</span> <span class="token operator">&amp;</span>value <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-3-open">}</span><span class="token punctuation">;</span> <span class="token comment">// ptr is const, but *ptr is non-const</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>A reference is an alias to another variable. References are declared using an ampersand (<code>&amp;</code>), but this does not mean address-of in this context. References are implicitly <code>const</code> -- they must be initialized with a value, and a new value can not be assigned to them. References can be used to prevent copies from being made when passing data to or from a function.</p><p>The member selection operator (<code>-&gt;</code>) can be used to select a member from a pointer to a struct. It combines both an indirection and normal member access (<code>.</code>).</p><p>Void pointers are pointers that can point to any type of data. Indirection through them is not possible directly. You can use <code>static_cast</code> to convert them back to their original pointer type. It’s up to you to remember what type they originally were.</p><p>Pointers to pointers allow us to create a pointer that points to another pointer.</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p><code>std::array</code> provides all of the functionality of C++ built-in arrays (and more) in a form that won’t decay into a pointer. These should generally be preferred over built-in fixed arrays.</p><p><code>std::vector</code> provides dynamic array functionality, handles its own memory management and remembers its size. These should generally be favored over built-in dynamic arrays.</p><p>Thanks to iterators, we don’t have to know how a container is implemented to loop through its elements.</p><p>The algorithms library helps us to save a lot of time by providing many off-the-shelf functions. In combination with iterators (and later lambdas), the algorithms library is an important part of C++.</p><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><p>To make the quizzes a little easier, we have to introduce a couple of new algorithms.</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><p><a href="https://en.cppreference.com/w/cpp/algorithm/reduce"><code>std::reduce</code></a> applies a function, by default the <code>+</code> operator, to all elements in a list, resulting in a single value. When we use the <code>+</code> operator, the result is the sum of all elements in the list. Note that there’s also <a href="https://en.cppreference.com/w/cpp/algorithm/accumulate"><code>std::accumulate</code></a>. <code>std::accumulate</code> cannot be parallelized, because it applies the function left-to-right. <code>std::reduce</code> segments the list, which means that the function is applied in an unknown order, allowing the operation to be parallelized. If we want to sum up a list, we don’t care about the order and we use <code>std::reduce</code>.</p><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">Author’s note</p><p><code>std::reduce</code> is currently not fully implemented in all major standard libraries. If it doesn’t work for you, fall back to <code>std::accumulate</code>.</p></div><p><a href="https://en.cppreference.com/w/cpp/algorithm/random_shuffle"><code>std::shuffle</code></a> takes a list and randomly re-orders its elements. We covered <code>std::mt19937</code> in lesson <a href="https://www.learncpp.com/cpp-tutorial/generating-random-numbers-using-mersenne-twister/">7.19 -- Generating random numbers using Mersenne Twister</a>.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::shuffle</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric&gt;</span> <span class="token comment">// std::reduce</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-4-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-4-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-20-close">{</span>
  std<span class="token double-colon punctuation">::</span>array arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-17-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-17-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">reduce</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-7-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-5-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-5-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-6-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-6-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-7-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

  <span class="token comment">// If you can't use std::reduce, use std::accumulate. The 0 is the initial value</span>
  <span class="token comment">// of the result: (((0 + 1) + 2) + 3) + 4</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">accumulate</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-10-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-8-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-8-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-9-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-9-open">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-10-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

  std<span class="token double-colon punctuation">::</span>mt19937 mt<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-18-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mt19937<span class="token double-colon punctuation">::</span>result_type<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-12-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">time</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-11-close">(</span><span class="token keyword keyword-nullptr">nullptr</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-11-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-12-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-18-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">shuffle</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-15-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-13-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-13-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-14-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-14-open">)</span><span class="token punctuation">,</span> mt<span class="token punctuation brace-round brace-close brace-level-2" id="pair-15-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-16-close">(</span><span class="token keyword keyword-int">int</span> i <span class="token operator">:</span> arr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-16-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-19-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-19-open">}</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-20-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Possible output</p><pre>10
10
2 1 4 3
</pre><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>Pretend you’re writing a game where the player can hold 3 types of items: health potions, torches, and arrows. Create an <code>enum</code> to identify the different types of items, and an <code>std::array</code> to store the number of each item the player is carrying (the enumerators are used as indexes of the array). The player should start with 2 health potions, 5 torches, and 10 arrows. Write a function called <code>countTotalItems()</code> that returns how many items the player has in total. Have your <code>main()</code> function print the output of <code>countTotalItems()</code> as well as the number of torches.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;numeric&gt;</span> <span class="token comment">// std::reduce</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// We want to use ItemTypes to index an array. Use enum rather than enum class.</span>
<span class="token keyword keyword-enum">enum</span> <span class="token class-name">ItemTypes</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-28-close">{</span>
  item_health_potion<span class="token punctuation">,</span>
  item_torch<span class="token punctuation">,</span>
  item_arrow<span class="token punctuation">,</span>
  max_items
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-28-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-using">using</span> inventory_t <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> ItemTypes<span class="token double-colon punctuation">::</span>max_items<span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">countTotalItems</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-21-close">(</span><span class="token keyword keyword-const">const</span> inventory_t<span class="token operator">&amp;</span> items<span class="token punctuation brace-round brace-close brace-level-1" id="pair-21-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-29-close">{</span>
  <span class="token keyword keyword-return">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">reduce</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-24-close">(</span>items<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-22-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-22-open">)</span><span class="token punctuation">,</span> items<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-23-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-23-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-24-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-29-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-25-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-25-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-31-close">{</span>
  inventory_t items<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-30-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-30-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The player has "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">countTotalItems</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-26-close">(</span>items<span class="token punctuation brace-round brace-close brace-level-2" id="pair-26-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" item(s) in total.\n"</span><span class="token punctuation">;</span>

  <span class="token comment">// We can access individual items using the enumerators:</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The player has "</span> <span class="token operator">&lt;&lt;</span> items<span class="token punctuation brace-square brace-open brace-level-2" id="pair-27-close">[</span>ItemTypes<span class="token double-colon punctuation">::</span>item_torch<span class="token punctuation brace-square brace-close brace-level-2" id="pair-27-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" torch(es)\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-31-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #2</p><p>Write the following program: Create a <code>struct</code> that holds a student’s first name and grade (on a scale of 0-100). Ask the user how many students they want to enter. Create a <code>std::vector</code> to hold all of the students. Then prompt the user for each name and grade. Once the user has entered all the names and grade pairs, sort the list by grade (highest first). Then print all the names and grades in sorted order.</p><p>For the following input:</p><pre>Joe
82
Terry
73
Ralph
4
Alex
94
Mark
88
</pre><p>The output should look like this:</p><pre>Alex got a grade of 94
Mark got a grade of 88
Joe got a grade of 82
Terry got a grade of 73
Ralph got a grade of 4
</pre><p>You can assume that names don’t contain spaces and that input extraction doesn’t fail.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::sort</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef&gt;</span> <span class="token comment">// std::size_t</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Student</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-49-close">{</span>
  std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-47-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-47-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> grade<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-48-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-48-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-49-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">getNumberOfStudents</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-32-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-32-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-52-close">{</span>
  <span class="token keyword keyword-int">int</span> numberOfStudents<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-50-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-50-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-do">do</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-51-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"How many students do you want to enter? "</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> numberOfStudents<span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-51-open">}</span> <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-33-close">(</span>numberOfStudents <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-33-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> numberOfStudents<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-52-open">}</span>

std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> <span class="token function">getStudents</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-34-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-34-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-56-close">{</span>
  <span class="token keyword keyword-using">using</span> vector_type <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-int">int</span> numberOfStudents<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-53-close">{</span> <span class="token function">getNumberOfStudents</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-35-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-35-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-53-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Create a vector with numberOfStudents elements.</span>
  vector_type <span class="token function">students</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-37-close">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>vector_type<span class="token double-colon punctuation">::</span>size_type<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-36-close">(</span>numberOfStudents<span class="token punctuation brace-round brace-close brace-level-3" id="pair-36-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-37-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-int">int</span> studentNumber<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-54-close">{</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-54-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-38-close">(</span><span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> student <span class="token operator">:</span> students<span class="token punctuation brace-round brace-close brace-level-2" id="pair-38-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-55-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter name #"</span> <span class="token operator">&lt;&lt;</span> studentNumber <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> student<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter grade #"</span> <span class="token operator">&lt;&lt;</span> studentNumber <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> student<span class="token punctuation">.</span>grade<span class="token punctuation">;</span>

    <span class="token operator">++</span>studentNumber<span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-55-open">}</span>

  <span class="token keyword keyword-return">return</span> students<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-56-open">}</span>

<span class="token comment">// Pass by reference to avoid slow copies.</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">compareStudents</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-39-close">(</span><span class="token keyword keyword-const">const</span> Student<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-const">const</span> Student<span class="token operator">&amp;</span> b<span class="token punctuation brace-round brace-close brace-level-1" id="pair-39-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-57-close">{</span>
  <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-40-close">(</span>a<span class="token punctuation">.</span>grade <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>grade<span class="token punctuation brace-round brace-close brace-level-2" id="pair-40-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-57-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-41-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-41-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-60-close">{</span>
  <span class="token keyword keyword-auto">auto</span> students<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-58-close">{</span> <span class="token function">getStudents</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-42-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-42-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-58-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-45-close">(</span>students<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-43-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-43-open">)</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-44-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-44-open">)</span><span class="token punctuation">,</span> compareStudents<span class="token punctuation brace-round brace-close brace-level-2" id="pair-45-open">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Print out all the names</span>
  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-46-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> student <span class="token operator">:</span> students<span class="token punctuation brace-round brace-close brace-level-2" id="pair-46-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-59-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" got a grade of "</span> <span class="token operator">&lt;&lt;</span> student<span class="token punctuation">.</span>grade <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-59-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-60-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #3</p><p>Write your own function to swap the value of two integer variables. Write a <code>main()</code> function to test it.</p><p><a class="hint_link_show" href="javascript:void(0)" onclick="cppHintToggle(document.getElementById('cpp_hint_id_0'),this,'Show Hint','')">Show Hint</a></p><div class="wphint" id="cpp_hint_id_0" style="display:none;margin-bottom:1em">Hint: Use reference parameters<div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-void">void</span> <span class="token function">swap</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-61-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token operator">&amp;</span> b<span class="token punctuation brace-round brace-close brace-level-1" id="pair-61-open">)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_2'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_2" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// Use reference parameters so we can modify the values of the arguments passed in</span>
<span class="token keyword keyword-void">void</span> <span class="token function">swap</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-62-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token operator">&amp;</span> b<span class="token punctuation brace-round brace-close brace-level-1" id="pair-62-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-67-close">{</span>
  <span class="token comment">// Temporarily save value of a</span>
  <span class="token keyword keyword-int">int</span> temp<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-66-close">{</span> a <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-66-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Put value of b in a</span>
  a <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token comment">// Put previous value of a in b</span>
  b <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-67-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-63-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-63-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-70-close">{</span>
  <span class="token keyword keyword-int">int</span> a<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-68-close">{</span> <span class="token number">6</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-68-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> b<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-69-close">{</span> <span class="token number">8</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-69-open">}</span><span class="token punctuation">;</span>
  <span class="token function">swap</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-64-close">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation brace-round brace-close brace-level-2" id="pair-64-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-65-close">(</span>a <span class="token operator">==</span> <span class="token number">8</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-65-open">)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"It works!\n"</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-else">else</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"It's broken!\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-70-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #4</p><p>Write a function to print a C-style string character by character. Use a pointer to step through each character of the string and print that character. Stop when you hit the null terminator. Write a <code>main</code> function that tests the function with the string literal “Hello, world!”.</p><p><a class="hint_link_show" href="javascript:void(0)" onclick="cppHintToggle(document.getElementById('cpp_hint_id_1'),this,'Show Hint','')">Show Hint</a></p><div class="wphint" id="cpp_hint_id_1" style="display:none;margin-bottom:1em">Hint: Use the ++ operator to advance the pointer to the next character.<div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-char">char</span><span class="token operator">*</span> str<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-71-close">{</span> <span class="token string">"Hello, world!"</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-71-open">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>str<span class="token punctuation">;</span> <span class="token comment">// H</span>
<span class="token operator">++</span>str<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>str<span class="token punctuation">;</span> <span class="token comment">// e</span>
<span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_3'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_3" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// str will point to the first letter of the C-style string.</span>
<span class="token comment">// Note that str points to a const char, so we can not change the values it points to.</span>
<span class="token comment">// However, we can point str at something else.  This does not change the value of the argument.</span>
<span class="token keyword keyword-void">void</span> <span class="token function">printCString</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-72-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-char">char</span><span class="token operator">*</span> str<span class="token punctuation brace-round brace-close brace-level-1" id="pair-72-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-77-close">{</span>
  <span class="token comment">// While we haven't encountered a null terminator</span>
  <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-73-close">(</span><span class="token operator">*</span>str <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-73-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-76-close">{</span>
    <span class="token comment">// print the current character</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>str<span class="token punctuation">;</span>

    <span class="token comment">// and point str at the next character</span>
    <span class="token operator">++</span>str<span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-76-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-77-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-74-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-74-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-78-close">{</span>
  <span class="token function">printCString</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-75-close">(</span><span class="token string">"Hello world!"</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-75-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-78-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #5</p><p>What’s wrong with each of these snippets, and how would you fix it?</p><p>a)</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-79-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-79-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-87-close">{</span>
  <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-82-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-82-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-84-close">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-84-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-81-close">(</span>std<span class="token double-colon punctuation">::</span>size_t count<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-85-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-85-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-80-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-3" id="pair-80-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-81-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-86-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-3" id="pair-83-close">[</span>count<span class="token punctuation brace-square brace-close brace-level-3" id="pair-83-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-86-open">}</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-87-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_4'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_4" style="display:none"><p>The loop has an off-by-one error, and tries to access the array element with index 4, which does not exist. The conditional in the for loop should use &lt; instead of &lt;=.</p></div><p>b)</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-88-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-88-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-92-close">{</span>
  <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-89-close">{</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-89-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-90-close">{</span> <span class="token number">7</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-90-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span><span class="token operator">*</span> ptr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-91-close">{</span> <span class="token operator">&amp;</span>x <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-91-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>y<span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>ptr <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-92-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_5'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_5" style="display:none"><p><code>ptr</code> is a pointer to a <code>const int</code>. You can’t assign the value 6 to it. You can fix this by making <code>ptr</code> non-const.</p></div><p>c)</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-void">void</span> <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-93-close">(</span><span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-97-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-97-open">]</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-93-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-100-close">{</span>
  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-94-close">(</span><span class="token keyword keyword-int">int</span> element <span class="token operator">:</span> array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-94-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-99-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-99-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-100-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-95-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-95-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-102-close">{</span>
  <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-98-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-98-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-101-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-101-open">}</span><span class="token punctuation">;</span>

  <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-96-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-96-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-102-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_6'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_6" style="display:none"><p><code>array</code> decays to a pointer when it is passed to <code>printArray()</code>. Range-based for-loops can’t work with a pointer to an array because the size of the array isn’t known. One solution is to add a length parameter to function <code>printArray()</code>, and use a normal for loop. A better solution is to use <code>std::array</code> instead of built-in fixed arrays.</p></div><p>d)</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span><span class="token operator">*</span> <span class="token function">allocateArray</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-103-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span> length<span class="token punctuation brace-round brace-close brace-level-1" id="pair-103-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-106-close">{</span>
  <span class="token keyword keyword-int">int</span> temp<span class="token punctuation brace-square brace-open brace-level-2" id="pair-104-close">[</span>length<span class="token punctuation brace-square brace-close brace-level-2" id="pair-104-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-105-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-105-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-return">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-106-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_7'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_7" style="display:none"><p><code>temp</code> is a fixed array, but <code>length</code> is not a compile-time constant, so we can’t use <code>length</code> to create a C-style array. Variable <code>temp</code> will also go out of scope at the end of the function, the return value will be pointing to something invalid. <code>temp</code> should use dynamic memory allocation or be a <code>std::vector</code>.</p></div><p>e)</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-107-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-107-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-110-close">{</span>
  <span class="token keyword keyword-double">double</span> d<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-108-close">{</span> <span class="token number">5.5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-108-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span><span class="token operator">*</span> ptr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-109-close">{</span> <span class="token operator">&amp;</span>d <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-109-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ptr <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-110-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_8'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_8" style="display:none"><p>You can’t make an <code>int</code> pointer point at a non-<code>int</code> variable. <code>ptr</code> should be of type <code>double*</code>.</p></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #6</p><p>Let’s pretend we’re writing a card game.</p><p>a) A deck of cards has 52 unique cards (13 card ranks of 4 suits). Create enumerations for the card ranks (2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace) and suits (clubs, diamonds, hearts, spades). Those enumerators will not be used to index arrays.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_9'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_9" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-enum">enum</span> <span class="token keyword keyword-class">class</span> <span class="token class-name">CardSuit</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-111-close">{</span>
    club<span class="token punctuation">,</span>
    diamond<span class="token punctuation">,</span>
    heart<span class="token punctuation">,</span>
    spade<span class="token punctuation">,</span>

    max_suits
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-111-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-enum">enum</span> <span class="token keyword keyword-class">class</span> <span class="token class-name">CardRank</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-112-close">{</span>
    rank_2<span class="token punctuation">,</span>
    rank_3<span class="token punctuation">,</span>
    rank_4<span class="token punctuation">,</span>
    rank_5<span class="token punctuation">,</span>
    rank_6<span class="token punctuation">,</span>
    rank_7<span class="token punctuation">,</span>
    rank_8<span class="token punctuation">,</span>
    rank_9<span class="token punctuation">,</span>
    rank_10<span class="token punctuation">,</span>
    rank_jack<span class="token punctuation">,</span>
    rank_queen<span class="token punctuation">,</span>
    rank_king<span class="token punctuation">,</span>
    rank_ace<span class="token punctuation">,</span>

    max_ranks
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-112-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>b) Each card will be represented by a <code>struct</code> named <code>Card</code> that contains a rank and a suit. Create the <code>struct</code>.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_10'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_10" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-struct">struct</span> <span class="token class-name">Card</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-115-close">{</span>
  CardRank rank<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-113-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-113-open">}</span><span class="token punctuation">;</span>
  CardSuit suit<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-114-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-114-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-115-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>c) Create a <code>printCard()</code> function that takes a <code>const Card</code> reference as a parameter and prints the card rank and suit as a 2-letter code (e.g. the jack of spades would print as JS).</p><p><a class="hint_link_show" href="javascript:void(0)" onclick="cppHintToggle(document.getElementById('cpp_hint_id_2'),this,'Show Hint','')">Show Hint</a></p><div class="wphint" id="cpp_hint_id_2" style="display:none;margin-bottom:1em">Hint: Use a <code>switch</code>-statement.</div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_11'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_11" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-void">void</span> <span class="token function">printCard</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-116-close">(</span><span class="token keyword keyword-const">const</span> Card<span class="token operator">&amp;</span> card<span class="token punctuation brace-round brace-close brace-level-1" id="pair-116-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-121-close">{</span>
    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-117-close">(</span>card<span class="token punctuation">.</span>rank<span class="token punctuation brace-round brace-close brace-level-2" id="pair-117-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-119-close">{</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_2<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'2'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_3<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'3'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_4<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'4'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_5<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'5'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_6<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'6'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_7<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'7'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_8<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'8'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_9<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'9'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_10<span class="token operator">:</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'T'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_jack<span class="token operator">:</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'J'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_queen<span class="token operator">:</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'Q'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_king<span class="token operator">:</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'K'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_ace<span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'A'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-default">default</span><span class="token operator">:</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'?'</span><span class="token punctuation">;</span>
        <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-119-open">}</span>

    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-118-close">(</span>card<span class="token punctuation">.</span>suit<span class="token punctuation brace-round brace-close brace-level-2" id="pair-118-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-120-close">{</span>
    <span class="token keyword keyword-case">case</span> CardSuit<span class="token double-colon punctuation">::</span>club<span class="token operator">:</span>       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'C'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardSuit<span class="token double-colon punctuation">::</span>diamond<span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'D'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardSuit<span class="token double-colon punctuation">::</span>heart<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'H'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardSuit<span class="token double-colon punctuation">::</span>spade<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'S'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-default">default</span><span class="token operator">:</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'?'</span><span class="token punctuation">;</span>
        <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-120-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-121-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>d) A deck of cards has 52 cards. Create an array (using <code>std::array</code>) to represent the deck of cards, and initialize it with one of each card. Do this in a function named <code>createDeck</code> and call <code>createDeck</code> from <code>main</code>. <code>createDeck</code> should return the deck to <code>main</code>.</p><p>Hint: Use static_cast if you need to convert an integer into an enumerated type.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_12'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_12" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>

<span class="token comment">// We'll need these many more times, create an aliases.</span>
<span class="token keyword keyword-using">using</span> deck_type <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Card<span class="token punctuation">,</span> <span class="token number">52</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword keyword-using">using</span> index_type <span class="token operator">=</span> deck_type<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>

deck_type <span class="token function">createDeck</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-122-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-122-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-139-close">{</span>
  deck_type deck<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-133-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-133-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// We could initialize each card individually, but that would be a pain.  Let's use a loop.</span>

  index_type index<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-134-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-134-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-124-close">(</span><span class="token keyword keyword-int">int</span> suit<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-135-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-135-open">}</span><span class="token punctuation">;</span> suit <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-123-close">(</span>CardSuit<span class="token double-colon punctuation">::</span>max_suits<span class="token punctuation brace-round brace-close brace-level-3" id="pair-123-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>suit<span class="token punctuation brace-round brace-close brace-level-2" id="pair-124-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-138-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-126-close">(</span><span class="token keyword keyword-int">int</span> rank<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-136-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-136-open">}</span><span class="token punctuation">;</span> rank <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-125-close">(</span>CardRank<span class="token double-colon punctuation">::</span>max_ranks<span class="token punctuation brace-round brace-close brace-level-4" id="pair-125-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>rank<span class="token punctuation brace-round brace-close brace-level-3" id="pair-126-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-137-close">{</span>
      deck<span class="token punctuation brace-square brace-open brace-level-4" id="pair-131-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-4" id="pair-131-open">]</span><span class="token punctuation">.</span>suit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>CardSuit<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-127-close">(</span>suit<span class="token punctuation brace-round brace-close brace-level-4" id="pair-127-open">)</span><span class="token punctuation">;</span>
      deck<span class="token punctuation brace-square brace-open brace-level-4" id="pair-132-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-4" id="pair-132-open">]</span><span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>CardRank<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-128-close">(</span>rank<span class="token punctuation brace-round brace-close brace-level-4" id="pair-128-open">)</span><span class="token punctuation">;</span>
      <span class="token operator">++</span>index<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-137-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-138-open">}</span>

  <span class="token keyword keyword-return">return</span> deck<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-139-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-129-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-129-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-141-close">{</span>
  <span class="token keyword keyword-auto">auto</span> deck<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-140-close">{</span> <span class="token function">createDeck</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-130-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-130-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-140-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-141-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>e) Write a function named <code>printDeck()</code> that takes the deck as a <code>const</code> reference parameter and prints the cards in the deck. Use a range-based for-loop. When you can <code>printDeck</code> with the deck you generated in the previous task, the output should be</p><pre>2C 3C 4C 5C 6C 7C 8C 9C TC JC QC KC AC 2D 3D 4D 5D 6D 7D 8D 9D TD JD QD KD AD 2H 3H 4H 5H 6H 7H 8H 9H TH JH QH KH AH 2S 3S 4S 5S 6S 7S 8S 9S TS JS QS KS AS
</pre><p>If you used different characters, that’s fine too.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_13'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_13" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-void">void</span> <span class="token function">printDeck</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-142-close">(</span><span class="token keyword keyword-const">const</span> deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation brace-round brace-close brace-level-1" id="pair-142-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-146-close">{</span>
  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-143-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> card <span class="token operator">:</span> deck<span class="token punctuation brace-round brace-close brace-level-2" id="pair-143-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-145-close">{</span>
    <span class="token function">printCard</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-144-close">(</span>card<span class="token punctuation brace-round brace-close brace-level-3" id="pair-144-open">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-145-open">}</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-146-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>f) Write a function named <code>shuffleDeck</code> to shuffle the deck of cards using <code>std::shuffle</code>. Update your main function to shuffle the deck and print out the shuffled deck.</p><p>Reminder: Only seed your random number generator once.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_14'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_14" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// for std::shuffle</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span> <span class="token comment">// for std::time</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random&gt;</span> <span class="token comment">// for std::mt19937</span></span>

<span class="token comment">// ...</span>

<span class="token keyword keyword-void">void</span> <span class="token function">shuffleDeck</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-147-close">(</span>deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation brace-round brace-close brace-level-1" id="pair-147-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-158-close">{</span>
  <span class="token comment">// mt is static so it only gets seeded once.</span>
  <span class="token keyword keyword-static">static</span> std<span class="token double-colon punctuation">::</span>mt19937 mt<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-157-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mt19937<span class="token double-colon punctuation">::</span>result_type<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-149-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">time</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-148-close">(</span><span class="token keyword keyword-nullptr">nullptr</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-148-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-149-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-157-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span><span class="token function">shuffle</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-152-close">(</span>deck<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-150-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-150-open">)</span><span class="token punctuation">,</span> deck<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-151-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-151-open">)</span><span class="token punctuation">,</span> mt<span class="token punctuation brace-round brace-close brace-level-2" id="pair-152-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-158-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-153-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-153-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-160-close">{</span>
  <span class="token keyword keyword-auto">auto</span> deck<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-159-close">{</span> <span class="token function">createDeck</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-154-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-154-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-159-open">}</span><span class="token punctuation">;</span>

  <span class="token function">shuffleDeck</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-155-close">(</span>deck<span class="token punctuation brace-round brace-close brace-level-2" id="pair-155-open">)</span><span class="token punctuation">;</span>

  <span class="token function">printDeck</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-156-close">(</span>deck<span class="token punctuation brace-round brace-close brace-level-2" id="pair-156-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-160-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>g) Write a function named <code>getCardValue()</code> that returns the value of a <code>Card</code> (e.g. a 2 is worth 2, a ten, jack, queen, or king is worth 10. Assume an Ace is worth 11).</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_15'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_15" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">getCardValue</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-161-close">(</span><span class="token keyword keyword-const">const</span> Card<span class="token operator">&amp;</span> card<span class="token punctuation brace-round brace-close brace-level-1" id="pair-161-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-165-close">{</span>
  <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-162-close">(</span>card<span class="token punctuation">.</span>rank<span class="token punctuation brace-round brace-close brace-level-2" id="pair-162-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-164-close">{</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_2<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_3<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_4<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">4</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_5<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_6<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">6</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_7<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">7</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_8<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">8</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_9<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">9</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_10<span class="token operator">:</span>       <span class="token keyword keyword-return">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_jack<span class="token operator">:</span>     <span class="token keyword keyword-return">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_queen<span class="token operator">:</span>    <span class="token keyword keyword-return">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_king<span class="token operator">:</span>     <span class="token keyword keyword-return">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_ace<span class="token operator">:</span>      <span class="token keyword keyword-return">return</span> <span class="token number">11</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-default">default</span><span class="token operator">:</span>
    <span class="token function">assert</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-163-close">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"should never happen"</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-163-open">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-164-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-165-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #7</p><p>a) Alright, challenge time! Let’s write a simplified version of Blackjack. If you’re not already familiar with Blackjack, the Wikipedia article for <a href="https://en.wikipedia.org/wiki/Blackjack">Blackjack</a> has a summary.</p><p>Here are the rules for our version of Blackjack:</p><ul><li>The dealer gets one card to start (in real life, the dealer gets two, but one is face down so it doesn’t matter at this point).</li><li>The player gets two cards to start.</li><li>The player goes first.</li><li>A player can repeatedly “hit” or “stand”.</li><li>If the player “stands”, their turn is over, and their score is calculated based on the cards they have been dealt.</li><li>If the player “hits”, they get another card and the value of that card is added to their total score.</li><li>An ace normally counts as a 1 or an 11 (whichever is better for the total score). For simplicity, we’ll count it as an 11 here.</li><li>If the player goes over a score of 21, they bust and lose immediately.</li><li>The dealer goes after the player.</li><li>The dealer repeatedly draws until they reach a score of 17 or more, at which point they stand.</li><li>If the dealer goes over a score of 21, they bust and the player wins immediately.</li><li>Otherwise, if the player has a higher score than the dealer, the player wins. Otherwise, the player loses (we’ll consider ties as dealer wins for simplicity).</li></ul><p>In our simplified version of Blackjack, we’re not going to keep track of which specific cards the player and the dealer have been dealt. We’ll only track the sum of the values of the cards they have been dealt for the player and dealer. This keeps things simpler.</p><p>Start with the code you wrote in quiz #6. Create a function named <code>playBlackjack()</code>. This function should:</p><ul><li>Accept a shuffled deck of cards as a parameter.</li><li>Implement Blackjack as defined above (note: you can define other functions to help with this).</li><li>Returns <code>true</code> if the player won, and <code>false</code> if they lost.</li></ul><p>Also write a <code>main()</code> function to play a single game of Blackjack.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_16'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_16" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::shuffle</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cassert&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span> <span class="token comment">// std::time</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random&gt;</span> <span class="token comment">// std::mt19937</span></span>

<span class="token keyword keyword-enum">enum</span> <span class="token keyword keyword-class">class</span> <span class="token class-name">CardSuit</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-222-close">{</span>
    club<span class="token punctuation">,</span>
    diamond<span class="token punctuation">,</span>
    heart<span class="token punctuation">,</span>
    spade<span class="token punctuation">,</span>

    max_suits
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-222-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-enum">enum</span> <span class="token keyword keyword-class">class</span> <span class="token class-name">CardRank</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-223-close">{</span>
    rank_2<span class="token punctuation">,</span>
    rank_3<span class="token punctuation">,</span>
    rank_4<span class="token punctuation">,</span>
    rank_5<span class="token punctuation">,</span>
    rank_6<span class="token punctuation">,</span>
    rank_7<span class="token punctuation">,</span>
    rank_8<span class="token punctuation">,</span>
    rank_9<span class="token punctuation">,</span>
    rank_10<span class="token punctuation">,</span>
    rank_jack<span class="token punctuation">,</span>
    rank_queen<span class="token punctuation">,</span>
    rank_king<span class="token punctuation">,</span>
    rank_ace<span class="token punctuation">,</span>

    max_ranks
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-223-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Card</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-226-close">{</span>
    CardRank rank<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-224-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-224-open">}</span><span class="token punctuation">;</span>
    CardSuit suit<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-225-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-225-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-226-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Player</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-228-close">{</span>
    <span class="token keyword keyword-int">int</span> score<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-227-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-227-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-228-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-using">using</span> deck_type <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Card<span class="token punctuation">,</span> <span class="token number">52</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token keyword keyword-using">using</span> index_type <span class="token operator">=</span> deck_type<span class="token double-colon punctuation">::</span>size_type<span class="token punctuation">;</span>

<span class="token comment">// Maximum score before losing.</span>
<span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> g_maximumScore<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-229-close">{</span> <span class="token number">21</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-229-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Minimum score that the dealer has to have.</span>
<span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> g_minimumDealerScore<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-230-close">{</span> <span class="token number">17</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-230-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-void">void</span> <span class="token function">printCard</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-166-close">(</span><span class="token keyword keyword-const">const</span> Card<span class="token operator">&amp;</span> card<span class="token punctuation brace-round brace-close brace-level-1" id="pair-166-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-233-close">{</span>
    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-167-close">(</span>card<span class="token punctuation">.</span>rank<span class="token punctuation brace-round brace-close brace-level-2" id="pair-167-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-231-close">{</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_2<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'2'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_3<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'3'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_4<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'4'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_5<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'5'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_6<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'6'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_7<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'7'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_8<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'8'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_9<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'9'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_10<span class="token operator">:</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'T'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_jack<span class="token operator">:</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'J'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_queen<span class="token operator">:</span>  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'Q'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_king<span class="token operator">:</span>   std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'K'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_ace<span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'A'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-default">default</span><span class="token operator">:</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'?'</span><span class="token punctuation">;</span>
        <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-231-open">}</span>

    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-168-close">(</span>card<span class="token punctuation">.</span>suit<span class="token punctuation brace-round brace-close brace-level-2" id="pair-168-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-232-close">{</span>
    <span class="token keyword keyword-case">case</span> CardSuit<span class="token double-colon punctuation">::</span>club<span class="token operator">:</span>       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'C'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardSuit<span class="token double-colon punctuation">::</span>diamond<span class="token operator">:</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'D'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardSuit<span class="token double-colon punctuation">::</span>heart<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'H'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardSuit<span class="token double-colon punctuation">::</span>spade<span class="token operator">:</span>      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'S'</span><span class="token punctuation">;</span>   <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-default">default</span><span class="token operator">:</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'?'</span><span class="token punctuation">;</span>
        <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-232-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-233-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">getCardValue</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-169-close">(</span><span class="token keyword keyword-const">const</span> Card<span class="token operator">&amp;</span> card<span class="token punctuation brace-round brace-close brace-level-1" id="pair-169-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-235-close">{</span>
    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-170-close">(</span>card<span class="token punctuation">.</span>rank<span class="token punctuation brace-round brace-close brace-level-2" id="pair-170-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-234-close">{</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_2<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_3<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_4<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_5<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_6<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_7<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_8<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_9<span class="token operator">:</span>        <span class="token keyword keyword-return">return</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_10<span class="token operator">:</span>       <span class="token keyword keyword-return">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_jack<span class="token operator">:</span>     <span class="token keyword keyword-return">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_queen<span class="token operator">:</span>    <span class="token keyword keyword-return">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_king<span class="token operator">:</span>     <span class="token keyword keyword-return">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> CardRank<span class="token double-colon punctuation">::</span>rank_ace<span class="token operator">:</span>      <span class="token keyword keyword-return">return</span> <span class="token number">11</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-default">default</span><span class="token operator">:</span>
        <span class="token function">assert</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-171-close">(</span><span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"should never happen"</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-171-open">)</span><span class="token punctuation">;</span>
        <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-234-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-235-open">}</span>

<span class="token keyword keyword-void">void</span> <span class="token function">printDeck</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-172-close">(</span><span class="token keyword keyword-const">const</span> deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation brace-round brace-close brace-level-1" id="pair-172-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-237-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-173-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> card <span class="token operator">:</span> deck<span class="token punctuation brace-round brace-close brace-level-2" id="pair-173-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-236-close">{</span>
        <span class="token function">printCard</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-174-close">(</span>card<span class="token punctuation brace-round brace-close brace-level-3" id="pair-174-open">)</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-236-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-237-open">}</span>

deck_type <span class="token function">createDeck</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-175-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-175-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-244-close">{</span>
    deck_type deck<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-238-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-238-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// We could initialize each card individually, but that would be a pain.  Let's use a loop.</span>

    index_type index<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-239-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-239-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-177-close">(</span><span class="token keyword keyword-int">int</span> suit<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-240-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-240-open">}</span><span class="token punctuation">;</span> suit <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-176-close">(</span>CardSuit<span class="token double-colon punctuation">::</span>max_suits<span class="token punctuation brace-round brace-close brace-level-3" id="pair-176-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>suit<span class="token punctuation brace-round brace-close brace-level-2" id="pair-177-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-243-close">{</span>
        <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-179-close">(</span><span class="token keyword keyword-int">int</span> rank<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-241-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-241-open">}</span><span class="token punctuation">;</span> rank <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-178-close">(</span>CardRank<span class="token double-colon punctuation">::</span>max_ranks<span class="token punctuation brace-round brace-close brace-level-4" id="pair-178-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>rank<span class="token punctuation brace-round brace-close brace-level-3" id="pair-179-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-242-close">{</span>
            deck<span class="token punctuation brace-square brace-open brace-level-4" id="pair-220-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-4" id="pair-220-open">]</span><span class="token punctuation">.</span>suit <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>CardSuit<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-180-close">(</span>suit<span class="token punctuation brace-round brace-close brace-level-4" id="pair-180-open">)</span><span class="token punctuation">;</span>
            deck<span class="token punctuation brace-square brace-open brace-level-4" id="pair-221-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-4" id="pair-221-open">]</span><span class="token punctuation">.</span>rank <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>CardRank<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-181-close">(</span>rank<span class="token punctuation brace-round brace-close brace-level-4" id="pair-181-open">)</span><span class="token punctuation">;</span>
            <span class="token operator">++</span>index<span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-242-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-243-open">}</span>

    <span class="token keyword keyword-return">return</span> deck<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-244-open">}</span>

<span class="token keyword keyword-void">void</span> <span class="token function">shuffleDeck</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-182-close">(</span>deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation brace-round brace-close brace-level-1" id="pair-182-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-246-close">{</span>
    <span class="token keyword keyword-static">static</span> std<span class="token double-colon punctuation">::</span>mt19937 mt<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-245-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mt19937<span class="token double-colon punctuation">::</span>result_type<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-184-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">time</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-183-close">(</span><span class="token keyword keyword-nullptr">nullptr</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-183-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-184-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-245-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span><span class="token function">shuffle</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-187-close">(</span>deck<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-185-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-185-open">)</span><span class="token punctuation">,</span> deck<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-186-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-186-open">)</span><span class="token punctuation">,</span> mt<span class="token punctuation brace-round brace-close brace-level-2" id="pair-187-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-246-open">}</span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">playerWantsHit</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-188-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-188-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-250-close">{</span>
    <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-189-close">(</span><span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-189-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-249-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"(h) to hit, or (s) to stand: "</span><span class="token punctuation">;</span>

        <span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-247-close">{</span><span class="token punctuation brace-curly brace-close brace-level-3" id="pair-247-open">}</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span>

        <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-190-close">(</span>ch<span class="token punctuation brace-round brace-close brace-level-3" id="pair-190-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-248-close">{</span>
        <span class="token keyword keyword-case">case</span> <span class="token string">'h'</span><span class="token operator">:</span>
            <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword keyword-case">case</span> <span class="token string">'s'</span><span class="token operator">:</span>
            <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-248-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-249-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-250-open">}</span>

<span class="token comment">// Returns true if the player went bust. False otherwise.</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">playerTurn</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-191-close">(</span><span class="token keyword keyword-const">const</span> deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation">,</span> index_type<span class="token operator">&amp;</span> nextCardIndex<span class="token punctuation">,</span> Player<span class="token operator">&amp;</span> player<span class="token punctuation brace-round brace-close brace-level-1" id="pair-191-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-257-close">{</span>
    <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-192-close">(</span><span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-192-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-256-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-193-close">(</span>player<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> g_maximumScore<span class="token punctuation brace-round brace-close brace-level-3" id="pair-193-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-251-close">{</span>
            <span class="token comment">// This can happen even before the player had a choice if they drew 2</span>
            <span class="token comment">// aces.</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You busted!\n"</span><span class="token punctuation">;</span>
            <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-251-open">}</span>
        <span class="token keyword keyword-else">else</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-255-close">{</span>
            <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-195-close">(</span><span class="token function">playerWantsHit</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-194-close">(</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-194-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-195-open">)</span>
            <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-253-close">{</span>
                <span class="token keyword keyword-int">int</span> cardValue<span class="token punctuation brace-curly brace-open brace-level-5" id="pair-252-close">{</span> <span class="token function">getCardValue</span><span class="token punctuation brace-round brace-open brace-level-6" id="pair-197-close">(</span>deck<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation brace-round brace-open brace-level-7" id="pair-196-close">(</span>nextCardIndex<span class="token operator">++</span><span class="token punctuation brace-round brace-close brace-level-7" id="pair-196-open">)</span><span class="token punctuation brace-round brace-close brace-level-6" id="pair-197-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-5" id="pair-252-open">}</span><span class="token punctuation">;</span>
                player<span class="token punctuation">.</span>score <span class="token operator">+=</span> cardValue<span class="token punctuation">;</span>
                std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You were dealt a "</span> <span class="token operator">&lt;&lt;</span> cardValue <span class="token operator">&lt;&lt;</span> <span class="token string">" and now have "</span> <span class="token operator">&lt;&lt;</span> player<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
            <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-253-open">}</span>
            <span class="token keyword keyword-else">else</span>
            <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-254-close">{</span>
                <span class="token comment">// The player didn't go bust.</span>
                <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-254-open">}</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-255-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-256-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-257-open">}</span>

<span class="token comment">// Returns true if the dealer went bust. False otherwise.</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">dealerTurn</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-198-close">(</span><span class="token keyword keyword-const">const</span> deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation">,</span> index_type<span class="token operator">&amp;</span> nextCardIndex<span class="token punctuation">,</span> Player<span class="token operator">&amp;</span> dealer<span class="token punctuation brace-round brace-close brace-level-1" id="pair-198-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-261-close">{</span>
    <span class="token comment">// Draw cards until we reach the minimum value.</span>
    <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-199-close">(</span>dealer<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> g_minimumDealerScore<span class="token punctuation brace-round brace-close brace-level-2" id="pair-199-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-259-close">{</span>
        <span class="token keyword keyword-int">int</span> cardValue<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-258-close">{</span> <span class="token function">getCardValue</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-201-close">(</span>deck<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-200-close">(</span>nextCardIndex<span class="token operator">++</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-200-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-201-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-258-open">}</span><span class="token punctuation">;</span>
        dealer<span class="token punctuation">.</span>score <span class="token operator">+=</span> cardValue<span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The dealer turned up a "</span> <span class="token operator">&lt;&lt;</span> cardValue <span class="token operator">&lt;&lt;</span> <span class="token string">" and now has "</span> <span class="token operator">&lt;&lt;</span> dealer<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-259-open">}</span>

    <span class="token comment">// If the dealer's score is too high, they went bust.</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-202-close">(</span>dealer<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> g_maximumScore<span class="token punctuation brace-round brace-close brace-level-2" id="pair-202-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-260-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The dealer busted!\n"</span><span class="token punctuation">;</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-260-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-261-open">}</span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">playBlackjack</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-203-close">(</span><span class="token keyword keyword-const">const</span> deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation brace-round brace-close brace-level-1" id="pair-203-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-267-close">{</span>
    <span class="token comment">// Index of the card that will be drawn next. This cannot overrun</span>
    <span class="token comment">// the array, because a player will lose before all cards are used up.</span>
    index_type nextCardIndex<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-262-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-262-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Create the dealer and give them 1 card.</span>
    Player dealer<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-263-close">{</span> <span class="token function">getCardValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-205-close">(</span>deck<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-204-close">(</span>nextCardIndex<span class="token operator">++</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-204-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-205-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-263-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// The dealer's card is face up, the player can see it.</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The dealer is showing: "</span> <span class="token operator">&lt;&lt;</span> dealer<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token comment">// Create the player and give them 2 cards.</span>
    Player player<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-264-close">{</span> <span class="token function">getCardValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-207-close">(</span>deck<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-206-close">(</span>nextCardIndex<span class="token punctuation brace-round brace-close brace-level-4" id="pair-206-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-207-open">)</span> <span class="token operator">+</span> <span class="token function">getCardValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-209-close">(</span>deck<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-208-close">(</span>nextCardIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-208-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-209-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-264-open">}</span><span class="token punctuation">;</span>
    nextCardIndex <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You have: "</span> <span class="token operator">&lt;&lt;</span> player<span class="token punctuation">.</span>score <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-211-close">(</span><span class="token function">playerTurn</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-210-close">(</span>deck<span class="token punctuation">,</span> nextCardIndex<span class="token punctuation">,</span> player<span class="token punctuation brace-round brace-close brace-level-3" id="pair-210-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-211-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-265-close">{</span>
        <span class="token comment">// The player went bust.</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-265-open">}</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-213-close">(</span><span class="token function">dealerTurn</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-212-close">(</span>deck<span class="token punctuation">,</span> nextCardIndex<span class="token punctuation">,</span> dealer<span class="token punctuation brace-round brace-close brace-level-3" id="pair-212-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-213-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-266-close">{</span>
        <span class="token comment">// The dealer went bust, the player wins.</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-266-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-214-close">(</span>player<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> dealer<span class="token punctuation">.</span>score<span class="token punctuation brace-round brace-close brace-level-2" id="pair-214-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-267-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-215-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-215-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-271-close">{</span>
    <span class="token keyword keyword-auto">auto</span> deck<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-268-close">{</span> <span class="token function">createDeck</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-216-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-216-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-268-open">}</span><span class="token punctuation">;</span>

    <span class="token function">shuffleDeck</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-217-close">(</span>deck<span class="token punctuation brace-round brace-close brace-level-2" id="pair-217-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-219-close">(</span><span class="token function">playBlackjack</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-218-close">(</span>deck<span class="token punctuation brace-round brace-close brace-level-3" id="pair-218-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-219-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-269-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You win!\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-269-open">}</span>
    <span class="token keyword keyword-else">else</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-270-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You lose!\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-270-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-271-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>Once you’ve solved the quiz, have a look at some of the most common mistakes:</p><p><a class="hint_link_show" href="javascript:void(0)" onclick="cppHintToggle(document.getElementById('cpp_hint_id_3'),this,'Show Hint','')">Show Hint</a></p><div class="wphint" id="cpp_hint_id_3" style="display:none;margin-bottom:1em">Hint: <strong>Random number generation</strong><p>If your Mersenne twister is non-static, it will be seeded every time <code>shuffleDeck</code> gets called. If <code>shuffleDeck</code> gets called twice in one second, it will produce exactly the same result. Don’t re-seed a random number generator unless you want to reset it.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-void">void</span> <span class="token function">shuffleDeck</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-272-close">(</span>deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation brace-round brace-close brace-level-1" id="pair-272-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-282-close">{</span>
  <span class="token comment">/* static */</span> std<span class="token double-colon punctuation">::</span>mt19937 mt<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-280-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mt19937<span class="token double-colon punctuation">::</span>result_type<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-274-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">time</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-273-close">(</span><span class="token keyword keyword-nullptr">nullptr</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-273-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-274-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-280-open">}</span><span class="token punctuation">;</span> <span class="token comment">// non-random</span>
  <span class="token keyword keyword-static">static</span> std<span class="token double-colon punctuation">::</span>mt19937 mt<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-281-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mt19937<span class="token double-colon punctuation">::</span>result_type<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-276-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">time</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-275-close">(</span><span class="token keyword keyword-nullptr">nullptr</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-275-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-276-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-281-open">}</span><span class="token punctuation">;</span> <span class="token comment">// random</span>

  std<span class="token double-colon punctuation">::</span><span class="token function">shuffle</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-279-close">(</span>deck<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-277-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-277-open">)</span><span class="token punctuation">,</span> deck<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-278-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-278-open">)</span><span class="token punctuation">,</span> mt<span class="token punctuation brace-round brace-close brace-level-2" id="pair-279-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-282-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><strong>Magic numbers</strong></p><p>If your code contains the numbers 10, 11, 17, 21, or 52 inside the body of a function, you got magic numbers that should be removed.</p><p>If you used 10 or 11, you probably didn’t use <code>getCardValue</code> to get the value of the card. Also, to check if a card is an ace, don’t check its value, check its rank.<br>If you used 17 or 21, these should be <code>constexpr</code> variables to allow fast changes to the game’s configuration and make your code easier to read.<br>If you used 52, you should use <code>deck.size()</code> instead.</p></div><p>b) Extra credit: Critical thinking time: Describe how you could modify the above program to handle the case where aces can be equal to 1 or 11.</p><p>It’s important to note that we’re only keeping track of the sum of the cards, not which specific cards the user has.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_17'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_17" style="display:none"><p>One way would be to keep track of how many aces the player and the dealer got dealt (In the <code>Player</code> <code>struct</code>, as an integer). If either the player or dealer go over 21 and their ace counter is greater than zero, you can reduce their score by 10 (convert an ace from 11 points to 1 point) and “remove” one from the ace counter. This can be done as many times as needed until the ace counter reaches zero.</p></div><p>c) In actual blackjack, if the player and dealer have the same score (and the player has not gone bust), the result is a tie and neither wins. Describe how you’d modify the above program to account for this.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_18'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_18" style="display:none"><p><code>playBlackjack()</code> currently returns <code>true</code> if the player wins and <code>false</code> otherwise. We’ll need to update this function to return three possibilities: Dealer win, Player win, tie. The best way to do this would be to define an enumeration for these three options, and have the function return the appropriate enumerator:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-enum">enum</span> <span class="token keyword keyword-class">class</span> <span class="token class-name">BlackjackResult</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-284-close">{</span>
    player_win<span class="token punctuation">,</span>
    dealer_win<span class="token punctuation">,</span>
    tie
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-284-open">}</span><span class="token punctuation">;</span>

BlackjackResult <span class="token function">playBlackjack</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-283-close">(</span><span class="token keyword keyword-const">const</span> deck_type<span class="token operator">&amp;</span> deck<span class="token punctuation brace-round brace-close brace-level-1" id="pair-283-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/function-pointers/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">11.1</span>Function Pointers</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/introduction-to-standard-library-algorithms/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.19</span>Introduction to standard library algorithms</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/chapter-10-comprehensive-quiz/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdvector/" rel="prev"><span>10.17 — An introduction to std::vector</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/stdvector-capacity-and-stack-behavior/" rel="next"><span>11.3 — std::vector capacity and stack behavior</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="1244"><span class="wpdtc" title="1244">1.2K</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CLyQ7bqa-PYCFUGBvQodBDYHQA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=da18a8eb-91b9-49f1-5acf-bc08ba864c51&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/1990555656860515&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/chapter-10-comprehensive-quiz/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CL2Q7bqa-PYCFUGBvQodBDYHQA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=da18a8eb-91b9-49f1-5acf-bc08ba864c51&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/1033738296875681&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/chapter-10-comprehensive-quiz/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>