<main id="main" role="main" class="main"><article id="post-2092" class="post-2092 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.13 — For-each loops</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2015-07-31T17:25:38-07:00" itemprop="datePublished">July 31, 2015, 5:25 pm</time>
<time class="updated" datetime="2022-01-25T14:01:58-08:00" itemprop="dateModified">January 25, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CNXk_tGZ-PYCFZvJFgUdo7EDYA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>In lesson <a href="https://www.learncpp.com/cpp-tutorial/arrays-and-loops/">10.3 -- Arrays and loops</a>, we showed examples where we used a <em>for loop</em> to iterate through each element of an array.</p><p>For example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// std::size</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-13-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-4-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-4-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-7-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-7-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> numStudents<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-8-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-1-close">(</span>scores<span class="token punctuation brace-round brace-close brace-level-3" id="pair-1-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-8-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span> maxScore<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-9-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-9-open">}</span><span class="token punctuation">;</span> <span class="token comment">// keep track of our largest score</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-2-close">(</span><span class="token keyword keyword-int">int</span> student<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-10-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-10-open">}</span><span class="token punctuation">;</span> student <span class="token operator">&lt;</span> numStudents<span class="token punctuation">;</span> <span class="token operator">++</span>student<span class="token punctuation brace-round brace-close brace-level-2" id="pair-2-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-12-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-3-close">(</span>scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-5-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-5-open">]</span> <span class="token operator">&gt;</span> maxScore<span class="token punctuation brace-round brace-close brace-level-3" id="pair-3-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-11-close">{</span>
            maxScore <span class="token operator">=</span> scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-6-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-6-open">]</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-11-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-12-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The best score was "</span> <span class="token operator">&lt;&lt;</span> maxScore <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-13-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>While <em>for loops</em> provide a convenient and flexible way to iterate through an array, they are also easy to mess up and prone to off-by-one errors.</p><p>There’s a simpler and safer type of loop called a <strong>for-each</strong> loop (also called a <strong>range-based for-loop</strong>) for cases where we want to iterate through every element in an array (or other list-type structure).</p><p class="cpp-section cpp-topline" style="clear:both">For-each loops</p><p>The <em>for-each</em> statement has a syntax that looks like this:</p><pre>for (element_declaration : array)
   statement;
</pre><p>When this statement is encountered, the loop will iterate through each element in array, assigning the value of the current array element to the variable declared in element_declaration. For best results, element_declaration should have the same type as the array elements, otherwise type conversion will occur.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>Let’s take a look at a simple example that uses a <em>for-each</em> loop to print all of the elements in an array named fibonacci:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-14-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-14-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-19-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> fibonacci<span class="token punctuation brace-square brace-open brace-level-2" id="pair-16-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-16-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-17-close">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-17-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-15-close">(</span><span class="token keyword keyword-int">int</span> number <span class="token operator">:</span> fibonacci<span class="token punctuation brace-round brace-close brace-level-2" id="pair-15-open">)</span> <span class="token comment">// iterate over array fibonacci</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-18-close">{</span>
       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> number <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span> <span class="token comment">// we access the array element for this iteration through variable number</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-18-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-19-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints:</p><pre>0 1 1 2 3 5 8 13 21 34 55 89
</pre><p>Let’s take a closer look at how this works. First, the <em>for loop</em> executes, and variable number is set to the value of the first element, which has value 0. The program executes the statement, which prints 0. Then the <em>for loop</em> executes again, and number is set to the value of the second element, which has value 1. The statement executes again, which prints 1. The <em>for loop</em> continues to iterate through each of the numbers in turn, executing the statement for each one, until there are no elements left in the array to iterate over. At that point, the loop terminates, and the program continues execution (returning 0 to the operating system).</p><p>Note that variable number is not an array index. It’s assigned the value of the array element for the current loop iteration.</p><p class="cpp-section cpp-topline" style="clear:both">For each loops and the auto keyword</p><p>Because element_declaration should have the same type as the array elements, this is an ideal case in which to use the <code>auto</code> keyword, and let C++ deduce the type of the array elements for us.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><p>Here’s the above example, using auto:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-20-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-20-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-25-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> fibonacci<span class="token punctuation brace-square brace-open brace-level-2" id="pair-22-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-22-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-23-close">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-23-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-21-close">(</span><span class="token keyword keyword-auto">auto</span> number <span class="token operator">:</span> fibonacci<span class="token punctuation brace-round brace-close brace-level-2" id="pair-21-open">)</span> <span class="token comment">// type is auto, so number has its type deduced from the fibonacci array</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-24-close">{</span>
       std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> number <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-24-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-25-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p class="cpp-section cpp-topline" style="clear:both">For-each loops and references</p><p>In the following for-each example, our element declarations are declared by value:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>string array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-27-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-27-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-28-close">{</span> <span class="token string">"peter"</span><span class="token punctuation">,</span> <span class="token string">"likes"</span><span class="token punctuation">,</span> <span class="token string">"frozen"</span><span class="token punctuation">,</span> <span class="token string">"yogurt"</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-28-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-26-close">(</span><span class="token keyword keyword-auto">auto</span> element <span class="token operator">:</span> array<span class="token punctuation brace-round brace-close brace-level-1" id="pair-26-open">)</span> <span class="token comment">// element will be a copy of the current array element</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-29-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-29-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This means each array element iterated over will be copied into variable element. Copying array elements can be expensive, and most of the time we really just want to refer to the original element. Fortunately, we can use references for this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>string array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-31-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-31-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-32-close">{</span> <span class="token string">"peter"</span><span class="token punctuation">,</span> <span class="token string">"likes"</span><span class="token punctuation">,</span> <span class="token string">"frozen"</span><span class="token punctuation">,</span> <span class="token string">"yogurt"</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-32-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-30-close">(</span><span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> element<span class="token operator">:</span> array<span class="token punctuation brace-round brace-close brace-level-1" id="pair-30-open">)</span> <span class="token comment">// The ampersand makes element a reference to the actual array element, preventing a copy from being made</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-33-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-33-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In the above example, element will be a reference to the currently iterated array element, avoiding having to make a copy. Also any changes to element will affect the array being iterated over, something not possible if element is a normal variable.</p><p>And, of course, it’s a good idea to make your reference <code>const</code> if you’re intending to use it in a read-only fashion:</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>string array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-35-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-35-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-36-close">{</span> <span class="token string">"peter"</span><span class="token punctuation">,</span> <span class="token string">"likes"</span><span class="token punctuation">,</span> <span class="token string">"frozen"</span><span class="token punctuation">,</span> <span class="token string">"yogurt"</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-36-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-34-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> element<span class="token operator">:</span> array<span class="token punctuation brace-round brace-close brace-level-1" id="pair-34-open">)</span> <span class="token comment">// element is a const reference to the currently iterated array element</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-37-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-37-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>In for-each loops element declarations, if your elements are non-fundamental types, use references or <code>const</code> references for performance reasons.</p></div><p class="cpp-section cpp-topline" style="clear:both">Rewriting the max scores example using a for-each loop</p><p>Here’s the example at the top of the lesson rewritten using a <em>for each</em> loop:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-38-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-38-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-46-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-41-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-41-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-42-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-42-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> maxScore<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-43-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-43-open">}</span><span class="token punctuation">;</span> <span class="token comment">// keep track of our largest score</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-39-close">(</span><span class="token keyword keyword-auto">auto</span> score <span class="token operator">:</span> scores<span class="token punctuation brace-round brace-close brace-level-2" id="pair-39-open">)</span> <span class="token comment">// iterate over array scores, assigning each value in turn to variable score</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-45-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-40-close">(</span>score <span class="token operator">&gt;</span> maxScore<span class="token punctuation brace-round brace-close brace-level-3" id="pair-40-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-44-close">{</span>
            maxScore <span class="token operator">=</span> score<span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-44-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-45-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The best score was "</span> <span class="token operator">&lt;&lt;</span> maxScore <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-46-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that in this example, we no longer have to manually subscript the array or get its size. We can access the array element directly through variable score. The array has to have size information. An array that decayed to a pointer cannot be used in a for-each loop.</p><p class="cpp-section cpp-topline" style="clear:both">For-each loops and non-arrays</p><p><em>For-each</em> loops don’t only work with fixed arrays, they work with many kinds of list-like structures, such as vectors (e.g. <code>std::vector</code>), linked lists, trees, and maps. We haven’t covered any of these yet, so don’t worry if you don’t know what these are. Just remember that for each loops provide a flexible and generic way to iterate through more than just arrays.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-47-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-47-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-51-close">{</span>
    std<span class="token double-colon punctuation">::</span>vector fibonacci<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-49-close">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">89</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-49-open">}</span><span class="token punctuation">;</span> <span class="token comment">// note use of std::vector here rather than a fixed array</span>
    <span class="token comment">// Before C++17</span>
    <span class="token comment">// std::vector&lt;int&gt; fibonacci{ 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89 };</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-48-close">(</span><span class="token keyword keyword-auto">auto</span> number <span class="token operator">:</span> fibonacci<span class="token punctuation brace-round brace-close brace-level-2" id="pair-48-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-50-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> number <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-50-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-51-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p class="cpp-section cpp-topline" style="clear:both">For-each doesn’t work with pointers to an array</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p>In order to iterate through the array, for-each needs to know how big the array is, which means knowing the array size. Because arrays that have decayed into a pointer do not know their size, for-each loops will not work with them!</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">sumArray</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-52-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-56-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-56-open">]</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-52-open">)</span> <span class="token comment">// array is a pointer</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-60-close">{</span>
    <span class="token keyword keyword-int">int</span> sum<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-58-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-58-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-53-close">(</span><span class="token keyword keyword-auto">auto</span> number <span class="token operator">:</span> array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-53-open">)</span> <span class="token comment">// compile error, the size of array isn't known</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-59-close">{</span>
        sum <span class="token operator">+=</span> number<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-59-open">}</span>

    <span class="token keyword keyword-return">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-60-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-54-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-54-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-62-close">{</span>
     <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-57-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-57-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-61-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-61-open">}</span><span class="token punctuation">;</span>

     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">sumArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-55-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-55-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// array decays into a pointer here</span>

     <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-62-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Similarly, dynamic arrays won’t work with for-each loops for the same reason.</p><p class="cpp-section cpp-topline" style="clear:both">Can I get the index of the current element?</p><p><em>For-each</em> loops do <em>not</em> provide a direct way to get the array index of the current element. This is because many of the structures that <em>for-each</em> loops can be used with (such as linked lists) are not directly indexable!</p><p>Since C++20, range-based for-loops can be used with an <span class="cpp-definition">init-statement</span> just like the init-statement in normal for-loops. We can use the init-statement to create a manual index counter without polluting the function in which the for-loop is placed.</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><p>The init-statement is placed right before the loop variable:</p><pre>for (init-statement; element_declaration : array)
   statement;
</pre><p>In the following code, we have two arrays which are correlated by index. For example, the student with the name at <code>names[3]</code> has a score of <code>scores[3]</code>. Whenever a student with a new high score is found, we print their name and difference in points to the previous high score.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-63-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-63-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-76-close">{</span>
    std<span class="token double-colon punctuation">::</span>string names<span class="token punctuation brace-square brace-open brace-level-2" id="pair-67-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-67-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-70-close">{</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token string">"Betty"</span><span class="token punctuation">,</span> <span class="token string">"Caroline"</span><span class="token punctuation">,</span> <span class="token string">"Dave"</span><span class="token punctuation">,</span> <span class="token string">"Emily"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-70-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Names of the students</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-68-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-68-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-71-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-71-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> maxScore<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-72-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-72-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-64-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-73-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-73-open">}</span><span class="token punctuation">;</span> <span class="token keyword keyword-auto">auto</span> score <span class="token operator">:</span> scores<span class="token punctuation brace-round brace-close brace-level-2" id="pair-64-open">)</span> <span class="token comment">// i is the index of the current element</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-75-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-65-close">(</span>score <span class="token operator">&gt;</span> maxScore<span class="token punctuation brace-round brace-close brace-level-3" id="pair-65-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-74-close">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> names<span class="token punctuation brace-square brace-open brace-level-4" id="pair-69-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-4" id="pair-69-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" beat the previous best score of "</span> <span class="token operator">&lt;&lt;</span> maxScore <span class="token operator">&lt;&lt;</span> <span class="token string">" by "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-66-close">(</span>score <span class="token operator">-</span> maxScore<span class="token punctuation brace-round brace-close brace-level-4" id="pair-66-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" points!\n"</span><span class="token punctuation">;</span>
            maxScore <span class="token operator">=</span> score<span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-74-open">}</span>

        <span class="token operator">++</span>i<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-75-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The best score was "</span> <span class="token operator">&lt;&lt;</span> maxScore <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-76-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>Alex beat the previous best score of 0 by 84 points!
Betty beat the previous best score of 84 by 8 points!
The best score was 92
</pre><p>The <code>int i{ 0 };</code> is the init-statement, it only gets executed once when the loop starts. At the end of each iteration, we increment <code>i</code>, similar to a normal for-loop. However, if we were to use <code>continue</code> inside the loop, the <code>++i</code> would get skipped, leading to unexpected results. If you use <code>continue</code>, you need to make sure that <code>i</code> gets incremented before the <code>continue</code> is encountered.</p><p>Before C++20, the index variable <code>i</code> had to be declared outside of the loop, which could lead to name conflicts when we wanted to define another variable named <code>i</code> later in the function.</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">var asau='8992865211';var cid='2886929358';var pid='ca-pub-0588844875925051';var slotId='div-gpt-ad-learncpp_com-large-leaderboard-2-0';var ffid=1;var alS=1036%1000;var container=document.getElementById(slotId);var ins=document.createElement('ins');ins.id=slotId+'-asloaded';ins.className='adsbygoogle ezasloaded';ins.dataset.adClient=pid;ins.dataset.adSlot=asau;ins.dataset.adChannel=cid;ins.dataset.fullWidthResponsive='true';ins.style.display='block';if(ffid!==2){ins.style.width=container.offsetWidth+'px';}else{container.attributes.ezaw.value+'px';}
if(alS>=30&&(alS!=34&&alS!=35)){ins.dataset.adFormat='auto';}else{ins.style.height=container.attributes.ezah.value+'px';}
container.appendChild(ins);(adsbygoogle=window.adsbygoogle||[]).push({});window.ezoSTPixelAdd(slotId,'stat_source_id',44);window.ezoSTPixelAdd(slotId,'adsensetype',2);var lo=new MutationObserver(window.ezaslEvent);lo.observe(document.getElementById(slotId+'-asloaded'),{attributes:true});</script><ins id="div-gpt-ad-learncpp_com-large-leaderboard-2-0-asloaded" class="adsbygoogle ezasloaded" data-ad-client="ca-pub-0588844875925051" data-ad-slot="8992865211" data-ad-channel="2886929358" data-full-width-responsive="true" data-ad-format="auto" style="display: block; width: 970px; height: 280px;" data-adsbygoogle-status="done"><ins id="aswift_0_expand" style="border: none; height: 280px; width: 970px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-table;"><ins id="aswift_0_anchor" style="border: none; height: 280px; width: 970px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: block;"></ins></ins></ins></span></span></div></div><p class="cpp-section cpp-topline" style="clear:both">Conclusion</p><p><em>For-each</em> loops provide a superior syntax for iterating through an array when we need to access all of the array elements in forwards sequential order. It should be preferred over the standard for loop in the cases where it can be used. To prevent making copies of each element, the element declaration can be a reference.</p><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><p>This one should be easy.</p><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>Declare a fixed array with the following names: Alex, Betty, Caroline, Dave, Emily, Fred, Greg, and Holly. Ask the user to enter a name. Use a <em>for each</em> loop to see if the name the user entered is in the array.</p><p>Sample output:</p><pre>Enter a name: Betty
Betty was found.
</pre><pre>Enter a name: Megatron
Megatron was not found.
</pre><p>Hint: Use <code>std::string_view</code> as your array type.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-77-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-77-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-87-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> std<span class="token double-colon punctuation">::</span>string_view names<span class="token punctuation brace-square brace-open brace-level-2" id="pair-81-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-81-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-82-close">{</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token string">"Betty"</span><span class="token punctuation">,</span> <span class="token string">"Caroline"</span><span class="token punctuation">,</span> <span class="token string">"Dave"</span><span class="token punctuation">,</span> <span class="token string">"Emily"</span><span class="token punctuation">,</span> <span class="token string">"Fred"</span><span class="token punctuation">,</span> <span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token string">"Holly"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-82-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter a name: "</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string username<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-83-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-83-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> username<span class="token punctuation">;</span>

    <span class="token keyword keyword-bool">bool</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-84-close">{</span> <span class="token boolean">false</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-84-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-78-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span> name <span class="token operator">:</span> names<span class="token punctuation brace-round brace-close brace-level-2" id="pair-78-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-86-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-79-close">(</span>name <span class="token operator">==</span> username<span class="token punctuation brace-round brace-close brace-level-3" id="pair-79-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-85-close">{</span>
            found <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-85-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-86-open">}</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-80-close">(</span>found<span class="token punctuation brace-round brace-close brace-level-2" id="pair-80-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> username <span class="token operator">&lt;&lt;</span> <span class="token string">" was found.\n"</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-else">else</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> username <span class="token operator">&lt;&lt;</span> <span class="token string">" was not found.\n"</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-87-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/void-pointers/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.14</span>Void pointers</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/dynamically-allocating-arrays/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.12</span>Dynamically allocating arrays</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/for-each-loops/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/type-deduction-for-objects-using-the-auto-keyword/" rel="prev"><span>8.7 — Type deduction for objects using the auto keyword</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/why-functions-are-useful-and-how-to-use-them-effectively/" rel="next"><span>2.5 — Why functions are useful, and how to use them effectively</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="430"><span class="wpdtc" title="430">430</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CNbk_tGZ-PYCFZvJFgUdo7EDYA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=6fdf4829-3b59-405f-6fbf-ef08b088a897&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/1488107260895336&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/for-each-loops/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CNfk_tGZ-PYCFZvJFgUdo7EDYA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=6fdf4829-3b59-405f-6fbf-ef08b088a897&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/8388837388910980&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/for-each-loops/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>