<main id="main" role="main" class="main"><article id="post-84" class="post-84 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.3 — Arrays and loops</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2007-07-02T14:03:14-07:00" itemprop="datePublished">July 2, 2007, 2:03 pm</time>
<time class="updated" datetime="2022-03-31T17:00:39-07:00" itemprop="dateModified">March 31, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CJH3j4CY-PYCFcEkvQodtLoNUA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>Consider the case where we want to find the average test score of a class of students. Using individual variables:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> numStudents<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-1-close">{</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-1-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> score0<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-2-close">{</span> <span class="token number">84</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-2-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> score1<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-3-close">{</span> <span class="token number">92</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-3-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> score2<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-4-close">{</span> <span class="token number">76</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-4-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> score3<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-5-close">{</span> <span class="token number">81</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-5-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> score4<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-6-close">{</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-6-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> totalScore<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-7-close">{</span> score0 <span class="token operator">+</span> score1 <span class="token operator">+</span> score2 <span class="token operator">+</span> score3 <span class="token operator">+</span> score4 <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-7-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-auto">auto</span> averageScore<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-8-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-double">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-0-close">(</span>totalScore<span class="token punctuation brace-round brace-close brace-level-2" id="pair-0-open">)</span> <span class="token operator">/</span> numStudents <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-8-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>That’s a lot of variables and a lot of typing -- and this is just 5 students! Imagine how much work we’d have to do for 30 students, or 150.</p><p>Plus, if a new student is added, a new variable has to be declared, initialized, and added to the totalScore calculation. Any time you have to modify old code, you run the risk of introducing errors.</p><p>Using arrays offers a slightly better solution:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-1" id="pair-12-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-12-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-18-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-18-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> numStudents<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-19-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-10-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-9-close">(</span>scores<span class="token punctuation brace-round brace-close brace-level-3" id="pair-9-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-10-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-19-open">}</span><span class="token punctuation">;</span> <span class="token comment">// requires C++17 and &lt;iterator&gt; header</span>
<span class="token keyword keyword-int">int</span> totalScore<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-20-close">{</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-13-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-13-open">]</span> <span class="token operator">+</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-14-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-14-open">]</span> <span class="token operator">+</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-15-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-15-open">]</span> <span class="token operator">+</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-16-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-16-open">]</span> <span class="token operator">+</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-17-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-17-open">]</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-20-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-auto">auto</span> averageScore<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-21-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-double">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-11-close">(</span>totalScore<span class="token punctuation brace-round brace-close brace-level-2" id="pair-11-open">)</span> <span class="token operator">/</span> numStudents <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-21-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This cuts down on the number of variables declared significantly, but totalScore still requires each array element be listed individually. And as above, changing the number of students means the totalScore formula needs to be manually adjusted.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>If only there were a way to loop through our array and calculate totalScore directly.</p><p class="cpp-section cpp-topline" style="clear:both">Loops and arrays</p><p>In a previous lesson, you learned that the array subscript doesn’t need to be a constant value -- it can be a variable. This means we can use a loop variable as an array index to loop through all of the elements of our array and perform some calculation on them. This is such a common thing to do that wherever you find arrays, you will almost certainly find loops! When a loop is used to access each array element in turn, this is often called <strong>iterating</strong> through the array.</p><p>Here’s our example above using a <em>for loop</em>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-1" id="pair-26-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-26-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-28-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-28-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> numStudents<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-29-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-23-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-22-close">(</span>scores<span class="token punctuation brace-round brace-close brace-level-3" id="pair-22-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-23-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-29-open">}</span><span class="token punctuation">;</span>
<span class="token comment">// const int numStudents{ sizeof(scores) / sizeof(scores[0]) }; // use this instead if not C++17 capable</span>
<span class="token keyword keyword-int">int</span> totalScore<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-30-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-30-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// use a loop to calculate totalScore</span>
<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-24-close">(</span><span class="token keyword keyword-int">int</span> student<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-31-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-31-open">}</span><span class="token punctuation">;</span> student <span class="token operator">&lt;</span> numStudents<span class="token punctuation">;</span> <span class="token operator">++</span>student<span class="token punctuation brace-round brace-close brace-level-1" id="pair-24-open">)</span>
    totalScore <span class="token operator">+=</span> scores<span class="token punctuation brace-square brace-open brace-level-1" id="pair-27-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-1" id="pair-27-open">]</span><span class="token punctuation">;</span>

<span class="token keyword keyword-auto">auto</span> averageScore<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-32-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-double">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-25-close">(</span>totalScore<span class="token punctuation brace-round brace-close brace-level-2" id="pair-25-open">)</span> <span class="token operator">/</span> numStudents <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-32-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This solution is ideal in terms of both readability and maintenance. Because the loop does all of our array element accesses, the formulas adjust automatically to account for the number of elements in the array. This means the calculations do not have to be manually altered to account for new students, and we do not have to manually add the name of new array elements!</p><p>Here’s an example of using a loop to search an array in order to determine the best score in the class:</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// for std::size</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-33-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-33-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-47-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-38-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-38-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-41-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-41-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> numStudents<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-42-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-35-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-34-close">(</span>scores<span class="token punctuation brace-round brace-close brace-level-4" id="pair-34-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-35-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-42-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span> maxScore<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-43-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-43-open">}</span><span class="token punctuation">;</span> <span class="token comment">// keep track of our largest score</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-36-close">(</span><span class="token keyword keyword-int">int</span> student<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-44-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-44-open">}</span><span class="token punctuation">;</span> student <span class="token operator">&lt;</span> numStudents<span class="token punctuation">;</span> <span class="token operator">++</span>student<span class="token punctuation brace-round brace-close brace-level-2" id="pair-36-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-46-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-37-close">(</span>scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-39-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-39-open">]</span> <span class="token operator">&gt;</span> maxScore<span class="token punctuation brace-round brace-close brace-level-3" id="pair-37-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-45-close">{</span>
            maxScore <span class="token operator">=</span> scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-40-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-40-open">]</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-45-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-46-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The best score was "</span> <span class="token operator">&lt;&lt;</span> maxScore <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-47-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In this example, we use a non-loop variable called maxScore to keep track of the highest score we’ve seen. maxScore is initialized to 0 to represent that we have not seen any scores yet. We then iterate through each element of the array, and if we find a score that is higher than any we’ve seen before, we set maxScore to that value. Thus, maxScore always represents the highest score out of all the elements we’ve searched so far. By the time we reach the end of the array, maxScore holds the highest score in the entire array.</p><p class="cpp-section cpp-topline" style="clear:both">Mixing loops and arrays</p><p>Loops are typically used with arrays to do one of three things:</p><ol start="1"><li>Calculate a value (e.g. average value, total value)</li><li>Search for a value (e.g. highest value, lowest value).</li><li>Reorganize the array (e.g. ascending order, descending order)</li></ol><p>When calculating a value, a variable is typically used to hold an intermediate result that is used to calculate the final value. In the above example where we are calculating an average score, totalScore holds the total score for all the elements examined so far.</p><p>When searching for a value, a variable is typically used to hold the best candidate value seen so far (or the array index of the best candidate). In the above example where we use a loop to find the best score, maxScore is used to hold the highest score encountered so far.</p><p>Sorting an array is a bit more tricky, as it typically involves nested loops. We will cover sorting an array in the next lesson.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p class="cpp-section cpp-topline" style="clear:both">Arrays and off-by-one errors</p><p>One of the trickiest parts of using loops with arrays is making sure the loop iterates the proper number of times. Off-by-one errors are easy to make, and trying to access an element that is larger than the length of the array can have dire consequences. Consider the following program:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-48-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-48-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-62-close">{</span>
  <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-53-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-53-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-56-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-56-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> numStudents<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-57-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-50-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-49-close">(</span>scores<span class="token punctuation brace-round brace-close brace-level-4" id="pair-49-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-50-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-57-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-int">int</span> maxScore<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-58-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-58-open">}</span><span class="token punctuation">;</span> <span class="token comment">// keep track of our largest score</span>
  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-51-close">(</span><span class="token keyword keyword-int">int</span> student<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-59-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-59-open">}</span><span class="token punctuation">;</span> student <span class="token operator">&lt;=</span> numStudents<span class="token punctuation">;</span> <span class="token operator">++</span>student<span class="token punctuation brace-round brace-close brace-level-2" id="pair-51-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-61-close">{</span>
      <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-52-close">(</span>scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-54-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-54-open">]</span> <span class="token operator">&gt;</span> maxScore<span class="token punctuation brace-round brace-close brace-level-3" id="pair-52-open">)</span>
      <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-60-close">{</span>
          maxScore <span class="token operator">=</span> scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-55-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-55-open">]</span><span class="token punctuation">;</span>
      <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-60-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-61-open">}</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The best score was "</span> <span class="token operator">&lt;&lt;</span> maxScore <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-62-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The problem with this program is that the condition in the for loop is wrong! The array declared has 5 elements, indexed from 0 to 4. However, this array loops from 0 to 5. Consequently, on the last iteration, the array will execute this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-63-close">(</span>scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-64-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-64-open">]</span> <span class="token operator">&gt;</span> maxScore<span class="token punctuation brace-round brace-close brace-level-1" id="pair-63-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-66-close">{</span>
    maxScore <span class="token operator">=</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-65-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-65-open">]</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-66-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>But scores[5] is undefined! This can cause all sorts of issues, with the most likely being that scores[5] results in a garbage value. In this case, the probable result is that maxScore will be wrong.</p><p>However, imagine what would happen if we inadvertently assigned a value to array[5]! We might overwrite another variable (or part of it), or perhaps corrupt something -- these types of bugs can be very hard to track down!</p><p>Consequently, when using loops with arrays, always double-check your loop conditions to make sure you do not introduce off-by-one errors.</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span><span class="ezoic-ad banner-1 banner-1120 adtester-container adtester-container-120 ezoic-ad-adaptive" data-ez-name="learncpp_com-banner-1"><span class="ezoic-ad banner-1 banner-1-multi-120 adtester-container adtester-container-120" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span><span class="ezoic-ad banner-1 banner-1-multi-120 adtester-container adtester-container-120" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0_1')};</script></span></span><span class="ezoic-ad banner-1 banner-1-multi-120 adtester-container adtester-container-120" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0_2')};</script></span></span><style>.banner-1-multi-120{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>Print the following array to the screen using a loop:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-67-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-67-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-68-close">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-68-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Hint: You can use std::size (as of C++17) or the sizeof() trick (prior to C++17) to determine the array length.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// for std::size</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-69-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-69-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-78-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-73-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-73-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-75-close">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-75-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-72-close">(</span><span class="token keyword keyword-int">int</span> index<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-76-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-76-open">}</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-71-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-70-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-4" id="pair-70-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-71-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation brace-round brace-close brace-level-2" id="pair-72-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-77-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-3" id="pair-74-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-3" id="pair-74-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-77-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-78-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #2</p><p>Given the array in question 1:</p><p>Ask the user for a number between 1 and 9. If the user does not enter a number between 1 and 9, repeatedly ask for an integer value until they do. Once they have entered a number between 1 and 9, print the array. Then search the array for the value that the user entered and print the index of that element.</p><p>You can test std::cin for invalid input by using the following code:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// if the user entered something invalid</span>
<span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-80-close">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-79-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-79-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-80-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-84-close">{</span>
    std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-81-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-81-open">)</span><span class="token punctuation">;</span> <span class="token comment">// reset any error flags</span>
    std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-83-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>streamsize<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-82-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-82-open">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-83-open">)</span><span class="token punctuation">;</span> <span class="token comment">// ignore any characters in the input buffer</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-84-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Here is a sample run of this program:</p><pre>Enter a number between 1 and 9: d
Enter a number between 1 and 9: 6
4 6 7 3 8 2 1 9 5
The number 6 has index 1
</pre><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// for std::size</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-85-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-85-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-110-close">{</span>
    <span class="token comment">// First, read in valid input from user</span>
    <span class="token keyword keyword-int">int</span> number<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-102-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-102-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-do">do</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-103-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter a number between 1 and 9: "</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> number<span class="token punctuation">;</span>

        <span class="token comment">// if the user entered an invalid character</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-87-close">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-86-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-86-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-87-open">)</span>
            std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-88-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-88-open">)</span><span class="token punctuation">;</span> <span class="token comment">// reset any error flags</span>

        std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-90-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>streamsize<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-89-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-89-open">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-90-open">)</span><span class="token punctuation">;</span> <span class="token comment">// ignore any extra characters in the input buffer (regardless of whether we had an error or not)</span>

    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-103-open">}</span> <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-91-close">(</span>number <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> number <span class="token operator">&gt;</span> <span class="token number">9</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-91-open">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Next, print the array</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-99-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-99-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-104-close">{</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-104-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-94-close">(</span><span class="token keyword keyword-int">int</span> index<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-105-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-105-open">}</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-93-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-92-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-4" id="pair-92-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-93-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation brace-round brace-close brace-level-2" id="pair-94-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-106-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-3" id="pair-100-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-3" id="pair-100-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-106-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token comment">// Then, search the array to find the matching number and print the index</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-97-close">(</span><span class="token keyword keyword-int">int</span> index<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-107-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-107-open">}</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-96-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-95-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-4" id="pair-95-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-96-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation brace-round brace-close brace-level-2" id="pair-97-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-109-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-98-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-4" id="pair-101-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-4" id="pair-101-open">]</span> <span class="token operator">==</span> number<span class="token punctuation brace-round brace-close brace-level-3" id="pair-98-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-108-close">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span>  <span class="token string">"The number "</span> <span class="token operator">&lt;&lt;</span> number <span class="token operator">&lt;&lt;</span> <span class="token string">" has index "</span> <span class="token operator">&lt;&lt;</span>  index <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
            <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span> <span class="token comment">// since each # in the array is unique, no need to search rest of array</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-108-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-109-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-110-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #3</p><p>Modify the following program so that instead of having maxScore hold the largest score directly, a variable named maxIndex holds the index of the largest score. The program should still print the largest score.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// for std::size</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-111-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-111-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-124-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-116-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-116-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-119-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-119-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span> maxScore<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-120-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-120-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Assume our largest score is 0 to start</span>

    <span class="token comment">// now look for a larger score in the full array</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-114-close">(</span><span class="token keyword keyword-int">int</span> student<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-121-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-121-open">}</span><span class="token punctuation">;</span> student <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-113-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-112-close">(</span>scores<span class="token punctuation brace-round brace-close brace-level-4" id="pair-112-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-113-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>student<span class="token punctuation brace-round brace-close brace-level-2" id="pair-114-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-123-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-115-close">(</span>scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-117-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-117-open">]</span> <span class="token operator">&gt;</span> maxScore<span class="token punctuation brace-round brace-close brace-level-3" id="pair-115-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-122-close">{</span>
            maxScore <span class="token operator">=</span> scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-118-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-118-open">]</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-122-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-123-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The best score was "</span> <span class="token operator">&lt;&lt;</span> maxScore <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-124-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_2'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_2" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// for std::size</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-125-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-125-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-139-close">{</span>
    <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-130-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-130-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-134-close">{</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-134-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span> maxIndex<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-135-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-135-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Assume the element at index 0 is the largest</span>

    <span class="token comment">// now look for a larger score in the rest of the array</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-128-close">(</span><span class="token keyword keyword-int">int</span> student<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-136-close">{</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-136-open">}</span><span class="token punctuation">;</span> student <span class="token operator">&lt;</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-127-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-126-close">(</span>scores<span class="token punctuation brace-round brace-close brace-level-4" id="pair-126-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-127-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>student<span class="token punctuation brace-round brace-close brace-level-2" id="pair-128-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-138-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-129-close">(</span>scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-131-close">[</span>student<span class="token punctuation brace-square brace-close brace-level-4" id="pair-131-open">]</span> <span class="token operator">&gt;</span> scores<span class="token punctuation brace-square brace-open brace-level-4" id="pair-132-close">[</span>maxIndex<span class="token punctuation brace-square brace-close brace-level-4" id="pair-132-open">]</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-129-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-137-close">{</span>
            maxIndex <span class="token operator">=</span> student<span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-137-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-138-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The best score was "</span> <span class="token operator">&lt;&lt;</span> scores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-133-close">[</span>maxIndex<span class="token punctuation brace-square brace-close brace-level-2" id="pair-133-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-139-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/sorting-an-array-using-selection-sort/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.4</span>Sorting an array using selection sort</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/arrays-part-ii/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.2</span>Arrays (Part II)</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/arrays-and-loops/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-programming/eight-c-programming-mistakes-the-compiler-wont-catch/" rel="prev"><span>Eight C++ programming mistakes the compiler won’t catch</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/sorting-an-array-using-selection-sort/" rel="next"><span>10.4 — Sorting an array using selection sort</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="501"><span class="wpdtc" title="501">501</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CKuJgYCY-PYCFVKC6QUdftwKMA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=9647a673-cc2f-4b1a-77a4-e5e82e553a9c&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/617352214864944&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/arrays-and-loops/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CKyJgYCY-PYCFVKC6QUdftwKMA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=9647a673-cc2f-4b1a-77a4-e5e82e553a9c&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/8371603196916006&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/arrays-and-loops/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>