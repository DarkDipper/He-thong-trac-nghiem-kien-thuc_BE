<main id="main" role="main" class="main"><article id="post-2559" class="post-2559 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.16 — An introduction to std::array</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2015-09-14T16:39:04-07:00" itemprop="datePublished">September 14, 2015, 4:39 pm</time>
<time class="updated" datetime="2022-02-15T16:41:54-08:00" itemprop="dateModified">February 15, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CKq5_uuZ-PYCFcgLvQod41MDyw"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>In previous lessons, we’ve talked at length about fixed and dynamic arrays. Although both are built right into the C++ language, they both have downsides: Fixed arrays decay into pointers, losing the array length information when they do, and dynamic arrays have messy deallocation issues and are challenging to resize without error.</p><p>To address these issues, the C++ standard library includes functionality that makes array management easier, <code>std::array</code> and <code>std::vector</code>. We’ll examine <code>std::array</code> in this lesson, and <code>std::vector</code> in the next.</p><p class="cpp-section cpp-topline" style="clear:both">An introduction to std::array</p><p><code>std::array</code> provides fixed array functionality that won’t decay when passed into a function. <code>std::array</code> is defined in the <code>&lt;array&gt;</code> header, inside the <code>std</code> namespace.</p><p>Declaring a <code>std::array</code> variable is easy:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>

std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> myArray<span class="token punctuation">;</span> <span class="token comment">// declare an integer array with length 3</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Just like the native implementation of fixed arrays, the length of a <code>std::array</code> must be known at compile time.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p><code>std::array</code> can be initialized using initializer lists or list initialization:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> myArray <span class="token operator">=</span> <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-0-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-0-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initializer list</span>
std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> myArray2 <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-1-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-1-open">}</span><span class="token punctuation">;</span> <span class="token comment">// list initialization</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Unlike built-in fixed arrays, with std::array you can not omit the array length when providing an initializer:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token operator">&gt;</span> myArray <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-2-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-2-open">}</span><span class="token punctuation">;</span> <span class="token comment">// illegal, array length must be provided</span>
std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span> myArray <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-3-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-3-open">}</span><span class="token punctuation">;</span> <span class="token comment">// illegal, array length must be provided</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>However, since C++17, it is allowed to omit the type and size. They can only be omitted together, but not one or the other, and only if the array is explicitly initialized.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-4-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-4-open">}</span><span class="token punctuation">;</span> <span class="token comment">// The type is deduced to std::array&lt;int, 5&gt;</span>
std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-5-close">{</span> <span class="token number">9.7</span><span class="token punctuation">,</span> <span class="token number">7.31</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-5-open">}</span><span class="token punctuation">;</span> <span class="token comment">// The type is deduced to std::array&lt;double, 2&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>We favor this syntax rather than typing out the type and size at the declaration. If your compiler is not C++17 capable, you need to use the explicit syntax instead.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// std::array myArray { 9, 7, 5, 3, 1 }; // Since C++17</span>
std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> myArray <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-6-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-6-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Before C++17</span>

<span class="token comment">// std::array myArray { 9.7, 7.31 }; // Since C++17</span>
std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-double">double</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span> myArray <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-7-close">{</span> <span class="token number">9.7</span><span class="token punctuation">,</span> <span class="token number">7.31</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-7-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Before C++17</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Since C++20, it is possible to specify the element type but omit the array length. This makes creation of <code>std::array</code> a little more like creation of C-style arrays. To create an array with a specific type and deduced size, we use the <code>std::to_array</code> function:</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-auto">auto</span> myArray1 <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-12-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">to_array</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-8-close">(</span><span class="token punctuation brace-curly brace-open brace-level-3" id="pair-11-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-11-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-8-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-12-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Specify type and size</span>
<span class="token keyword keyword-auto">auto</span> myArray2 <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-14-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">to_array</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-9-close">(</span><span class="token punctuation brace-curly brace-open brace-level-3" id="pair-13-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-13-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-9-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-14-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Specify type only, deduce size</span>
<span class="token keyword keyword-auto">auto</span> myArray3 <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-16-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">to_array</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-10-close">(</span><span class="token punctuation brace-curly brace-open brace-level-3" id="pair-15-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-15-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-10-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-16-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Deduce type and size</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Unfortunately, <code>std::to_array</code> is more expensive than creating a <code>std::array</code> directly, because it actually copies all elements from a C-style array to a <code>std::array</code>. For this reason, <code>std::to_array</code> should be avoided when the array is created many times (e.g. in a loop).</p><p>You can also assign values to the array using an initializer list</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> myArray<span class="token punctuation">;</span>
myArray <span class="token operator">=</span> <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-17-close">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-17-open">}</span><span class="token punctuation">;</span> <span class="token comment">// okay</span>
myArray <span class="token operator">=</span> <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-18-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-18-open">}</span><span class="token punctuation">;</span> <span class="token comment">// okay, elements 3 and 4 are set to zero!</span>
myArray <span class="token operator">=</span> <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-19-close">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-19-open">}</span><span class="token punctuation">;</span> <span class="token comment">// not allowed, too many elements in initializer list!</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Accessing <code>std::array</code> values using the subscript operator works just like you would expect:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation brace-square brace-open brace-level-1" id="pair-20-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-20-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
myArray<span class="token punctuation brace-square brace-open brace-level-1" id="pair-21-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-21-open">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Just like built-in fixed arrays, the subscript operator does not do any bounds-checking. If an invalid index is provided, bad things will probably happen.</p><p><code>std::array</code> supports a second form of array element access (the <code>at()</code> function) that does bounds checking:</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-24-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-24-open">}</span><span class="token punctuation">;</span>
myArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-22-close">(</span><span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-22-open">)</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// array element 1 is valid, sets array element 1 to value 6</span>
myArray<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-23-close">(</span><span class="token number">9</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-23-open">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// array element 9 is invalid, will throw a runtime error</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In the above example, the call to <code>myArray.at(1)</code> checks to ensure the index 1 is valid, and because it is, it returns a reference to array element 1. We then assign the value of 6 to this. However, the call to <code>myArray.at(9)</code> fails because array element 9 is out of bounds for the array. Instead of returning a reference, the <code>at()</code> function throws an error that terminates the program (note: It’s actually throwing an exception of type <code>std::out_of_range</code> -- we cover exceptions in chapter 14). Because it does bounds checking, <code>at()</code> is slower (but safer) than <code>operator[]</code>.</p><p><code>std::array</code> will clean up after itself when it goes out of scope, so there’s no need to do any kind of manual cleanup.</p><p class="cpp-section cpp-topline" style="clear:both">Size and sorting</p><p>The <code>size()</code> function can be used to retrieve the length of the <code>std::array</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-26-close">{</span> <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">1.8</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-26-open">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"length: "</span> <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-25-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-25-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints:</p><pre>length: 5
</pre><p>Because <code>std::array</code> doesn’t decay to a pointer when passed to a function, the <code>size()</code> function will work even if you call it from within a function:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">printLength</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-27-close">(</span><span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-double">double</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> myArray<span class="token punctuation brace-round brace-close brace-level-1" id="pair-27-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-31-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"length: "</span> <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-28-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-28-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-31-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-29-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-29-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-33-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-32-close">{</span> <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">1.8</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-32-open">}</span><span class="token punctuation">;</span>

    <span class="token function">printLength</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-30-close">(</span>myArray<span class="token punctuation brace-round brace-close brace-level-2" id="pair-30-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-33-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This also prints:</p><pre>length: 5
</pre><p>Note that the standard library uses the term “size” to mean the array length — do not get this confused with the results of <code>sizeof()</code> on a native fixed array, which returns the actual size of the array in memory (the size of an element multiplied by the array length). Yes, this nomenclature is inconsistent.</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p>Also note that we passed <code>std::array</code> by (<code>const</code>) reference. This is to prevent the compiler from making a copy of the <code>std::array</code> when the <code>std::array</code> was passed to the function (for performance reasons).</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Always pass <code>std::array</code> by reference or <code>const</code> reference</p></div><p>Because the length is always known, range-based for-loops work with <code>std::array</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>array myArray<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-35-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-35-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-34-close">(</span><span class="token keyword keyword-int">int</span> element <span class="token operator">:</span> myArray<span class="token punctuation brace-round brace-close brace-level-1" id="pair-34-open">)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>You can sort <code>std::array</code> using <code>std::sort</code>, which lives in the <code>&lt;algorithm&gt;</code> header:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// for std::sort</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-36-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-36-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-42-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-41-close">{</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-41-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-39-close">(</span>myArray<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-37-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-37-open">)</span><span class="token punctuation">,</span> myArray<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-38-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-38-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-39-open">)</span><span class="token punctuation">;</span> <span class="token comment">// sort the array forwards</span>
<span class="token comment">//  std::sort(myArray.rbegin(), myArray.rend()); // sort the array backwards</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-40-close">(</span><span class="token keyword keyword-int">int</span> element <span class="token operator">:</span> myArray<span class="token punctuation brace-round brace-close brace-level-2" id="pair-40-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-42-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints:</p><pre>1 3 5 7 9
</pre><p class="cpp-section cpp-topline" style="clear:both">Passing std::array of different lengths to a function</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><p>With a std::array, the element type and array length are part of the type information. Therefore, when we use a std::array as a function parameter, we have to specify the element type and array length:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-43-close">(</span><span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> myArray<span class="token punctuation brace-round brace-close brace-level-1" id="pair-43-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-47-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-44-close">(</span><span class="token keyword keyword-auto">auto</span> element <span class="token operator">:</span> myArray<span class="token punctuation brace-round brace-close brace-level-2" id="pair-44-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-47-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-45-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-45-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-49-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray5<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-48-close">{</span> <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">1.8</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-48-open">}</span><span class="token punctuation">;</span> <span class="token comment">// type deduced as std::array&lt;double, 5&gt;</span>
    <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-46-close">(</span>myArray5<span class="token punctuation brace-round brace-close brace-level-2" id="pair-46-open">)</span><span class="token punctuation">;</span> <span class="token comment">// error: printArray expects a std::array&lt;int, 5&gt;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-49-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The downside is that this limits our function to only handling arrays of this specific type and length. But what if we want to have our function handle arrays of different element types or lengths? We’d have to create a copy of the function for each different element type and/or array length we want to use. That’s a lot of duplication.</p><p>Fortunately, we can have C++ do this for us, using templates. We can create a template function that parameterizes part or all of the type information, and then C++ will use that template to create “real” functions (with actual types) as needed.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// printArray is a template function</span>
<span class="token keyword keyword-template">template</span> <span class="token operator">&lt;</span><span class="token keyword keyword-typename">typename</span> <span class="token class-name">T</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>size_t size<span class="token operator">&gt;</span> <span class="token comment">// parameterize the element type and size</span>
<span class="token keyword keyword-void">void</span> <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-50-close">(</span><span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> size<span class="token operator">&gt;</span><span class="token operator">&amp;</span> myArray<span class="token punctuation brace-round brace-close brace-level-1" id="pair-50-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-55-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-51-close">(</span><span class="token keyword keyword-auto">auto</span> element <span class="token operator">:</span> myArray<span class="token punctuation brace-round brace-close brace-level-2" id="pair-51-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> element <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-55-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-52-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-52-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-58-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray5<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-56-close">{</span> <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">1.8</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-56-open">}</span><span class="token punctuation">;</span>
    <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-53-close">(</span>myArray5<span class="token punctuation brace-round brace-close brace-level-2" id="pair-53-open">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>array myArray7<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-57-close">{</span> <span class="token number">9.0</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">,</span> <span class="token number">5.4</span><span class="token punctuation">,</span> <span class="token number">3.6</span><span class="token punctuation">,</span> <span class="token number">1.8</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">0.7</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-57-open">}</span><span class="token punctuation">;</span>
    <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-54-close">(</span>myArray7<span class="token punctuation brace-round brace-close brace-level-2" id="pair-54-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-58-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">Related content</p><p>We cover function templates in lesson <a href="https://www.learncpp.com/cpp-tutorial/function-templates/">8.13 -- Function templates</a>.</p></div><p class="cpp-section cpp-topline" style="clear:both">Manually indexing std::array via size_type</p><p>Pop quiz: What’s wrong with the following code?</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">var asau='8992865211';var cid='2886929358';var pid='ca-pub-0588844875925051';var slotId='div-gpt-ad-learncpp_com-large-leaderboard-2-0';var ffid=1;var alS=1036%1000;var container=document.getElementById(slotId);var ins=document.createElement('ins');ins.id=slotId+'-asloaded';ins.className='adsbygoogle ezasloaded';ins.dataset.adClient=pid;ins.dataset.adSlot=asau;ins.dataset.adChannel=cid;ins.dataset.fullWidthResponsive='true';ins.style.display='block';if(ffid!==2){ins.style.width=container.offsetWidth+'px';}else{container.attributes.ezaw.value+'px';}
if(alS>=30&&(alS!=34&&alS!=35)){ins.dataset.adFormat='auto';}else{ins.style.height=container.attributes.ezah.value+'px';}
container.appendChild(ins);(adsbygoogle=window.adsbygoogle||[]).push({});window.ezoSTPixelAdd(slotId,'stat_source_id',44);window.ezoSTPixelAdd(slotId,'adsensetype',2);var lo=new MutationObserver(window.ezaslEvent);lo.observe(document.getElementById(slotId+'-asloaded'),{attributes:true});</script><ins id="div-gpt-ad-learncpp_com-large-leaderboard-2-0-asloaded" class="adsbygoogle ezasloaded" data-ad-client="ca-pub-0588844875925051" data-ad-slot="8992865211" data-ad-channel="2886929358" data-full-width-responsive="true" data-ad-format="auto" style="display: block; width: 970px; height: 280px;" data-adsbygoogle-status="done"><ins id="aswift_0_expand" style="border: none; height: 280px; width: 970px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-table;"><ins id="aswift_0_anchor" style="border: none; height: 280px; width: 970px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: block;"></ins></ins></ins></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-59-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-59-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-65-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-63-close">{</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-63-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Iterate through the array and print the value of the elements</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-61-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-64-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-64-open">}</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-60-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-60-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-61-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation brace-square brace-open brace-level-2" id="pair-62-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-2" id="pair-62-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-65-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The answer is that there’s a likely signed/unsigned mismatch in this code! Due to a curious decision, the <code>size()</code> function and array index parameter to <code>operator[]</code> use a type called <code>size_type</code>, which is defined by the C++ standard as an <em>unsigned</em> integral type. Our loop counter/index (variable <code>i</code>) is a <code>signed int</code>. Therefore both the comparison <code>i &lt; myArray.size()</code> and the array index <code>myArray[i]</code> have type mismatches.</p><p>Interestingly enough, <code>size_type</code> isn’t a global type (like <code>int</code> or <code>std::size_t</code>). Rather, it’s defined inside the definition of <code>std::array</code> (C++ allows nested types). This means when we want to use <code>size_type</code>, we have to prefix it with the full array type (think of <code>std::array</code> acting as a namespace in this regard). In our above example, the fully-prefixed type of “size_type” is <code>std::array&lt;int, 5&gt;::size_type</code>!</p><p>Therefore, the correct way to write the above code is as follows:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-66-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-66-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-72-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-70-close">{</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-70-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// std::array&lt;int, 5&gt;::size_type is the return type of size()!</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-68-close">(</span>std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>size_type i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-71-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-71-open">}</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-67-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-67-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-68-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation brace-square brace-open brace-level-2" id="pair-69-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-2" id="pair-69-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-72-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>That’s not very readable. Fortunately, <code>std::array::size_type</code> is just an alias for <code>std::size_t</code>, so we can use that instead.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstddef&gt;</span> <span class="token comment">// std::size_t</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-73-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-73-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-79-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-77-close">{</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-77-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-75-close">(</span>std<span class="token double-colon punctuation">::</span>size_t i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-78-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-78-open">}</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-74-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-74-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-75-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation brace-square brace-open brace-level-2" id="pair-76-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-2" id="pair-76-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-79-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>A better solution is to avoid manual indexing of <code>std::array</code> in the first place. Instead, use range-based for-loops (or iterators) if possible.</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>Keep in mind that unsigned integers wrap around when you reach their limits. A common mistake is to decrement an index that is 0 already, causing a wrap-around to the maximum value. You saw this in the lesson about for-loops, but let’s repeat.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-80-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-80-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-86-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-84-close">{</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-84-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Print the array in reverse order.</span>
    <span class="token comment">// We can use auto, because we're not initializing i with 0.</span>
    <span class="token comment">// Bad:</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-82-close">(</span><span class="token keyword keyword-auto">auto</span> i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-85-close">{</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-81-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-81-open">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-85-open">}</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-82-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation brace-square brace-open brace-level-2" id="pair-83-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-2" id="pair-83-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-86-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This is an infinite loop, producing undefined behavior once <code>i</code> wraps around. There are two issues here. If <code>myArray</code> is empty, i.e. <code>size()</code> returns 0 (which is possible with <code>std::array</code>), <code>myArray.size() - 1</code> wraps around. The other issue occurs no matter how many elements there are. <code>i &gt;= 0</code> is always true, because unsigned integers cannot be less than 0.</p><p>A working reverse for-loop for unsigned integers takes an odd shape:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-87-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-87-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-93-close">{</span>
    std<span class="token double-colon punctuation">::</span>array myArray <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-91-close">{</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-91-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Print the array in reverse order.</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-89-close">(</span><span class="token keyword keyword-auto">auto</span> i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-92-close">{</span> myArray<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-88-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-88-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-92-open">}</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation brace-round brace-close brace-level-2" id="pair-89-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> myArray<span class="token punctuation brace-square brace-open brace-level-2" id="pair-90-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-2" id="pair-90-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-93-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Suddenly we decrement the index in the condition, and we use the postfix <code>--</code> operator. The condition runs before every iteration, including the first. In the first iteration, <code>i</code> is <code>myArray.size() - 1</code>, because <code>i</code> was decremented in the condition. When <code>i</code> is 0 and about to wrap around, the condition is no longer <code>true</code> and the loop stops. <code>i</code> actually wraps around when we do <code>i--</code> for the last time, but it’s not used afterwards.</p><p class="cpp-section cpp-topline" style="clear:both"><a name="struct"></a>Array of struct</p><p>Of course <code>std::array</code> isn’t limited to numbers as elements. Every type that can be used in a regular array can be used in a <code>std::array</code>.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">House</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-103-close">{</span>
    <span class="token keyword keyword-int">int</span> number<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-100-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-100-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> stories<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-101-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-101-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> roomsPerStory<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-102-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-102-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-103-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-94-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-94-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-109-close">{</span>
    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>House<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> houses<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-104-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-104-open">}</span><span class="token punctuation">;</span>

    houses<span class="token punctuation brace-square brace-open brace-level-2" id="pair-97-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-97-open">]</span> <span class="token operator">=</span> <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-105-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-105-open">}</span><span class="token punctuation">;</span>
    houses<span class="token punctuation brace-square brace-open brace-level-2" id="pair-98-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-98-open">]</span> <span class="token operator">=</span> <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-106-close">{</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-106-open">}</span><span class="token punctuation">;</span>
    houses<span class="token punctuation brace-square brace-open brace-level-2" id="pair-99-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-99-open">]</span> <span class="token operator">=</span> <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-107-close">{</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-107-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-95-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> house <span class="token operator">:</span> houses<span class="token punctuation brace-round brace-close brace-level-2" id="pair-95-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-108-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"House number "</span> <span class="token operator">&lt;&lt;</span> house<span class="token punctuation">.</span>number
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" has "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-96-close">(</span>house<span class="token punctuation">.</span>stories <span class="token operator">*</span> house<span class="token punctuation">.</span>roomsPerStory<span class="token punctuation brace-round brace-close brace-level-3" id="pair-96-open">)</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" rooms\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-108-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-109-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>House number 13 has 120 rooms
House number 14 has 30 rooms
House number 15 has 120 rooms
</pre><p>However, things get a little weird when we try to initialize the array.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// Doesn't work.</span>
std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>House<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> houses<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-113-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-110-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-110-open">}</span><span class="token punctuation">,</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-111-close">{</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-111-open">}</span><span class="token punctuation">,</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-112-close">{</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-112-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-113-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Although we can initialize <code>std::array</code> like this if its elements are simple types, like <code>int</code> or <code>std::string</code>, it doesn’t work with types that need multiple values to be created. Let’s have a look at why this is the case.</p><p><code>std::array</code> is an aggregate type, just like <code>House</code>. There is no special function for the creation of a <code>std::array</code>. Rather, its internal array gets initialized like any other member variable of a <code>struct</code>. To make this easier to understand, we’ll implement a simple array type ourselves.</p><p>As of now, we can’t do this without having to access the <code>value</code> member. You’ll learn how to get around that later. This doesn’t affect the issue we’re observing.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-struct">struct</span> <span class="token class-name">Array</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-117-close">{</span>
  <span class="token keyword keyword-int">int</span> value<span class="token punctuation brace-square brace-open brace-level-2" id="pair-115-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-115-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-116-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-116-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-117-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-114-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-114-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-119-close">{</span>
    Array array<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-118-close">{</span>
        <span class="token number">11</span><span class="token punctuation">,</span>
        <span class="token number">12</span><span class="token punctuation">,</span>
        <span class="token number">13</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-118-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-119-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>As expected, this works. So does <code>std::array</code> if we use it with <code>int</code> elements. When we instantiate a <code>struct</code>, we can initialize all of its members. If we try to create an <code>Array</code> of <code>House</code>s, we get an error.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-struct">struct</span> <span class="token class-name">House</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-125-close">{</span>
    <span class="token keyword keyword-int">int</span> number<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-122-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-122-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> stories<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-123-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-123-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> roomsPerStory<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-124-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-124-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-125-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Array</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-127-close">{</span>
    <span class="token comment">// This is now an array of House</span>
    House value<span class="token punctuation brace-square brace-open brace-level-2" id="pair-121-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-121-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-126-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-126-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-127-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-120-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-120-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-132-close">{</span>
    <span class="token comment">// If we try to initialize the array, we get an error.</span>
    Array houses<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-131-close">{</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-128-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-128-open">}</span><span class="token punctuation">,</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-129-close">{</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-129-open">}</span><span class="token punctuation">,</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-130-close">{</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-130-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-131-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-132-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>When we use braces inside of the initialization, the compiler will try to initialize one member of the <code>struct</code> for each pair of braces. Rather than initializing the <code>Array</code> like this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// This is wrong</span>
Array houses<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-136-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-133-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-133-open">}</span><span class="token punctuation">,</span> <span class="token comment">// value[0]</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-134-close">{</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-134-open">}</span><span class="token punctuation">,</span> <span class="token comment">// value[1]</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-135-close">{</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-135-open">}</span>  <span class="token comment">// value[2]</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-136-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The compiler tries to initialize the <code>Array</code> like this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">Array houses<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-140-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-137-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-137-open">}</span><span class="token punctuation">,</span> <span class="token comment">// value</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-138-close">{</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-138-open">}</span><span class="token punctuation">,</span> <span class="token comment">// ???</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-139-close">{</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-139-open">}</span>  <span class="token comment">// ???</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-140-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The first pair of inner braces initializes <code>value</code>, because <code>value</code> is the first member of <code>Array</code>. Without the other two pairs of braces, there would be one house with number 13, 4 stories, and 30 rooms per story.</p><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">A reminder</p><p>Braces can be omitted during aggregate initialization:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-struct">struct</span> <span class="token class-name">S</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-144-close">{</span>
  <span class="token keyword keyword-int">int</span> arr<span class="token punctuation brace-square brace-open brace-level-2" id="pair-141-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-141-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-142-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-142-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-143-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-143-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-144-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// These two do the same</span>
S s1<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-146-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-145-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-145-open">}</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-146-open">}</span><span class="token punctuation">;</span>
S s2<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-147-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-147-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>To initialize all houses, we need to do so in the first pair of braces.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">Array houses<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-149-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-148-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-148-open">}</span><span class="token punctuation">,</span> <span class="token comment">// value</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-149-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This works, but it’s very confusing. So confusing that your compiler might even warn you about it. If we add braces around each element of the array, the initialization is a lot easier to read.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">House</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-157-close">{</span>
    <span class="token keyword keyword-int">int</span> number<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-154-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-154-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> stories<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-155-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-155-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> roomsPerStory<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-156-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-156-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-157-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Array</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-159-close">{</span>
    House value<span class="token punctuation brace-square brace-open brace-level-2" id="pair-153-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-153-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-158-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-158-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-159-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-150-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-150-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-166-close">{</span>
    <span class="token comment">// With braces, this works.</span>
    Array houses<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-164-close">{</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-163-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-160-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">30</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-160-open">}</span><span class="token punctuation">,</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-161-close">{</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-161-open">}</span><span class="token punctuation">,</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-162-close">{</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-162-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-163-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-164-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-151-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> house <span class="token operator">:</span> houses<span class="token punctuation">.</span>value<span class="token punctuation brace-round brace-close brace-level-2" id="pair-151-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-165-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"House number "</span> <span class="token operator">&lt;&lt;</span> house<span class="token punctuation">.</span>number
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" has "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-152-close">(</span>house<span class="token punctuation">.</span>stories <span class="token operator">*</span> house<span class="token punctuation">.</span>roomsPerStory<span class="token punctuation brace-round brace-close brace-level-3" id="pair-152-open">)</span>
                  <span class="token operator">&lt;&lt;</span> <span class="token string">" rooms\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-165-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-166-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This is why you’ll see an extra pair of braces in initializations of <code>std::array</code>.</p><p class="cpp-section cpp-topline" style="clear:both">Summary</p><p><code>std::array</code> is a great replacement for built-in fixed arrays. It’s efficient, in that it doesn’t use any more memory than built-in fixed arrays. The only real downside of a <code>std::array</code> over a built-in fixed array is a slightly more awkward syntax, that you have to explicitly specify the array length (the compiler won’t calculate it for you from the initializer, unless you also omit the type, which isn’t always possible), and the signed/unsigned issues with size and indexing. But those are comparatively minor quibbles — we recommend using <code>std::array</code> over built-in fixed arrays for any non-trivial array use.</p><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdvector/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.17</span>An introduction to std::vector</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/pointers-to-pointers/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.15</span>Pointers to pointers and dynamic multidimensional arrays</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/an-introduction-to-stdarray/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/pointers-to-pointers/" rel="prev"><span>10.15 — Pointers to pointers and dynamic multidimensional arrays</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdvector/" rel="next"><span>10.17 — An introduction to std::vector</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="359"><span class="wpdtc" title="359">359</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="COr3m-yZ-PYCFdDSfAod4s4PWQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=334395a2-80f2-4bab-4476-3b9e80a11899&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/2127544180896686&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdarray/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="COv3m-yZ-PYCFdDSfAod4s4PWQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=334395a2-80f2-4bab-4476-3b9e80a11899&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/3627970296863024&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdarray/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>