<main id="main" role="main" class="main"><article id="post-80" class="post-80 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">7.9 — For statements</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2007-06-25T18:48:46-07:00" itemprop="datePublished">June 25, 2007, 6:48 pm</time>
<time class="updated" datetime="2021-08-30T16:08:25-07:00" itemprop="dateModified">August 30, 2021</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CMvS-PmT-PYCFQWqvQod-1QDRA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>By far, the most utilized loop statement in C++ is the <code>for statement</code>. The <span class="cpp-definition">for statement</span> (also called a <span class="cpp-definition">for loop</span>) is preferred when we have an obvious loop variable because it lets us easily and concisely define, initialize, test, and change the value of loop variables.</p><p>As of C++11, there are two different kinds of <code>for loops</code>. We’ll cover the classic <code>for statement</code> in this lesson, and the newer <code>range-based for statement</code> in a future lesson (<a href="https://www.learncpp.com/cpp-tutorial/for-each-loops/">10.13 -- For-each loops</a>) once we’ve covered some other prerequisite topics, such as arrays and iterators.</p><p style="clear:both"></p><p>The <code>for statement</code> looks pretty simple in abstract:</p><pre>for (init-statement; condition; end-expression)
   statement
</pre><p>The easiest way to initially understand how a <code>for statement</code> works is to convert it into an equivalent <code>while statement</code>:</p><pre>{ // note the block here
    init-statement; // used to define variables used in the loop
    while (condition)
    {
        statement; 
        end-expression; // used to modify the loop variable prior to reassessment of the condition
    }
} // variables defined inside the loop go out of scope here
</pre><p class="cpp-section cpp-topline" style="clear:both">Evaluation of for statements</p><p>A <code>for statement</code> is evaluated in 3 parts:</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>First, the init-statement is executed. This only happens once when the loop is initiated. The init-statement is typically used for variable definition and initialization. These variables have “loop scope”, which really just is a form of block scope where these variables exist from the point of definition through the end of the loop statement. In our while-loop equivalent, you can see that the init-statement is inside a block that contains the loop, so the variables defined in the init-statement go out of scope when the block containing the loop ends.</p><p>Second, for each loop iteration, the condition is evaluated. If this evaluates to true, the statement is executed. If this evaluates to false, the loop terminates and execution continues with the next statement beyond the loop.</p><p>Finally, after the statement is executed, the end-expression is evaluated. Typically, this expression is used to increment or decrement the loop variables defined in the init-statement. After the end-expression has been evaluated, execution returns to the second step (and the condition is evaluated again).</p><p>Let’s take a look at a sample <em>for loop</em> and discuss how it works:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-3-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-1-close">(</span><span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-2-close">{</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-2-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-1-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-3-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>First, we declare a loop variable named <code>count</code>, and initialize it with the value <code>1</code>.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><p>Second, <code>count &lt;= 10</code> is evaluated, and since count is <code>1</code>, this evaluates to <code>true</code>. Consequently, the statement executes, which prints <code>1</code> and a space.</p><p>Finally, <code>++count</code> is evaluated, which increments <code>count</code> to <code>2</code>. Then the loop goes back to the second step.</p><p>Now, <code>count &lt;= 10</code> is evaluated again. Since <code>count</code> has value <code>2</code>, this evaluates <code>true</code>, so the loop iterates again. The statement prints <code>2</code> and a space, and count is incremented to <code>3</code>. The loop continues to iterate until eventually <code>count</code> is incremented to <code>11</code>, at which point <code>count &lt;= 10</code> evaluates to <code>false</code>, and the loop exits.</p><p>Consequently, this program prints the result:</p><pre>1 2 3 4 5 6 7 8 9 10
</pre><p>For the sake of example, let’s convert the above <code>for loop</code> into an equivalent <code>while loop</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-4-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-4-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-9-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-8-close">{</span> <span class="token comment">// the block here ensures block scope for count</span>
        <span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-6-close">{</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-6-open">}</span><span class="token punctuation">;</span> <span class="token comment">// our init-statement</span>
        <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-5-close">(</span>count <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-5-open">)</span> <span class="token comment">// our condition</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-7-close">{</span>
            std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span> <span class="token comment">// our statement</span>
            <span class="token operator">++</span>count<span class="token punctuation">;</span> <span class="token comment">// our end-expression</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-7-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-8-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-9-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>That doesn’t look so bad, does it? Note that the outer braces are necessary here, because <code>count</code> goes out of scope when the loop ends.</p><p><code>For loops</code> can be hard for new programmers to read -- however, experienced programmers love them because they are a very compact way to do loops with a counter, with all of the necessary information about the loop variables, loop conditions, and loop count modifiers are presented up front. This helps reduce errors.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p class="cpp-section cpp-topline" style="clear:both">More for loop examples</p><p>Here’s an example of a function that uses a <code>for loop</code> to calculate integer exponents:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// returns the value base ^ exponent -- watch out for overflow!</span>
<span class="token keyword keyword-int">int</span> <span class="token function">pow</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-10-close">(</span><span class="token keyword keyword-int">int</span> base<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> exponent<span class="token punctuation brace-round brace-close brace-level-1" id="pair-10-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-14-close">{</span>
    <span class="token keyword keyword-int">int</span> total<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-12-close">{</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-12-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-11-close">(</span><span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-13-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-13-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> exponent<span class="token punctuation">;</span> <span class="token operator">++</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-11-open">)</span>
        total <span class="token operator">*=</span> base<span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-14-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This function returns the value base^exponent (base to the exponent power).</p><p>This is a straightforward incrementing <code>for loop</code>, with <code>count</code> looping from <code>0</code> up to (but excluding) <code>exponent</code>.</p><p>If exponent is 0, the <code>for loop</code> will execute 0 times, and the function will return 1.<br>If exponent is 1, the <code>for loop</code> will execute 1 time, and the function will return 1 * base.<br>If exponent is 2, the <code>for loop</code> will execute 2 times, and the function will return 1 * base * base.</p><p>Although most <code>for loops</code> increment the loop variable by 1, we can decrement it as well:</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-15-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-15-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-18-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-16-close">(</span><span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-17-close">{</span> <span class="token number">9</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-17-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-16-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-18-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints the result:</p><pre>9 8 7 6 5 4 3 2 1 0
</pre><p>Alternately, we can change the value of our loop variable by more than 1 with each iteration:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-19-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-19-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-22-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-20-close">(</span><span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-21-close">{</span> <span class="token number">9</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-21-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-20-open">)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-22-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints the result:</p><pre>9 7 5 3 1
</pre><p class="cpp-section cpp-topline" style="clear:both">Off-by-one errors</p><p>One of the biggest problems that new programmers have with <code>for loops</code> (and other loops that utilize counters) are <code>off-by-one errors</code>. <span class="cpp-definition">Off-by-one errors</span> occur when the loop iterates one too many or one too few times to produce the desired result.</p><p>Here’s an example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-23-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-23-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-27-close">{</span>
    <span class="token comment">// oops, we used operator&lt; instead of operator&lt;=</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-24-close">(</span><span class="token keyword keyword-unsigned">unsigned</span> <span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-25-close">{</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-25-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token operator">++</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-24-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-26-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-26-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-27-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This program is supposed to print <code>1 2 3 4 5</code>, but it only prints <code>1 2 3 4</code> because we used the wrong relational operator.</p><p>Although the most common cause for these errors is using the wrong relational operator, they can sometimes occur by using pre-increment or pre-decrement instead of post-increment or post-decrement, or vice-versa.</p><p class="cpp-section cpp-topline" style="clear:both">Omitted expressions</p><p>It is possible to write <em>for loops</em> that omit any or all of the statements or expressions. For example, in the following example, we’ll omit the init-statement and end-expression, leaving only the condition:</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-28-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-28-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-32-close">{</span>
    <span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-30-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-30-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-29-close">(</span> <span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token punctuation brace-round brace-close brace-level-2" id="pair-29-open">)</span> <span class="token comment">// no init-statement or end-expression</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-31-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
        <span class="token operator">++</span>count<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-31-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-32-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This <em>for loop</em> produces the result:</p><pre>0 1 2 3 4 5 6 7 8 9
</pre><p>Rather than having the <em>for loop</em> do the initialization and incrementing, we’ve done it manually. We have done so purely for academic purposes in this example, but there are cases where not declaring a loop variable (because you already have one) or not incrementing it in the end-expression (because you’re incrementing it some other way) is desired.</p><p>Although you do not see it very often, it is worth noting that the following example produces an infinite loop:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-33-close">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-33-open">)</span>
    statement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The above example is equivalent to:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-34-close">(</span><span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-34-open">)</span>
    statement<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This might be a little unexpected, as you’d probably expect an omitted condition-expression to be treated as <code>false</code>. However, the C++ standard explicitly (and inconsistently) defines that an omitted condition-expression in a for loop should be treated as <code>true</code>.</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0')};</script></span></span></div></div><p>We recommend avoiding this form of the for loop altogether and using <code>while(true)</code> instead.</p><p class="cpp-section cpp-topline" style="clear:both">For loops with multiple counters</p><p>Although <code>for loops</code> typically iterate over only one variable, sometimes <code>for loops</code> need to work with multiple variables. To assist with this, the programmer can define multiple variables in the init-statement, and can make use of the comma operator to change the value of multiple variables in the end-expression:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-35-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-35-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-39-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-36-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-37-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-37-open">}</span><span class="token punctuation">,</span> y<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-38-close">{</span> <span class="token number">9</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-38-open">}</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>x<span class="token punctuation">,</span> <span class="token operator">--</span>y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-36-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-39-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This loop defines and initializes two new variables: <code>x</code> and <code>y</code>. It iterates <code>x</code> over the range <code>0</code> to <code>9</code>, and after each iteration <code>x</code> is incremented and <code>y</code> is decremented.</p><p>This program produces the result:</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><pre>0 9
1 8
2 7
3 6
4 5
5 4
6 3
7 2
8 1
9 0
</pre><p>This is about the only place in C++ where defining multiple variables in the same statement, and use of the comma operator is considered an acceptable practice.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Defining multiple variables (in the init-statement) and using the comma operator (in the end-expression) is acceptable inside a <code>for statement</code>.</p></div><p class="cpp-section cpp-topline" style="clear:both">Nested for loops</p><p>Like other types of loops, <code>for loops</code> can be nested inside other loops. In the following example, we’re nesting a <code>for loop</code> inside another <code>for loop</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-40-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-40-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-46-close">{</span>
	<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-41-close">(</span><span class="token keyword keyword-char">char</span> c<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-43-close">{</span> <span class="token string">'a'</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-43-open">}</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> <span class="token string">'e'</span><span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation brace-round brace-close brace-level-2" id="pair-41-open">)</span> <span class="token comment">// outer loop on letters</span>
	<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-45-close">{</span>
		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span> <span class="token comment">// print our letter first</span>

		<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-42-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-44-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-44-open">}</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation brace-round brace-close brace-level-3" id="pair-42-open">)</span> <span class="token comment">// inner loop on all numbers</span>
			std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span>

		std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
	<span class="token punctuation brace-curly brace-close brace-level-2" id="pair-45-open">}</span>

	<span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-46-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>For each iteration of the outer loop, the inner loop runs in its entirety. Consequently, the output is:</p><pre>a012
b012
c012
d012
e012
</pre><p>Here’s some more detail on what’s happening here. The outer loop runs first, and char <code>c</code> is initialized to <code>'a'</code>. Then <code>c &lt;= 'e'</code> is evaluated, which is <code>true</code>, so the loop body executes. Since <code>c</code> is set to <code>'a'</code>, this first prints <code>a</code>. Next the inner loop executes entirely (which prints <code>0</code>, <code>1</code>, and <code>2</code>). Then a newline is printed. Now the outer loop body is finished, so the outer loop returns to the top, <code>c</code> is incremented to <code>'b'</code>, and the loop condition is re-evaluated. Since the loop condition is still <code>true</code> the next iteration of the outer loop begins. This prints <code>b012\n</code>. And so on.</p><p class="cpp-section cpp-topline" style="clear:both">Conclusion</p><p><code>For statements</code> are the most commonly used loop in the C++ language. Even though its syntax is typically a bit confusing to new programmers, you will see <code>for loops</code> so often that you will understand them in no time at all!</p><p><code>For statements</code> excel when you have a counter variable. If you do not have a counter, a <code>while statement</code> is probably a better choice.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Prefer <code>for loops</code> over <code>while loops</code> when there is an obvious loop variable.<br>Prefer <code>while loops</code> over <code>for loops</code> when there is no obvious loop variable.</p></div><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>Write a <code>for loop</code> that prints every even number from 0 to 20.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-47-close">(</span><span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-48-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-48-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> <span class="token number">20</span><span class="token punctuation">;</span> count <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-47-open">)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #2</p><p>Write a function named sumTo() that takes an integer parameter named value, and returns the sum of all the numbers from 1 to value.</p><p>For example, sumTo(5) should return 15, which is 1 + 2 + 3 + 4 + 5.</p><p>Hint: Use a non-loop variable to accumulate the sum as you iterate from 1 to the input value, much like the pow() example above uses the total variable to accumulate the return value each iteration.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">sumTo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-49-close">(</span><span class="token keyword keyword-int">int</span> value<span class="token punctuation brace-round brace-close brace-level-1" id="pair-49-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-53-close">{</span>
    <span class="token keyword keyword-int">int</span> total<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-51-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-51-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-50-close">(</span><span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-52-close">{</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-52-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&lt;=</span> value<span class="token punctuation">;</span> <span class="token operator">++</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-50-open">)</span>
        total <span class="token operator">+=</span> count<span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> total<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-53-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #3</p><p>What’s wrong with the following for loop?</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// Print all numbers from 9 to 0</span>
<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-54-close">(</span><span class="token keyword keyword-unsigned">unsigned</span> <span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-55-close">{</span> <span class="token number">9</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-55-open">}</span><span class="token punctuation">;</span> count <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>count<span class="token punctuation brace-round brace-close brace-level-1" id="pair-54-open">)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_2'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_2" style="display:none"><p>This <code>for loop</code> executes as long as <code>count &gt;= 0</code>. In other words, it runs until <code>count</code> is negative. However, because <code>count</code> is unsigned, <code>count</code> can never go negative. Consequently, this loop will run for-ever (ha ha)! Generally, it’s a good idea to avoid looping on unsigned variables unless necessary.</p></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/break-and-continue/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">7.10</span>Break and continue</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/do-while-statements/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">7.8</span>Do while statements</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/for-statements/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/do-while-statements/" rel="prev"><span>7.8 — Do while statements</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/break-and-continue/" rel="next"><span>7.10 — Break and continue</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="333"><span class="wpdtc" title="333">333</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CJKu9PmT-PYCFULOvQodMroJTQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=b62a83c2-7eed-4826-7511-6a9a3e2f7e6e&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/4666745900789771&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/for-statements/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CJOu9PmT-PYCFULOvQodMroJTQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=b62a83c2-7eed-4826-7511-6a9a3e2f7e6e&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/6900740158808587&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/for-statements/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>