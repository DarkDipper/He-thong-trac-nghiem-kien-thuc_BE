<main id="main" role="main" class="main"><article id="post-193" class="post-193 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">23.5 — Stream states and input validation</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2008-03-25T15:21:25-07:00" itemprop="datePublished">March 25, 2008, 3:21 pm</time>
<time class="updated" datetime="2021-11-08T10:24:11-08:00" itemprop="dateModified">November 8, 2021</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="300" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:300px" class="ezoic-ad" data-google-query-id="CInhgsye-PYCFUgTvQodVi4Cmw"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span></span></div></div><p class="cpp-section">Stream states</p><p>The ios_base class contains several state flags that are used to signal various conditions that may occur when using streams:</p><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><th>Flag</th><th>Meaning</th></tr><tr><td>goodbit</td><td>Everything is okay</td></tr><tr><td>badbit</td><td>Some kind of fatal error occurred (e.g. the program tried to read past the end of a file)</td></tr><tr><td>eofbit</td><td>The stream has reached the end of a file</td></tr><tr><td>failbit</td><td>A non-fatal error occurred (eg. the user entered letters when the program was expecting an integer)</td></tr></tbody></table></div><p>Although these flags live in ios_base, because ios is derived from ios_base and ios takes less typing than ios_base, they are generally accessed through ios (eg. as std::ios::failbit).</p><p>ios also provides a number of member functions in order to conveniently access these states:</p><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><th>Member function</th><th>Meaning</th></tr><tr><td>good()</td><td>Returns true if the goodbit is set (the stream is ok)</td></tr><tr><td>bad()</td><td>Returns true if the badbit is set (a fatal error occurred)</td></tr><tr><td>eof()</td><td>Returns true if the eofbit is set (the stream is at the end of a file)</td></tr><tr><td>fail()</td><td>Returns true if the failbit is set (a non-fatal error occurred)</td></tr><tr><td>clear()</td><td>Clears all flags and restores the stream to the goodbit state</td></tr><tr><td>clear(state)</td><td>Clears all flags and sets the state flag passed in</td></tr><tr><td>rdstate()</td><td>Returns the currently set flags</td></tr><tr><td>setstate(state)</td><td>Sets the state flag passed in</td></tr></tbody></table></div><p>The most commonly dealt with bit is the failbit, which is set when the user enters invalid input. For example, consider the following program:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter your age: "</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> age<span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that this program is expecting the user to enter an integer. However, if the user enters non-numeric data, such as “Alex”, cin will be unable to extract anything to age, and the failbit will be set.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="250" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span></div></div><p>If an error occurs and a stream is set to anything other than goodbit, further stream operations on that stream will be ignored. This condition can be cleared by calling the clear() function.</p><p class="cpp-section cpp-topline" style="clear:both">Input validation</p><p><strong>Input validation</strong> is the process of checking whether the user input meets some set of criteria. Input validation can generally be broken down into two types: string and numeric.</p><p>With string validation, we accept all user input as a string, and then accept or reject that string depending on whether it is formatted appropriately. For example, if we ask the user to enter a telephone number, we may want to ensure the data they enter has ten digits. In most languages (especially scripting languages like Perl and PHP), this is done via regular expressions. The C++ standard library has a <a href="https://en.cppreference.com/w/cpp/regex">regular expression library</a> as well. Regular expressions are slow compared to manual string validation, they should only be used if performance (compile-time and run-time) is of no concern or manual validation is too cumbersome.</p><p>With numerical validation, we are typically concerned with making sure the number the user enters is within a particular range (eg. between 0 and 20). However, unlike with string validation, it’s possible for the user to enter things that aren’t numbers at all -- and we need to handle these cases too.</p><p>To help us out, C++ provides a number of useful functions that we can use to determine whether specific characters are numbers or letters. The following functions live in the cctype header:</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><th>Function</th><th>Meaning</th></tr><tr><td>std::isalnum(int)</td><td>Returns non-zero if the parameter is a letter or a digit</td></tr><tr><td>std::isalpha(int)</td><td>Returns non-zero if the parameter is a letter</td></tr><tr><td>std::iscntrl(int)</td><td>Returns non-zero if the parameter is a control character</td></tr><tr><td>std::isdigit(int)</td><td>Returns non-zero if the parameter is a digit</td></tr><tr><td>std::isgraph(int)</td><td>Returns non-zero if the parameter is printable character that is not whitespace</td></tr><tr><td>std::isprint(int)</td><td>Returns non-zero if the parameter is printable character (including whitespace)</td></tr><tr><td>std::ispunct(int)</td><td>Returns non-zero if the parameter is neither alphanumeric nor whitespace</td></tr><tr><td>std::isspace(int)</td><td>Returns non-zero if the parameter is whitespace</td></tr><tr><td>std::isxdigit(int)</td><td>Returns non-zero if the parameter is a hexadecimal digit (0-9, a-f, A-F)</td></tr></tbody></table></div><p class="cpp-section cpp-topline" style="clear:both">String validation</p><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">Author’s note</p><p>From here on out, we make use of features that aren’t (yet) covered in the tutorials. If you’ve got a good grip of C++, you might be able to understand what these features do based on their names and the way they’re used. We advise you to look up the new functions and types in a reference to get a deeper understanding of what they do how what else they can be used for.</p></div><p>Let’s do a simple case of string validation by asking the user to enter their name. Our validation criteria will be that the user enters only alphabetic characters or spaces. If anything else is encountered, the input will be rejected.</p><p>When it comes to variable length inputs, the best way to validate strings (besides using a regular expression library) is to step through each character of the string and ensure it meets the validation criteria. That’s exactly what we’ll do here, or better, that’s what <code>std::all_of</code> does for us.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::all_of</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype&gt;</span> <span class="token comment">// std::isalpha, std::isspace</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">isValidName</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span>std<span class="token double-colon punctuation">::</span>string_view name<span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-12-close">{</span>
  <span class="token keyword keyword-return">return</span> std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">all_of</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-5-close">(</span>name<span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-10-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-10-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-1-close">(</span><span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-round brace-close brace-level-3" id="pair-1-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-11-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-4-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">isalpha</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-2-close">(</span>ch<span class="token punctuation brace-round brace-close brace-level-5" id="pair-2-open">)</span> <span class="token operator">||</span> std<span class="token double-colon punctuation">::</span><span class="token function">isspace</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-3-close">(</span>ch<span class="token punctuation brace-round brace-close brace-level-5" id="pair-3-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-4-open">)</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-11-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-5-open">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Before C++20, without ranges</span>
  <span class="token comment">// return std::all_of(name.begin(), name.end(), [](char ch) {</span>
  <span class="token comment">//    return (std::isalpha(ch) || std::isspace(ch));</span>
  <span class="token comment">// });</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-12-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-6-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-6-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-15-close">{</span>
  std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-13-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-13-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-do">do</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-14-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter your name: "</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-7-close">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">,</span> name<span class="token punctuation brace-round brace-close brace-level-3" id="pair-7-open">)</span><span class="token punctuation">;</span> <span class="token comment">// get the entire line, including spaces</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-14-open">}</span> <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-9-close">(</span><span class="token operator">!</span><span class="token function">isValidName</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-8-close">(</span>name<span class="token punctuation brace-round brace-close brace-level-3" id="pair-8-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-9-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello "</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">"!\n"</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-15-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that this code isn’t perfect: the user could say their name was “asf w jweo s di we ao” or some other bit of gibberish, or even worse, just a bunch of spaces. We could address this somewhat by refining our validation criteria to only accept strings that contain at least one character and at most one space.</p><p>Now let’s take a look at another example where we are going to ask the user to enter their phone number. Unlike a user’s name, which is variable-length and where the validation criteria are the same for every character, a phone number is a fixed length but the validation criteria differ depending on the position of the character. Consequently, we are going to take a different approach to validating our phone number input. In this case, we’re going to write a function that will check the user’s input against a predetermined template to see whether it matches. The template will work as follows:</p><p>A # will match any digit in the user input.<br>A @ will match any alphabetic character in the user input.<br>A _ will match any whitespace.<br>A ? will match anything.<br>Otherwise, the characters in the user input and the template must match exactly.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="250" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p>So, if we ask the function to match the template “(###) ###-####”, that means we expect the user to enter a ‘(‘ character, three numbers, a ‘)’ character, a space, three numbers, a dash, and four more numbers. If any of these things doesn’t match, the input will be rejected.</p><p>Here is the code:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::equal</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cctype&gt;</span> <span class="token comment">// std::isdigit, std::isspace, std::isalpha</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ranges&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">inputMatches</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-16-close">(</span>std<span class="token double-colon punctuation">::</span>string_view input<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>string_view pattern<span class="token punctuation brace-round brace-close brace-level-1" id="pair-16-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-48-close">{</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-19-close">(</span>input<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-17-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-17-open">)</span> <span class="token operator">!=</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-18-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-18-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-19-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-37-close">{</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-37-open">}</span>

    <span class="token comment">// We have to use a C-style function pointer, because std::isdigit and friends</span>
    <span class="token comment">// have overloads and would be ambiguous otherwise.</span>
    <span class="token keyword keyword-static">static</span> <span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>map<span class="token operator">&lt;</span><span class="token keyword keyword-char">char</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-20-close">(</span><span class="token operator">*</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-20-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-21-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-21-open">)</span><span class="token operator">&gt;</span> validators<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-43-close">{</span>
      <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-38-close">{</span> <span class="token string">'#'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>std<span class="token double-colon punctuation">::</span>isdigit <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-38-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-39-close">{</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>std<span class="token double-colon punctuation">::</span>isspace <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-39-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-40-close">{</span> <span class="token string">'@'</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>std<span class="token double-colon punctuation">::</span>isalpha <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-40-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-42-close">{</span> <span class="token string">'?'</span><span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-4" id="pair-35-close">[</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-35-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-22-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-22-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-41-close">{</span> <span class="token keyword keyword-return">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-41-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-42-open">}</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-43-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Before C++20, use</span>
    <span class="token comment">// return std::equal(input.begin(), input.end(), pattern.begin(), [](char ch, char mask) -&gt; bool {</span>
    <span class="token comment">// ...</span>

    <span class="token keyword keyword-return">return</span> std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">equal</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-30-close">(</span>input<span class="token punctuation">,</span> pattern<span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-36-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-36-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-23-close">(</span><span class="token keyword keyword-char">char</span> ch<span class="token punctuation">,</span> <span class="token keyword keyword-char">char</span> mask<span class="token punctuation brace-round brace-close brace-level-3" id="pair-23-open">)</span> <span class="token operator">-&gt;</span> <span class="token keyword keyword-bool">bool</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-47-close">{</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-26-close">(</span><span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-5" id="pair-44-close">{</span> validators<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-6" id="pair-24-close">(</span>mask<span class="token punctuation brace-round brace-close brace-level-6" id="pair-24-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-5" id="pair-44-open">}</span><span class="token punctuation">;</span> found <span class="token operator">!=</span> validators<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-25-close">(</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-25-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-26-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-45-close">{</span>
            <span class="token comment">// The pattern's current element was found in the validators. Call the</span>
            <span class="token comment">// corresponding function.</span>
            <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-27-close">(</span><span class="token operator">*</span>found<span class="token operator">-&gt;</span>second<span class="token punctuation brace-round brace-close brace-level-5" id="pair-27-open">)</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-28-close">(</span>ch<span class="token punctuation brace-round brace-close brace-level-5" id="pair-28-open">)</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-45-open">}</span>
        <span class="token keyword keyword-else">else</span>
        <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-46-close">{</span>
            <span class="token comment">// The pattern's current element was not found in the validators. The</span>
            <span class="token comment">// characters have to be an exact match.</span>
            <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-29-close">(</span>ch <span class="token operator">==</span> mask<span class="token punctuation brace-round brace-close brace-level-5" id="pair-29-open">)</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-46-open">}</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-47-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-30-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-48-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-31-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-31-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-51-close">{</span>
    std<span class="token double-colon punctuation">::</span>string phoneNumber<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-49-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-49-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-do">do</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-50-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter a phone number (###) ###-####: "</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-32-close">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">,</span> phoneNumber<span class="token punctuation brace-round brace-close brace-level-3" id="pair-32-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-50-open">}</span> <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-34-close">(</span><span class="token operator">!</span><span class="token function">inputMatches</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-33-close">(</span>phoneNumber<span class="token punctuation">,</span> <span class="token string">"(###) ###-####"</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-33-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-34-open">)</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You entered: "</span> <span class="token operator">&lt;&lt;</span> phoneNumber <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-51-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Using this function, we can force the user to match our specific format exactly. However, this function is still subject to several constraints: if #, @, _, and ? are valid characters in the user input, this function won’t work, because those symbols have been given special meanings. Also, unlike with regular expressions, there is no template symbol that means “a variable number of characters can be entered”. Thus, such a template could not be used to ensure the user enters two words separated by a whitespace, because it can not handle the fact that the words are of variable lengths. For such problems, the non-template approach is generally more appropriate.</p><p class="cpp-section cpp-topline" style="clear:both">Numeric validation</p><p>When dealing with numeric input, the obvious way to proceed is to use the extraction operator to extract input to a numeric type. By checking the failbit, we can then tell whether the user entered a number or not.</p><p>Let’s try this approach:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-52-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-52-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-63-close">{</span>
    <span class="token keyword keyword-int">int</span> age<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-60-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-60-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-53-close">(</span><span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-53-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-62-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter your age: "</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> age<span class="token punctuation">;</span>

        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-55-close">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-54-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-54-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-55-open">)</span> <span class="token comment">// no extraction took place</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-61-close">{</span>
            std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-56-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-56-open">)</span><span class="token punctuation">;</span> <span class="token comment">// reset the state bits back to goodbit so we can use ignore()</span>
            std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-58-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>streamsize<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-57-close">(</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-57-open">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-58-open">)</span><span class="token punctuation">;</span> <span class="token comment">// clear out the bad input from the stream</span>
            <span class="token keyword keyword-continue">continue</span><span class="token punctuation">;</span> <span class="token comment">// try again</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-61-open">}</span>

        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-59-close">(</span>age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-59-open">)</span> <span class="token comment">// make sure age is positive</span>
            <span class="token keyword keyword-continue">continue</span><span class="token punctuation">;</span>

        <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-62-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You entered: "</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-63-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>If the user enters a number, cin.fail() will be false, and we will hit the break statement, exiting the loop. If the user enters input starting with a letter, cin.fail() will be true, and we will go into the conditional.</p><p>However, there’s one more case we haven’t tested for, and that’s when the user enters a string that starts with numbers but then contains letters (eg. “34abcd56”). In this case, the starting numbers (34) will be extracted into age, the remainder of the string (“abcd56”) will be left in the input stream, and the failbit will NOT be set. This causes two potential problems:</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><ol start="1"><li>If you want this to be valid input, you now have garbage in your stream.</li><li>If you don’t want this to be valid input, it is not rejected (and you have garbage in your stream).</li></ol><p>Let’s fix the first problem. This is easy:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-64-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-64-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-77-close">{</span>
    <span class="token keyword keyword-int">int</span> age<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-74-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-74-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-65-close">(</span><span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-65-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-76-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter your age: "</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> age<span class="token punctuation">;</span>

        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-67-close">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-66-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-66-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-67-open">)</span> <span class="token comment">// no extraction took place</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-75-close">{</span>
            std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-68-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-68-open">)</span><span class="token punctuation">;</span> <span class="token comment">// reset the state bits back to goodbit so we can use ignore()</span>
            std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-70-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>streamsize<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-69-close">(</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-69-open">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-70-open">)</span><span class="token punctuation">;</span> <span class="token comment">// clear out the bad input from the stream</span>
            <span class="token keyword keyword-continue">continue</span><span class="token punctuation">;</span> <span class="token comment">// try again</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-75-open">}</span>

        std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-72-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>streamsize<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-71-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-71-open">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-72-open">)</span><span class="token punctuation">;</span> <span class="token comment">// clear out any additional input from the stream</span>

        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-73-close">(</span>age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-73-open">)</span> <span class="token comment">// make sure age is positive</span>
            <span class="token keyword keyword-continue">continue</span><span class="token punctuation">;</span>

      <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-76-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You entered: "</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-77-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>If you don’t want such input to be valid, we’ll have to do a little extra work. Fortunately, the previous solution gets us half way there. We can use the gcount() function to determine how many characters were ignored. If our input was valid, gcount() should return 1 (the newline character that was discarded). If it returns more than 1, the user entered something that wasn’t extracted properly, and we should ask them for new input. Here’s an example of this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;limits&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-78-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-78-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-95-close">{</span>
    <span class="token keyword keyword-int">int</span> age<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-90-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-90-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-79-close">(</span><span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-79-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-94-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter your age: "</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> age<span class="token punctuation">;</span>

        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-81-close">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-80-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-80-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-81-open">)</span> <span class="token comment">// no extraction took place</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-91-close">{</span>
            std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-82-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-82-open">)</span><span class="token punctuation">;</span> <span class="token comment">// reset the state bits back to goodbit so we can use ignore()</span>
            std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-84-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>streamsize<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-83-close">(</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-83-open">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-84-open">)</span><span class="token punctuation">;</span> <span class="token comment">// clear out the bad input from the stream</span>
            <span class="token keyword keyword-continue">continue</span><span class="token punctuation">;</span> <span class="token comment">// try again</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-91-open">}</span>

        std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">ignore</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-86-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token class-name">numeric_limits</span><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>streamsize<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-85-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-85-open">)</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-86-open">)</span><span class="token punctuation">;</span> <span class="token comment">// clear out any additional input from the stream</span>
        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-88-close">(</span>std<span class="token double-colon punctuation">::</span>cin<span class="token punctuation">.</span><span class="token function">gcount</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-87-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-87-open">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-88-open">)</span> <span class="token comment">// if we cleared out more than one additional character</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-92-close">{</span>
            <span class="token keyword keyword-continue">continue</span><span class="token punctuation">;</span> <span class="token comment">// we'll consider this input to be invalid</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-92-open">}</span>

        <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-89-close">(</span>age <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-89-open">)</span> <span class="token comment">// make sure age is positive</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-93-close">{</span>
            <span class="token keyword keyword-continue">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-93-open">}</span>

        <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-94-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You entered: "</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-95-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p class="cpp-section cpp-topline" style="clear:both">Numeric validation as a string</p><p>The above example was quite a bit of work simply to get a simple value! Another way to process numeric input is to read it in as a string, then try to convert it to a numeric type. The following program makes use of that methodology:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;charconv&gt;</span> <span class="token comment">// std::from_chars</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;optional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

std<span class="token double-colon punctuation">::</span>optional<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span> <span class="token function">extractAge</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-96-close">(</span>std<span class="token double-colon punctuation">::</span>string_view age<span class="token punctuation brace-round brace-close brace-level-1" id="pair-96-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-113-close">{</span>
  <span class="token keyword keyword-int">int</span> result<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-107-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-107-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-auto">auto</span> end<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-108-close">{</span> age<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-97-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-97-open">)</span> <span class="token operator">+</span> age<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-98-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-98-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-108-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Try to parse an int from age</span>
  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-101-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">from_chars</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-100-close">(</span>age<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-99-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-99-open">)</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> result<span class="token punctuation brace-round brace-close brace-level-3" id="pair-100-open">)</span><span class="token punctuation">.</span>ptr <span class="token operator">!=</span> end<span class="token punctuation brace-round brace-close brace-level-2" id="pair-101-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-110-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-109-close">{</span><span class="token punctuation brace-curly brace-close brace-level-3" id="pair-109-open">}</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-110-open">}</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-102-close">(</span>result <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-102-open">)</span> <span class="token comment">// make sure age is positive</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-112-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-111-close">{</span><span class="token punctuation brace-curly brace-close brace-level-3" id="pair-111-open">}</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-112-open">}</span>

  <span class="token keyword keyword-return">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-113-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-103-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-103-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-119-close">{</span>
  <span class="token keyword keyword-int">int</span> age<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-114-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-114-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-104-close">(</span><span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-104-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-118-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter your age: "</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>string strAge<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-115-close">{</span><span class="token punctuation brace-curly brace-close brace-level-3" id="pair-115-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> strAge<span class="token punctuation">;</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-106-close">(</span><span class="token keyword keyword-auto">auto</span> extracted<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-116-close">{</span> <span class="token function">extractAge</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-105-close">(</span>strAge<span class="token punctuation brace-round brace-close brace-level-5" id="pair-105-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-116-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-106-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-117-close">{</span>
      age <span class="token operator">=</span> <span class="token operator">*</span>extracted<span class="token punctuation">;</span>
      <span class="token keyword keyword-break">break</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-117-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-118-open">}</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You entered: "</span> <span class="token operator">&lt;&lt;</span> age <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-119-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Whether this approach is more or less work than straight numeric extraction depends on your validation parameters and restrictions.</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="300" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:90px;min-width:728px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><p>As you can see, doing input validation in C++ is a lot of work. Fortunately, many such tasks (eg. doing numeric validation as a string) can be easily turned into functions that can be reused in a wide variety of situations.</p><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/basic-file-io/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">23.6</span>Basic file I/O</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/stream-classes-for-strings/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">23.4</span>Stream classes for strings</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/stream-states-and-input-validation/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/stream-classes-for-strings/" rel="prev"><span>23.4 — Stream classes for strings</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/wordpress/tiga-and-wordpress-25/" rel="next"><span>Tiga and WordPress 2.5</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="65"><span class="wpdtc" title="65">65</span> Comments</div><div class="wpdiscuz-user-settings wpd-info wpd-not-clicked" wpd-tooltip="My content and settings" wpd-tooltip-position="right"><i class="fas fa-user-cog"></i></div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CIrhgsye-PYCFUgTvQodVi4Cmw"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=9a5e795f-7119-403c-72ef-c24fdda3f7ca&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/8655420806877175&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/stream-states-and-input-validation/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CIvhgsye-PYCFUgTvQodVi4Cmw"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=9a5e795f-7119-403c-72ef-c24fdda3f7ca&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/5529805612843221&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/stream-states-and-input-validation/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>