<main id="main" role="main" class="main"><article id="post-48" class="post-48 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">4.11 — Chars</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2007-06-09T19:07:05-07:00" itemprop="datePublished">June 9, 2007, 7:07 pm</time>
<time class="updated" datetime="2021-12-29T13:35:38-08:00" itemprop="dateModified">December 29, 2021</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CJ7srMuf9_YCFeuJgwgd9ywMhQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>To this point, the fundamental data types we’ve looked at have been used to hold numbers (integers and floating point) or true/false values (booleans). But what if we want to store letters or punctuation?</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-1-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Would you like a burrito? (y/n)"</span><span class="token punctuation">;</span>

    <span class="token comment">// We want the user to enter a 'y' or 'n' character</span>
    <span class="token comment">// How do we do this?</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-1-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The <span class="cpp-definition">char</span> data type was designed to hold a <code>character</code>. A <span class="cpp-definition">character</span> can be a single letter, number, symbol, or whitespace.</p><p>The char data type is an integral type, meaning the underlying value is stored as an integer. Similar to how a Boolean value <code>0</code> is interpreted as <code>false</code> and non-zero is interpreted as <code>true</code>, the integer stored by a <code>char</code> variable are intepreted as an <code>ASCII character</code>.</p><p><span class="cpp-definition">ASCII</span> stands for American Standard Code for Information Interchange, and it defines a particular way to represent English characters (plus a few other symbols) as numbers between 0 and 127 (called an <span class="cpp-definition">ASCII code</span> or <span class="cpp-definition">code point</span>). For example, ASCII code 97 is interpreted as the character ‘a’.</p><p>Character literals are always placed between single quotes (e.g. ‘g’, ‘1’, ‘ ‘).</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p style="clear:both">Here’s a full table of ASCII characters:</p><p></p><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><th>Code</th><th>Symbol</th><th>Code</th><th>Symbol</th><th>Code</th><th>Symbol</th><th>Code</th><th>Symbol</th></tr><tr><td style="background-color:#ccc">0</td><td>NUL (null)</td><td style="background-color:#ccc">32</td><td>(space)</td><td style="background-color:#ccc">64</td><td>@</td><td style="background-color:#ccc">96</td><td>`</td></tr><tr><td style="background-color:#ccc">1</td><td>SOH (start of header)</td><td style="background-color:#ccc">33</td><td>!</td><td style="background-color:#ccc">65</td><td>A</td><td style="background-color:#ccc">97</td><td>a</td></tr><tr><td style="background-color:#ccc">2</td><td>STX (start of text)</td><td style="background-color:#ccc">34</td><td>”</td><td style="background-color:#ccc">66</td><td>B</td><td style="background-color:#ccc">98</td><td>b</td></tr><tr><td style="background-color:#ccc">3</td><td>ETX (end of text)</td><td style="background-color:#ccc">35</td><td>#</td><td style="background-color:#ccc">67</td><td>C</td><td style="background-color:#ccc">99</td><td>c</td></tr><tr><td style="background-color:#ccc">4</td><td>EOT (end of transmission)</td><td style="background-color:#ccc">36</td><td>$</td><td style="background-color:#ccc">68</td><td>D</td><td style="background-color:#ccc">100</td><td>d</td></tr><tr><td style="background-color:#ccc">5</td><td>ENQ (enquiry)</td><td style="background-color:#ccc">37</td><td>%</td><td style="background-color:#ccc">69</td><td>E</td><td style="background-color:#ccc">101</td><td>e</td></tr><tr><td style="background-color:#ccc">6</td><td>ACK (acknowledge)</td><td style="background-color:#ccc">38</td><td>&amp;</td><td style="background-color:#ccc">70</td><td>F</td><td style="background-color:#ccc">102</td><td>f</td></tr><tr><td style="background-color:#ccc">7</td><td>BEL (bell)</td><td style="background-color:#ccc">39</td><td>’</td><td style="background-color:#ccc">71</td><td>G</td><td style="background-color:#ccc">103</td><td>g</td></tr><tr><td style="background-color:#ccc">8</td><td>BS (backspace)</td><td style="background-color:#ccc">40</td><td>(</td><td style="background-color:#ccc">72</td><td>H</td><td style="background-color:#ccc">104</td><td>h</td></tr><tr><td style="background-color:#ccc">9</td><td>HT (horizontal tab)</td><td style="background-color:#ccc">41</td><td>)</td><td style="background-color:#ccc">73</td><td>I</td><td style="background-color:#ccc">105</td><td>i</td></tr><tr><td style="background-color:#ccc">10</td><td>LF (line feed/new line)</td><td style="background-color:#ccc">42</td><td>*</td><td style="background-color:#ccc">74</td><td>J</td><td style="background-color:#ccc">106</td><td>j</td></tr><tr><td style="background-color:#ccc">11</td><td>VT (vertical tab)</td><td style="background-color:#ccc">43</td><td>+</td><td style="background-color:#ccc">75</td><td>K</td><td style="background-color:#ccc">107</td><td>k</td></tr><tr><td style="background-color:#ccc">12</td><td>FF (form feed / new page)</td><td style="background-color:#ccc">44</td><td>,</td><td style="background-color:#ccc">76</td><td>L</td><td style="background-color:#ccc">108</td><td>l</td></tr><tr><td style="background-color:#ccc">13</td><td>CR (carriage return)</td><td style="background-color:#ccc">45</td><td>-</td><td style="background-color:#ccc">77</td><td>M</td><td style="background-color:#ccc">109</td><td>m</td></tr><tr><td style="background-color:#ccc">14</td><td>SO (shift out)</td><td style="background-color:#ccc">46</td><td>.</td><td style="background-color:#ccc">78</td><td>N</td><td style="background-color:#ccc">110</td><td>n</td></tr><tr><td style="background-color:#ccc">15</td><td>SI (shift in)</td><td style="background-color:#ccc">47</td><td>/</td><td style="background-color:#ccc">79</td><td>O</td><td style="background-color:#ccc">111</td><td>o</td></tr><tr><td style="background-color:#ccc">16</td><td>DLE (data link escape)</td><td style="background-color:#ccc">48</td><td>0</td><td style="background-color:#ccc">80</td><td>P</td><td style="background-color:#ccc">112</td><td>p</td></tr><tr><td style="background-color:#ccc">17</td><td>DC1 (data control 1)</td><td style="background-color:#ccc">49</td><td>1</td><td style="background-color:#ccc">81</td><td>Q</td><td style="background-color:#ccc">113</td><td>q</td></tr><tr><td style="background-color:#ccc">18</td><td>DC2 (data control 2)</td><td style="background-color:#ccc">50</td><td>2</td><td style="background-color:#ccc">82</td><td>R</td><td style="background-color:#ccc">114</td><td>r</td></tr><tr><td style="background-color:#ccc">19</td><td>DC3 (data control 3)</td><td style="background-color:#ccc">51</td><td>3</td><td style="background-color:#ccc">83</td><td>S</td><td style="background-color:#ccc">115</td><td>s</td></tr><tr><td style="background-color:#ccc">20</td><td>DC4 (data control 4)</td><td style="background-color:#ccc">52</td><td>4</td><td style="background-color:#ccc">84</td><td>T</td><td style="background-color:#ccc">116</td><td>t</td></tr><tr><td style="background-color:#ccc">21</td><td>NAK (negative acknowledge)</td><td style="background-color:#ccc">53</td><td>5</td><td style="background-color:#ccc">85</td><td>U</td><td style="background-color:#ccc">117</td><td>u</td></tr><tr><td style="background-color:#ccc">22</td><td>SYN (synchronous idle)</td><td style="background-color:#ccc">54</td><td>6</td><td style="background-color:#ccc">86</td><td>V</td><td style="background-color:#ccc">118</td><td>v</td></tr><tr><td style="background-color:#ccc">23</td><td>ETB (end of transmission block)</td><td style="background-color:#ccc">55</td><td>7</td><td style="background-color:#ccc">87</td><td>W</td><td style="background-color:#ccc">119</td><td>w</td></tr><tr><td style="background-color:#ccc">24</td><td>CAN (cancel)</td><td style="background-color:#ccc">56</td><td>8</td><td style="background-color:#ccc">88</td><td>X</td><td style="background-color:#ccc">120</td><td>x</td></tr><tr><td style="background-color:#ccc">25</td><td>EM (end of medium)</td><td style="background-color:#ccc">57</td><td>9</td><td style="background-color:#ccc">89</td><td>Y</td><td style="background-color:#ccc">121</td><td>y</td></tr><tr><td style="background-color:#ccc">26</td><td>SUB (substitute)</td><td style="background-color:#ccc">58</td><td>:</td><td style="background-color:#ccc">90</td><td>Z</td><td style="background-color:#ccc">122</td><td>z</td></tr><tr><td style="background-color:#ccc">27</td><td>ESC (escape)</td><td style="background-color:#ccc">59</td><td>;</td><td style="background-color:#ccc">91</td><td>[</td><td style="background-color:#ccc">123</td><td>{</td></tr><tr><td style="background-color:#ccc">28</td><td>FS (file separator)</td><td style="background-color:#ccc">60</td><td>&lt;</td><td style="background-color:#ccc">92</td><td>\</td><td style="background-color:#ccc">124</td><td>|</td></tr><tr><td style="background-color:#ccc">29</td><td>GS (group separator)</td><td style="background-color:#ccc">61</td><td>=</td><td style="background-color:#ccc">93</td><td>]</td><td style="background-color:#ccc">125</td><td>}</td></tr><tr><td style="background-color:#ccc">30</td><td>RS (record separator)</td><td style="background-color:#ccc">62</td><td>&gt;</td><td style="background-color:#ccc">94</td><td>^</td><td style="background-color:#ccc">126</td><td>~</td></tr><tr><td style="background-color:#ccc">31</td><td>US (unit separator)</td><td style="background-color:#ccc">63</td><td>?</td><td style="background-color:#ccc">95</td><td>_</td><td style="background-color:#ccc">127</td><td>DEL (delete)</td></tr></tbody></table></div><p>Codes 0-31 are called the unprintable chars, and they’re mostly used to do formatting and control printers. Most of these are obsolete now.</p><p>Codes 32-127 are called the printable characters, and they represent the letters, number characters, and punctuation that most computers use to display basic English text.</p><p class="cpp-section cpp-topline" style="clear:both">Initializing chars</p><p>You can initialize char variables using character literals:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-char">char</span> ch2<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-2-close">{</span> <span class="token string">'a'</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-2-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize with code point for 'a' (stored as integer 97) (preferred)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 32px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>You can initialize chars with integers as well, but this should be avoided if possible</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-char">char</span> ch1<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-3-close">{</span> <span class="token number">97</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-3-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize with integer 97 ('a') (not preferred)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightredbackground"><p class="cpp-note-title cpp-bottomline">Warning</p><p>Be careful not to mix up character numbers with integer numbers. The following two initializations are not the same:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-4-close">{</span><span class="token number">5</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-4-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize with integer 5 (stored as integer 5)</span>
<span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-5-close">{</span><span class="token string">'5'</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-5-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize with code point for '5' (stored as integer 53)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Character numbers are intended to be used when we want to represent numbers as text, rather than as numbers to apply mathematical operations to.</p></div><p class="cpp-section cpp-topline" style="clear:both">Printing chars</p><p>When using std::cout to print a char, std::cout outputs the char variable as an ASCII character:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-6-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-6-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-9-close">{</span>
    <span class="token keyword keyword-char">char</span> ch1<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-7-close">{</span> <span class="token string">'a'</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-7-open">}</span><span class="token punctuation">;</span> <span class="token comment">// (preferred)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ch1<span class="token punctuation">;</span> <span class="token comment">// cout prints character 'a'</span>

    <span class="token keyword keyword-char">char</span> ch2<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-8-close">{</span> <span class="token number">98</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-8-open">}</span><span class="token punctuation">;</span> <span class="token comment">// code point for 'b' (not preferred)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ch2<span class="token punctuation">;</span> <span class="token comment">// cout prints a character ('b')</span>


    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-9-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This produces the result:</p><pre>ab
</pre><p>We can also output char literals directly:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">cout <span class="token operator">&lt;&lt;</span> <span class="token string">'c'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This produces the result:</p><pre>c
</pre><p class="cpp-section cpp-topline" style="clear:both">Inputting chars</p><p>The following program asks the user to input a character, then prints out the character:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-10-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-10-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-12-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input a keyboard character: "</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-11-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-11-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You entered: "</span> <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-12-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Here’s the output from one run:</p><pre>Input a keyboard character: q
You entered q
</pre><p>Note that std::cin will let you enter multiple characters. However, variable <em>ch</em> can only hold 1 character. Consequently, only the first input character is extracted into variable <em>ch</em>. The rest of the user input is left in the input buffer that std::cin uses, and can be extracted with subsequent calls to std::cin.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p>You can see this behavior in the following example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-13-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-13-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-15-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Input a keyboard character: "</span><span class="token punctuation">;</span> <span class="token comment">// assume the user enters "abcd" (without quotes)</span>

    <span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-14-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-14-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span> <span class="token comment">// ch = 'a', "bcd" is left queued.</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You entered: "</span> <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token comment">// Note: The following cin doesn't ask the user for input, it grabs queued input!</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> ch<span class="token punctuation">;</span> <span class="token comment">// ch = 'b', "cd" is left queued.</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You entered: "</span> <span class="token operator">&lt;&lt;</span> ch <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-15-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><pre>Input a keyboard character: abcd
You entered: a
You entered: b
</pre><p>If you want to read in more than one char at a time (e.g. to read in a name, word, or sentence), you’ll want to use a string instead of a char. A <span class="cpp-definition">string</span> is a collection of sequential characters (and thus, a string can hold multiple symbols).</p><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">Related content</p><p>We discuss strings in upcoming lesson (<a href="https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdstring/">4.13 -- An introduction to std::string</a>).</p></div><p class="cpp-section cpp-topline" style="clear:both">Char size, range, and default sign</p><p>Char is defined by C++ to always be 1 byte in size. By default, a char may be signed or unsigned (though it’s usually signed). If you’re using chars to hold ASCII characters, you don’t need to specify a sign (since both signed and unsigned chars can hold values between 0 and 127).</p><p>If you’re using a char to hold small integers (something you should not do unless you’re explicitly optimizing for space), you should always specify whether it is signed or unsigned. A signed char can hold a number between -128 and 127. An unsigned char can hold a number between 0 and 255.</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p class="cpp-section cpp-topline" style="clear:both">Escape sequences</p><p>There are some characters in C++ that have special meaning. These characters are called <span class="cpp-definition">escape sequences</span>. An escape sequence starts with a ‘\’ (backslash) character, and then a following letter or number.</p><p>You’ve already seen the most common escape sequence: ‘\n’, which can be used to embed a newline in a string of text:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-16-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-16-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-17-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"First line\nSecond line\n"</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-17-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This outputs:</p><pre>First line
Second line
</pre><p>Another commonly used escape sequence is ‘\t’, which embeds a horizontal tab:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-18-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-18-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-19-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"First part\tSecond part"</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-19-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Which outputs:</p><pre>First part        Second part
</pre><p>Three other notable escape sequences are:<br>\’ prints a single quote<br>\” prints a double quote<br>\\ prints a backslash</p><p>Here’s a table of all of the escape sequences:</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><th>Name</th><th>Symbol</th><th>Meaning</th></tr><tr><td>Alert</td><td>\a</td><td>Makes an alert, such as a beep</td></tr><tr><td>Backspace</td><td>\b</td><td>Moves the cursor back one space</td></tr><tr><td>Formfeed</td><td>\f</td><td>Moves the cursor to next logical page</td></tr><tr><td>Newline</td><td>\n</td><td>Moves cursor to next line</td></tr><tr><td>Carriage return</td><td>\r</td><td>Moves cursor to beginning of line</td></tr><tr><td>Horizontal tab</td><td>\t</td><td>Prints a horizontal tab</td></tr><tr><td>Vertical tab</td><td>\v</td><td>Prints a vertical tab</td></tr><tr><td>Single quote</td><td>\’</td><td>Prints a single quote</td></tr><tr><td>Double quote</td><td>\”</td><td>Prints a double quote</td></tr><tr><td>Backslash</td><td>\\</td><td>Prints a backslash.</td></tr><tr><td>Question mark</td><td>\?</td><td>Prints a question mark.<br>No longer relevant. You can use question marks unescaped.</td></tr><tr><td>Octal number</td><td>\(number)</td><td>Translates into char represented by octal</td></tr><tr><td>Hex number</td><td>\x(number)</td><td>Translates into char represented by hex number</td></tr></tbody></table></div><p>Here are some examples:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-20-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-20-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-21-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\"This is quoted text\"\n"</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"This string contains a single backslash \\\n"</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"6F in hex is char '\x6F'\n"</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-21-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Prints:</p><pre>"This is quoted text"
This string contains a single backslash \
6F in hex is char 'o'
</pre><p class="cpp-section cpp-topline" style="clear:both">Newline (\n) vs. std::endl</p><p>We cover this topic in lesson <a href="https://www.learncpp.com/cpp-tutorial/introduction-to-iostream-cout-cin-and-endl/">1.5 -- Introduction to iostream: cout, cin, and endl</a>.</p><p class="cpp-section cpp-topline" style="clear:both">What’s the difference between putting symbols in single and double quotes?</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121 ezoic-ad-adaptive" data-ez-name="learncpp_com-large-leaderboard-2"><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2-multi-121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0')};</script></span></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2-multi-121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0_1')};</script></span></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2-multi-121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0_2')};</script></span></span><style>.large-leaderboard-2-multi-121{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>Single chars are always put in single quotes (e.g. ‘a’, ‘+’, ‘5’). A char can only represent one symbol (e.g. the letter a, the plus symbol, the number 5). Something like this is illegal:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-char">char</span> ch<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-22-close">{</span><span class="token string">'56'</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-22-open">}</span><span class="token punctuation">;</span> <span class="token comment">// a char can only hold one symbol</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Text put between double quotes (e.g. “Hello, world!”) is treated as a string.</p><p>For now, you’re welcome to use string literals in your code:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello, world!"</span><span class="token punctuation">;</span> <span class="token comment">// "Hello, world!" is a string literal</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Put stand-alone chars in single quotes (e.g. ‘t’ or ‘\n’, not “t” or “\n”). This helps the compiler optimize more effectively.</p></div><p class="cpp-section cpp-topline" style="clear:both">What about the other char types, wchar_t, char16_t, and char32_t?</p><p>wchar_t should be avoided in almost all cases (except when interfacing with the Windows API). Its size is implementation defined, and is not reliable. It has largely been deprecated.</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">As an aside…</p><p>The term “deprecated” means “still supported, but no longer recommended for use, because it has been replaced by something better or is no longer considered safe”.</p></div><p>Much like ASCII maps the integers 0-127 to American English characters, other character encoding standards exist to map integers (of varying sizes) to characters in other languages. The most well-known mapping outside of ASCII is the Unicode standard, which maps over 144,000 integers to characters in many different languages. Because Unicode contains so many code points, a single Unicode code point needs 32-bits to represent a character (called UTF-32). However, Unicode characters can also be encoded using multiple 16-bit or 8-bit characters (called UTF-16 and UTF-8 respectively).</p><p>char16_t and char32_t were added to C++11 to provide explicit support for 16-bit and 32-bit Unicode characters. char8_t has been added in C++20.</p><p>You won’t need to use char8_t, char16_t, or char32_t unless you’re planning on making your program Unicode compatible. Unicode and localization are generally outside the scope of these tutorials, so we won’t cover it further.</p><p>In the meantime, you should only use ASCII characters when working with characters (and strings). Using characters from other character sets may cause your characters to display incorrectly.</p><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/introduction-to-type-conversion-and-static_cast/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">4.12</span>Introduction to type conversion and static_cast</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/introduction-to-if-statements/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">4.10</span>Introduction to if statements</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:400px;min-width:580px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/chars/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/boolean-values/" rel="prev"><span>4.9 — Boolean values</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/literals/" rel="next"><span>4.14 — Literal constants</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="314"><span class="wpdtc" title="314">314</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CJmixcuf9_YCFVb5hwodescKxQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=12d9c73d-2a1a-42c1-4afd-a558f18d5380&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/8917796840094241&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/chars/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102 ezoic-ad-adaptive" data-ez-name="learncpp_com-box-1"><span class="ezoic-ad box-1 box-1-multi-102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="300" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:300px;min-width:300px" class="ezoic-ad" data-google-query-id="CJqixcuf9_YCFVb5hwodescKxQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span></span><span class="ezoic-ad box-1 box-1-multi-102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0_1" ezaw="300" ezah="300" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:300px;min-width:300px" class="ezoic-ad" data-google-query-id="CJuixcuf9_YCFVb5hwodescKxQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0_1')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_1__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span></span><style>.box-1-multi-102{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:7px!important;margin-left:0!important;margin-right:0!important;margin-top:7px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div></div></section></aside>