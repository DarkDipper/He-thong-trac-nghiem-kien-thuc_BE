<main id="main" role="main" class="main"><article id="post-59" class="post-59 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">5.6 — Relational operators and floating point comparisons</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2007-06-15T10:43:59-07:00" itemprop="datePublished">June 15, 2007, 10:43 am</time>
<time class="updated" datetime="2021-12-30T19:23:40-08:00" itemprop="dateModified">December 30, 2021</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CIn9hYeQ-PYCFRKmvQodPcwOYQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p><span class="cpp-definition">Relational operators</span> are operators that let you compare two values. There are 6 relational operators:</p><p style="clear:both"></p><p></p><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><th>Operator</th><th>Symbol</th><th>Form</th><th>Operation</th></tr><tr><td>Greater than</td><td>&gt;</td><td>x &gt; y</td><td>true if x is greater than y, false otherwise</td></tr><tr><td>Less than</td><td>&lt;</td><td>x &lt; y</td><td>true if x is less than y, false otherwise</td></tr><tr><td>Greater than or equals</td><td>&gt;=</td><td>x &gt;= y</td><td>true if x is greater than or equal to y, false otherwise</td></tr><tr><td>Less than or equals</td><td>&lt;=</td><td>x &lt;= y</td><td>true if x is less than or equal to y, false otherwise</td></tr><tr><td>Equality</td><td>==</td><td>x == y</td><td>true if x equals y, false otherwise</td></tr><tr><td>Inequality</td><td>!=</td><td>x != y</td><td>true if x does not equal y, false otherwise</td></tr></tbody></table></div><p>You have already seen how most of these work, and they are pretty intuitive. Each of these operators evaluates to the boolean value true (1), or false (0).</p><p>Here’s some sample code using these operators with integers:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-9-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter an integer: "</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-7-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-7-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter another integer: "</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-8-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-8-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> y<span class="token punctuation">;</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-1-close">(</span>x <span class="token operator">==</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-1-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" equals "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-2-close">(</span>x <span class="token operator">!=</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-2-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" does not equal "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-3-close">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-3-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" is greater than "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-4-close">(</span>x <span class="token operator">&lt;</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-4-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" is less than "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-5-close">(</span>x <span class="token operator">&gt;=</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-5-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" is greater than or equal to "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-6-close">(</span>x <span class="token operator">&lt;=</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-6-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" is less than or equal to "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-9-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>And the results from a sample run:</p><pre>Enter an integer: 4
Enter another integer: 5
4 does not equal 5
4 is less than 5
4 is less than or equal to 5
</pre><p>These operators are extremely straightforward to use when comparing integers.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p class="cpp-section cpp-topline" style="clear:both">Boolean conditional values</p><p>By default, conditions in an <em>if statement</em> or <em>conditional operator</em> (and a few other places) evaluate as Boolean values.</p><p>Many new programmers will write statements like this one:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-10-close">(</span>b1 <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-10-open">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This is redundant, as the <code>== true</code> doesn’t actually add any value to the condition. Instead, we should write:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-11-close">(</span>b1<span class="token punctuation brace-round brace-close brace-level-1" id="pair-11-open">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Similarly, the following:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-12-close">(</span>b1 <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-12-open">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>is better written as:</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-13-close">(</span><span class="token operator">!</span>b1<span class="token punctuation brace-round brace-close brace-level-1" id="pair-13-open">)</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Don’t add unnecessary == or != to conditions. It makes them harder to read without offering any additional value.</p></div><p class="cpp-section cpp-topline" style="clear:both">Comparison of floating point values can be problematic</p><p>Consider the following program:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-14-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-14-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-20-close">{</span>
    <span class="token keyword keyword-double">double</span> d1<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-18-close">{</span> <span class="token number">100.0</span> <span class="token operator">-</span> <span class="token number">99.99</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-18-open">}</span><span class="token punctuation">;</span> <span class="token comment">// should equal 0.01</span>
    <span class="token keyword keyword-double">double</span> d2<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-19-close">{</span> <span class="token number">10.0</span> <span class="token operator">-</span> <span class="token number">9.99</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-19-open">}</span><span class="token punctuation">;</span> <span class="token comment">// should equal 0.01</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-15-close">(</span>d1 <span class="token operator">==</span> d2<span class="token punctuation brace-round brace-close brace-level-2" id="pair-15-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d1 == d2"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-else">else</span> <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-16-close">(</span>d1 <span class="token operator">&gt;</span> d2<span class="token punctuation brace-round brace-close brace-level-2" id="pair-16-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d1 &gt; d2"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-else">else</span> <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-17-close">(</span>d1 <span class="token operator">&lt;</span> d2<span class="token punctuation brace-round brace-close brace-level-2" id="pair-17-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"d1 &lt; d2"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-20-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Variables d1 and d2 should both have value <em>0.01</em>. But this program prints an unexpected result:</p><pre>d1 &gt; d2
</pre><p>If you inspect the value of d1 and d2 in a debugger, you’d likely see that d1 = 0.0100000000000005116 and d2 = 0.0099999999999997868. Both numbers are close to 0.01, but d1 is greater than, and d2 is less than.</p><p>If a high level of precision is required, comparing floating point values using any of the relational operators can be dangerous. This is because floating point values are not precise, and small rounding errors in the floating point operands may cause unexpected results. We discussed rounding errors in lesson <a href="https://www.learncpp.com/cpp-tutorial/floating-point-numbers/">4.8 -- Floating point numbers</a> if you need a refresher.</p><p>When the less than and greater than operators (&lt;, &lt;=, &gt;, and &gt;=) are used with floating point values, they will usually produce the correct answer (only potentially failing when the operands are almost identical). Because of this, use of these operators with floating point operands can be acceptable, so long as the consequence of getting a wrong answer when the operands are similar is slight.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p>For example, consider a game (such as Space Invaders) where you want to determine whether two moving objects (such as a missile and an alien) intersect. If the objects are still far apart, these operators will return the correct answer. If the two objects are extremely close together, you might get an answer either way. In such cases, the wrong answer probably wouldn’t even be noticed (it would just look like a near miss, or near hit) and the game would continue.</p><p class="cpp-section cpp-topline" style="clear:both">Floating point equality</p><p>The equality operators (== and !=) are much more troublesome. Consider operator==, which returns true only if its operands are exactly equal. Because even the smallest rounding error will cause two floating point numbers to not be equal, operator== is at high risk for returning false when a true might be expected. Operator!= has the same kind of problem.</p><p>For this reason, use of these operators with floating point operands should be avoided.</p><div class="cpp-note cpp-lightredbackground"><p class="cpp-note-title cpp-bottomline">Warning</p><p>Avoid using operator== and operator!= with floating point operands.</p></div><p class="cpp-section cpp-topline" style="clear:both">Comparing floating point numbers (advanced / optional reading)</p><p>So how can we reasonably compare two floating point operands to see if they are equal?</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p>The most common method of doing floating point equality involves using a function that looks to see if two numbers are <em>almost</em> the same. If they are “close enough”, then we call them equal. The value used to represent “close enough” is traditionally called <span class="cpp-definition">epsilon</span>. Epsilon is generally defined as a small positive number (e.g. 0.00000001, sometimes written 1e-8).</p><p>New developers often try to write their own “close enough” function like this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span> <span class="token comment">// for std::abs()</span></span>

<span class="token comment">// epsilon is an absolute value</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">isAlmostEqual</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-21-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> epsilon<span class="token punctuation brace-round brace-close brace-level-1" id="pair-21-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-23-close">{</span>
    <span class="token comment">// if the distance between a and b is less than epsilon, then a and b are "close enough"</span>
    <span class="token keyword keyword-return">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-22-close">(</span>a <span class="token operator">-</span> b<span class="token punctuation brace-round brace-close brace-level-2" id="pair-22-open">)</span> <span class="token operator">&lt;=</span> epsilon<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-23-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>std::abs() is a function in the &lt;cmath&gt; header that returns the absolute value of its argument. So <code>std::abs(a - b) &lt;= epsilon</code> checks if the distance between <em>a</em> and <em>b</em> is less than whatever epsilon value representing “close enough” was passed in. If <em>a</em> and <em>b</em> are close enough, the function returns true to indicate they’re equal. Otherwise, it returns false.</p><p>While this function can work, it’s not great. An epsilon of <em>0.00001</em> is good for inputs around <em>1.0</em>, too big for inputs around <em>0.0000001</em>, and too small for inputs like <em>10,000</em>. This means every time we call this function, we have to pick an epsilon that’s appropriate for our inputs. If we know we’re going to have to scale epsilon in proportion to our inputs, we might as well modify the function to do that for us.</p><p><a href="https://en.wikipedia.org/wiki/Donald_Knuth">Donald Knuth</a>, a famous computer scientist, suggested the following method in his book “The Art of Computer Programming, Volume II: Seminumerical Algorithms (Addison-Wesley, 1969)”:</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::max</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span> <span class="token comment">// std::abs</span></span>

<span class="token comment">// return true if the difference between a and b is within epsilon percent of the larger of a and b</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">approximatelyEqual</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-24-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> epsilon<span class="token punctuation brace-round brace-close brace-level-1" id="pair-24-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-31-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-30-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-25-close">(</span>a <span class="token operator">-</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-25-open">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-29-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-28-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-26-close">(</span>a<span class="token punctuation brace-round brace-close brace-level-5" id="pair-26-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-27-close">(</span>b<span class="token punctuation brace-round brace-close brace-level-5" id="pair-27-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-28-open">)</span> <span class="token operator">*</span> epsilon<span class="token punctuation brace-round brace-close brace-level-3" id="pair-29-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-30-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-31-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In this case, instead of epsilon being an absolute number, epsilon is now relative to the magnitude of <em>a</em> or <em>b</em>.</p><p>Let’s examine in more detail how this crazy looking function works. On the left side of the &lt;= operator, <code>std::abs(a - b)</code> tells us the distance between <em>a</em> and <em>b</em> as a positive number.</p><p>On the right side of the &lt;= operator, we need to calculate the largest value of “close enough” we’re willing to accept. To do this, the algorithm chooses the larger of <em>a</em> and <em>b</em> (as a rough indicator of the overall magnitude of the numbers), and then multiplies it by epsilon. In this function, epsilon represents a percentage. For example, if we want to say “close enough” means <em>a</em> and <em>b</em> are within 1% of the larger of <em>a</em> and <em>b</em>, we pass in an epsilon of 0.01 (1% = 1/100 = 0.01). The value for epsilon can be adjusted to whatever is most appropriate for the circumstances (e.g. an epsilon of 0.002 means within 0.2%).</p><p>To do inequality (!=) instead of equality, simply call this function and use the logical NOT operator (!) to flip the result:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-33-close">(</span><span class="token operator">!</span><span class="token function">approximatelyEqual</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-32-close">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0.001</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-32-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-33-open">)</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" is not equal to "</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that while the approximatelyEqual() function will work for most cases, it is not perfect, especially as the numbers approach zero:</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// return true if the difference between a and b is within epsilon percent of the larger of a and b</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">approximatelyEqual</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-34-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> epsilon<span class="token punctuation brace-round brace-close brace-level-1" id="pair-34-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-44-close">{</span>
	<span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-40-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-35-close">(</span>a <span class="token operator">-</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-35-open">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-39-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-38-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-36-close">(</span>a<span class="token punctuation brace-round brace-close brace-level-5" id="pair-36-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-37-close">(</span>b<span class="token punctuation brace-round brace-close brace-level-5" id="pair-37-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-38-open">)</span> <span class="token operator">*</span> epsilon<span class="token punctuation brace-round brace-close brace-level-3" id="pair-39-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-40-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-44-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-41-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-41-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-46-close">{</span>
	<span class="token comment">// a is really close to 1.0, but has rounding errors, so it's slightly smaller than 1.0</span>
	<span class="token keyword keyword-double">double</span> a<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-45-close">{</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-45-open">}</span><span class="token punctuation">;</span>

	<span class="token comment">// First, let's compare a (almost 1.0) to 1.0.</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">approximatelyEqual</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-42-close">(</span>a<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1e-8</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-42-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

	<span class="token comment">// Second, let's compare a-1.0 (almost 0.0) to 0.0</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">approximatelyEqual</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-43-close">(</span>a<span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1e-8</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-43-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-46-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Perhaps surprisingly, this returns:</p><pre>1
0
</pre><p>The second call didn’t perform as expected. The math simply breaks down close to zero.</p><p>One way to avoid this is to use both an absolute epsilon (as we did in the first approach) and a relative epsilon (as we did in Knuth’s approach):</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// return true if the difference between a and b is less than absEpsilon, or within relEpsilon percent of the larger of a and b</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">approximatelyEqualAbsRel</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-47-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> absEpsilon<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> relEpsilon<span class="token punctuation brace-round brace-close brace-level-1" id="pair-47-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-56-close">{</span>
    <span class="token comment">// Check if the numbers are really close -- needed when comparing numbers near zero.</span>
    <span class="token keyword keyword-double">double</span> diff<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-55-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-48-close">(</span>a <span class="token operator">-</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-48-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-55-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-49-close">(</span>diff <span class="token operator">&lt;=</span> absEpsilon<span class="token punctuation brace-round brace-close brace-level-2" id="pair-49-open">)</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">// Otherwise fall back to Knuth's algorithm</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-54-close">(</span>diff <span class="token operator">&lt;=</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-53-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-52-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-50-close">(</span>a<span class="token punctuation brace-round brace-close brace-level-5" id="pair-50-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-51-close">(</span>b<span class="token punctuation brace-round brace-close brace-level-5" id="pair-51-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-52-open">)</span> <span class="token operator">*</span> relEpsilon<span class="token punctuation brace-round brace-close brace-level-3" id="pair-53-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-54-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-56-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In this algorithm, we first check if <em>a</em> and <em>b</em> are close together in absolute terms, which handles the case where <em>a</em> and <em>b</em> are both close to zero. The <em>absEpsilon</em> parameter should be set to something very small (e.g. 1e-12). If that fails, then we fall back to Knuth’s algorithm, using the relative epsilon.</p><p>Here’s our previous code testing both algorithms:</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// return true if the difference between a and b is within epsilon percent of the larger of a and b</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">approximatelyEqual</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-57-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> epsilon<span class="token punctuation brace-round brace-close brace-level-1" id="pair-57-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-76-close">{</span>
	<span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-63-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-58-close">(</span>a <span class="token operator">-</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-58-open">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-62-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-61-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-59-close">(</span>a<span class="token punctuation brace-round brace-close brace-level-5" id="pair-59-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-60-close">(</span>b<span class="token punctuation brace-round brace-close brace-level-5" id="pair-60-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-61-open">)</span> <span class="token operator">*</span> epsilon<span class="token punctuation brace-round brace-close brace-level-3" id="pair-62-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-63-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-76-open">}</span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">approximatelyEqualAbsRel</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-64-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> absEpsilon<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> relEpsilon<span class="token punctuation brace-round brace-close brace-level-1" id="pair-64-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-78-close">{</span>
    <span class="token comment">// Check if the numbers are really close -- needed when comparing numbers near zero.</span>
    <span class="token keyword keyword-double">double</span> diff<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-77-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-65-close">(</span>a <span class="token operator">-</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-65-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-77-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-66-close">(</span>diff <span class="token operator">&lt;=</span> absEpsilon<span class="token punctuation brace-round brace-close brace-level-2" id="pair-66-open">)</span>
        <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token comment">// Otherwise fall back to Knuth's algorithm</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-71-close">(</span>diff <span class="token operator">&lt;=</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-70-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-69-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-67-close">(</span>a<span class="token punctuation brace-round brace-close brace-level-5" id="pair-67-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-68-close">(</span>b<span class="token punctuation brace-round brace-close brace-level-5" id="pair-68-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-69-open">)</span> <span class="token operator">*</span> relEpsilon<span class="token punctuation brace-round brace-close brace-level-3" id="pair-70-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-71-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-78-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-72-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-72-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-80-close">{</span>
    <span class="token comment">// a is really close to 1.0, but has rounding errors</span>
    <span class="token keyword keyword-double">double</span> a<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-79-close">{</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-79-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">approximatelyEqual</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-73-close">(</span>a<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1e-8</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-73-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>     <span class="token comment">// compare "almost 1.0" to 1.0</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">approximatelyEqual</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-74-close">(</span>a<span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1e-8</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-74-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// compare "almost 0.0" to 0.0</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">approximatelyEqualAbsRel</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-75-close">(</span>a<span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1e-12</span><span class="token punctuation">,</span> <span class="token number">1e-8</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-75-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// compare "almost 0.0" to 0.0</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-80-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><pre>1
0
1
</pre><p>You can see that with an appropriately picked <em>absEpsilon</em>, approximatelyEqualAbsRel() handles the small inputs correctly.</p><p>Comparison of floating point numbers is a difficult topic, and there’s no “one size fits all” algorithm that works for every case. However, the approximatelyEqualAbsRel() should be good enough to handle most cases you’ll encounter.</p><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/logical-operators/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">5.7</span>Logical operators</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/comma-and-conditional-operators/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">5.5</span>Comma and conditional operators</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/relational-operators-and-floating-point-comparisons/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/comma-and-conditional-operators/" rel="prev"><span>5.5 — Comma and conditional operators</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/logical-operators/" rel="next"><span>5.7 — Logical operators</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="196"><span class="wpdtc" title="196">196</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CIr9hYeQ-PYCFRKmvQodPcwOYQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=b5caf4cb-7036-450d-6b28-aa10dd5a6f43&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/6248266092762722&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/relational-operators-and-floating-point-comparisons/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CIv9hYeQ-PYCFRKmvQodPcwOYQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=b5caf4cb-7036-450d-6b28-aa10dd5a6f43&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/3707575174759854&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/relational-operators-and-floating-point-comparisons/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>