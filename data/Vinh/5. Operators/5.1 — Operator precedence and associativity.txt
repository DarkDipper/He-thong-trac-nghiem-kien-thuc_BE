<main id="main" role="main" class="main"><article id="post-54" class="post-54 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">5.1 — Operator precedence and associativity</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2007-06-13T15:55:56-07:00" itemprop="datePublished">June 13, 2007, 3:55 pm</time>
<time class="updated" datetime="2022-02-20T16:54:17-08:00" itemprop="dateModified">February 20, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CPDzwKmO-PYCFZDGFgUdEHYEqA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p class="cpp-section">Chapter introduction</p><p>This chapter builds on top of the concepts from lesson <a href="https://www.learncpp.com/cpp-tutorial/introduction-to-literals-and-operators/">1.9 -- Introduction to literals and operators</a>. A quick review follows:</p><p>In mathematics, an <span class="cpp-definition">operation</span> is a mathematical calculation involving zero or more input values (called <span class="cpp-definition">operands</span>) that produces a new value (called an output value). The specific operation to be performed is denoted by a construct (typically a symbol or pair of symbols) called an <span class="cpp-definition">operator</span>.</p><p>For example, as children we all learn that <em>2 + 3</em> equals <em>5</em>. In this case, the literals <em>2</em> and <em>3</em> are the operands, and the symbol <em>+</em> is the operator that tells us to apply mathematical addition on the operands to produce the new value <em>5</em>.</p><p>In this chapter, we’ll discuss topics related to operators, and explore many of the common operators that C++ supports.</p><p class="cpp-section cpp-topline" style="clear:both">Operator precedence</p><p>Now, let’s consider a more complicated expression, such as <em>4 + 2 * 3</em>. An expression that has multiple operators is called a <span class="cpp-definition">compound expression</span>. In order to evaluate this compound expression, we must understand both what the operators do, and the correct order to apply them. The order in which operators are evaluated in a compound expression is determined by an operator’s <span class="cpp-definition">precedence</span>. Using normal mathematical precedence rules (which state that multiplication is resolved before addition), we know that the above expression should evaluate as <em>4 + (2 * 3)</em> to produce the value 10.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>In C++, when the compiler encounters an expression, it must similarly analyze the expression and determine how it should be evaluated. To assist with this, all operators are assigned a level of precedence. Operators with the highest level of precedence are evaluated first.</p><p>You can see in the table below that multiplication and division (precedence level 5) have more precedence than addition and subtraction (precedence level 6). Thus, <em>4 + 2 * 3</em> evaluates as <em>4 + (2 * 3)</em> because multiplication has a higher level of precedence than addition.</p><p class="cpp-section cpp-topline" style="clear:both">Operator associativity</p><p>What happens if two operators in the same expression have the same precedence level? For example, in the expression <em>3 * 4 / 2</em>, the multiplication and division operators are both precedence level 5. In this case, the compiler can’t rely upon precedence alone to determine how to evaluate the result.</p><p>If two operators with the same precedence level are adjacent to each other in an expression, the operator’s <span class="cpp-definition">associativity</span> tells the compiler whether to evaluate the operators from left to right or from right to left. The operators in precedence level 5 have an associativity of left to right, so the expression is resolved from left to right: <em>(3 * 4) / 2 = 6</em>.</p><p class="cpp-section cpp-topline" style="clear:both">Table of operators</p><p>The below table is primarily meant to be a reference chart that you can refer back to in the future to resolve any precedence or associativity questions you have.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><p>Notes:</p><ul><li>Precedence level 1 is the highest precedence level, and level 17 is the lowest. Operators with a higher precedence level get evaluated first.</li><li>L-&gt;R means left to right associativity.</li><li>R-&gt;L means right to left associativity.</li></ul><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><th>Prec/Ass</th><th>Operator</th><th>Description</th><th>Pattern</th></tr><tr><td>1 None</td><td>::<br>::</td><td>Global scope (unary)<br>Namespace scope (binary)</td><td>::name<br>class_name::member_name</td></tr><tr><td>2 L-&gt;R</td><td>()<br>()<br>()<br>{}<br>type()<br>type{}<br>[]<br>.<br>-&gt;<br>++<br>––<br>typeid<br>const_cast<br>dynamic_cast<br>reinterpret_cast<br>static_cast<br>sizeof…<br>noexcept<br>alignof</td><td>Parentheses<br>Function call<br>Initialization<br>Uniform initialization (C++11)<br>Functional cast<br>Functional cast (C++11)<br>Array subscript<br>Member access from object<br>Member access from object ptr<br>Post-increment<br>Post-decrement<br>Run-time type information<br>Cast away const<br>Run-time type-checked cast<br>Cast one type to another<br>Compile-time type-checked cast<br>Get parameter pack size<br>Compile-time exception check<br>Get type alignment</td><td>(expression)<br>function_name(parameters)<br>type name(expression)<br>type name{expression}<br>new_type(expression)<br>new_type{expression}<br>pointer[expression]<br>object.member_name<br>object_pointer-&gt;member_name<br>lvalue++<br>lvalue––<br>typeid(type) or typeid(expression)<br>const_cast&lt;type&gt;(expression)<br>dynamic_cast&lt;type&gt;(expression)<br>reinterpret_cast&lt;type&gt;(expression)<br>static_cast&lt;type&gt;(expression)<br>sizeof…(expression)<br>noexcept(expression)<br>alignof(Type)</td></tr><tr><td>3 R-&gt;L</td><td>+<br>-<br>++<br>––<br>!<br>~<br>(type)<br>sizeof<br>co_await<br>&amp;<br>*<br>new<br>new[]<br>delete<br>delete[]</td><td>Unary plus<br>Unary minus<br>Pre-increment<br>Pre-decrement<br>Logical NOT<br>Bitwise NOT<br>C-style cast<br>Size in bytes<br>Await asynchronous call<br>Address of<br>Dereference<br>Dynamic memory allocation<br>Dynamic array allocation<br>Dynamic memory deletion<br>Dynamic array deletion</td><td>+expression<br>-expression<br>++lvalue<br>––lvalue<br>!expression<br>~expression<br>(new_type)expression<br>sizeof(type) or sizeof(expression)<br>co_await expression<br>&amp;lvalue<br>*expression<br>new type<br>new type[expression]<br>delete pointer<br>delete[] pointer</td></tr><tr><td>4 L-&gt;R</td><td>-&gt;*<br>.*</td><td>Member pointer selector<br>Member object selector</td><td>object_pointer-&gt;*pointer_to_member<br>object.*pointer_to_member</td></tr><tr><td>5 L-&gt;R</td><td>*<br>/<br>%</td><td>Multiplication<br>Division<br>Modulus</td><td>expression * expression<br>expression / expression<br>expression % expression</td></tr><tr><td>6 L-&gt;R</td><td>+<br>-</td><td>Addition<br>Subtraction</td><td>expression + expression<br>expression - expression</td></tr><tr><td>7 L-&gt;R</td><td>&lt;&lt;<br>&gt;&gt;</td><td>Bitwise shift left<br>Bitwise shift right</td><td>expression &lt;&lt; expression<br>expression &gt;&gt; expression</td></tr><tr><td>8 L-&gt;R</td><td>&lt;=&gt;</td><td>Three-way comparison</td><td>expression &lt;=&gt; expression</td></tr><tr><td>9 L-&gt;R</td><td>&lt;<br>&lt;=<br>&gt;<br>&gt;=</td><td>Comparison less than<br>Comparison less than or equals<br>Comparison greater than<br>Comparison greater than or equals</td><td>expression &lt; expression<br>expression &lt;= expression<br>expression &gt; expression<br>expression &gt;= expression</td></tr><tr><td>10 L-&gt;R</td><td>==<br>!=</td><td>Equality<br>Inequality</td><td>expression == expression<br>expression != expression</td></tr><tr><td>11 L-&gt;R</td><td>&amp;</td><td>Bitwise AND</td><td>expression &amp; expression</td></tr><tr><td>12 L-&gt;R</td><td>^</td><td>Bitwise XOR</td><td>expression ^ expression</td></tr><tr><td>13 L-&gt;R</td><td>|</td><td>Bitwise OR</td><td>expression | expression</td></tr><tr><td>14 L-&gt;R</td><td>&amp;&amp;</td><td>Logical AND</td><td>expression &amp;&amp; expression</td></tr><tr><td>15 L-&gt;R</td><td>||</td><td>Logical OR</td><td>expression || expression</td></tr><tr><td>16 R-&gt;L</td><td>throw<br>co_yield<br>?:<br>=<br>*=<br>/=<br>%=<br>+=<br>-=<br>&lt;&lt;=<br>&gt;&gt;=<br>&amp;=<br>|=<br>^=</td><td>Throw expression<br>Yield expression<br>Conditional<br>Assignment<br>Multiplication assignment<br>Division assignment<br>Modulus assignment<br>Addition assignment<br>Subtraction assignment<br>Bitwise shift left assignment<br>Bitwise shift right assignment<br>Bitwise AND assignment<br>Bitwise OR assignment<br>Bitwise XOR assignment</td><td>throw expression<br>co_yield expression<br>expression ? expression : expression<br>lvalue = expression<br>lvalue *= expression<br>lvalue /= expression<br>lvalue %= expression<br>lvalue += expression<br>lvalue -= expression<br>lvalue &lt;&lt;= expression<br>lvalue &gt;&gt;= expression<br>lvalue &amp;= expression<br>lvalue |= expression<br>lvalue ^= expression</td></tr><tr><td>17 L-&gt;R</td><td>,</td><td>Comma operator</td><td>expression, expression</td></tr></tbody></table></div><p>You should already recognize a few of these operators, such as +, -, *, /, (), and sizeof. However, unless you have experience with another programming language, the majority of the operators in this table will probably be incomprehensible to you right now. That’s expected at this point. We’ll cover many of them in this chapter, and the rest will be introduced as there is a need for them.</p><div class="cpp-note cpp-lightbluebackground"><p class="cpp-note-title cpp-bottomline">Q: Where’s the exponent operator?</p><p>C++ doesn’t include an operator to do exponentiation (operator^ has a different function in C++). We discuss exponentiation more in lesson <a href="https://www.learncpp.com/cpp-tutorial/5-3-modulus-and-exponentiation/">5.3 -- Modulus and Exponentiation</a>.</p></div><p class="cpp-section cpp-topline" style="clear:both">Parenthesization</p><p>In normal arithmetic, you learned that you can use parentheses to change the order of application of operations. For example, we know that <em>4 + 2 * 3</em> evaluates as <em>4 + (2 * 3)</em>, but if you want it to evaluate as <em>(4 + 2) * 3</em> instead, you can explicitly parenthesize the expression to make it evaluate the way you want. This works in C++ because parentheses have one of the highest precedence levels, so parentheses generally evaluate before whatever is inside them.</p><p>Now consider an expression like <em>x &amp;&amp; y || z</em>. Does this evaluate as <em>(x &amp;&amp; y) || z</em> or <em>x &amp;&amp; (y || z)</em>? You could look up in the table and see that &amp;&amp; takes precedence over ||. But there are so many operators and precedence levels that it’s hard to remember them all.</p><p>In order to reduce mistakes and make your code easier to understand without referencing a precedence table, it’s a good idea to parenthesize any non-trivial compound expression, so it’s clear what your intent is.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Use parentheses to make it clear how a non-trivial expression should evaluate (even if they are technically unnecessary).</p></div><p>There is one notable exception to the above best practice: Expressions that have a single assignment operator do not need to have the right operand of the assignment wrapped in parenthesis.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p>For example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">x <span class="token operator">=</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span>y <span class="token operator">+</span> z <span class="token operator">+</span> w<span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span><span class="token punctuation">;</span>   <span class="token comment">// instead of this</span>
x <span class="token operator">=</span> y <span class="token operator">+</span> z <span class="token operator">+</span> w<span class="token punctuation">;</span>     <span class="token comment">// it's okay to do this</span>

x <span class="token operator">=</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-2-close">(</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-1-close">(</span>y <span class="token operator">||</span> z<span class="token punctuation brace-round brace-close brace-level-2" id="pair-1-open">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation brace-round brace-close brace-level-1" id="pair-2-open">)</span><span class="token punctuation">;</span> <span class="token comment">// instead of this</span>
x <span class="token operator">=</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-3-close">(</span>y <span class="token operator">||</span> z<span class="token punctuation brace-round brace-close brace-level-1" id="pair-3-open">)</span> <span class="token operator">&amp;&amp;</span> w<span class="token punctuation">;</span>   <span class="token comment">// it's okay to do this</span>

x <span class="token operator">=</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-4-close">(</span>y <span class="token operator">*=</span> z<span class="token punctuation brace-round brace-close brace-level-1" id="pair-4-open">)</span><span class="token punctuation">;</span> <span class="token comment">// expressions with multiple assignments still benefit from parenthesis</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The assignment operators have the second lowest precedence (only the comma operator is lower, and it’s rarely used). Therefore, so long as there is only one assignment (and no commas), we know the right operand will fully evaluate before the assignment.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Expressions with a single assignment operator do not need to have the right operand of the assignment wrapped in parenthesis.</p></div><p class="cpp-section cpp-topline" style="clear:both">The order of evaluation of expressions and function arguments is mostly unspecified</p><p>Consider the following expression:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">a <span class="token operator">+</span> b <span class="token operator">*</span> c<span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>We know from the precedence and associativity rules above that this expression will evaluate as if we had typed:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">a <span class="token operator">+</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-5-close">(</span>b <span class="token operator">*</span> c<span class="token punctuation brace-round brace-close brace-level-1" id="pair-5-open">)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>If <em>a</em> is <em>1</em>, <em>b</em> is <em>2</em>, and <em>c</em> is 3, this expression will evaluate to the answer <em>7</em>.</p><p>However, the precedence and associativity rules only tell us how operators evaluate in relation to other operators. It does not tell us anything about the order in which the rest of the expression evaluates. For example, does variable <em>a</em>, <em>b</em>, or <em>c</em> get evaluated first?</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p>Perhaps surprisingly, in many cases, the order of evaluation of any part of a compound expression (including function calls and argument evaluation) is unspecified. In such cases, the compiler is free to choose any evaluation order it believes is optimal.</p><div class="cpp-note cpp-lightredbackground"><p class="cpp-note-title cpp-bottomline">Warning</p><p>In many cases, the operands in a compound expression may evaluate in any order. This includes function calls and the arguments to those function calls.</p></div><p>For most expressions, this is irrelevant. In our sample expression above, it doesn’t matter whether in which order variables <em>a</em>, <em>b</em>, or <em>c</em> are evaluated for their values: the answer will always be <em>7</em>. There is no ambiguity here.</p><p>But it is possible to write expressions where the order of evaluation does matter. Consider this program, which contains a mistake often made by new C++ programmers:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-6-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-6-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-13-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter an integer: "</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-12-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-12-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-13-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-7-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-7-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-14-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-8-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-8-open">)</span> <span class="token operator">+</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-11-close">(</span><span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-9-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-9-open">)</span> <span class="token operator">*</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-10-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-10-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-11-open">)</span><span class="token punctuation">;</span> <span class="token comment">// a + (b * c)</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-14-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>If you run this program and enter inputs <em>1</em>, <em>2</em>, and <em>3</em>, you might assume that this program would print <em>7</em>. But that is making the assumption that the calls to getValue() will evaluate in left-to-right order. The compiler may choose a different order. For example, if the compiler chose a right-to-left order instead, the program would print <em>5</em> for the same set of inputs.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Outside of the operator precedence and associativity rules, assume that the parts of an expression could evaluate in any order. Ensure that the expressions you write are not dependent on the order of evaluation of those parts.</p></div><p>The above program can be made unambiguous by making each function call a separate statement:</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-15-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-15-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-22-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter an integer: "</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-21-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-21-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-22-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-16-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-16-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-26-close">{</span>
    <span class="token keyword keyword-int">int</span> a<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-23-close">{</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-17-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-17-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-23-open">}</span><span class="token punctuation">;</span> <span class="token comment">// will execute first</span>
    <span class="token keyword keyword-int">int</span> b<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-24-close">{</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-18-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-18-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-24-open">}</span><span class="token punctuation">;</span> <span class="token comment">// will execute second</span>
    <span class="token keyword keyword-int">int</span> c<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-25-close">{</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-19-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-19-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-25-open">}</span><span class="token punctuation">;</span> <span class="token comment">// will execute third</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-20-close">(</span>b <span class="token operator">*</span> c<span class="token punctuation brace-round brace-close brace-level-2" id="pair-20-open">)</span><span class="token punctuation">;</span> <span class="token comment">// order of eval doesn't matter now</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-26-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">Related content</p><p>There are some additional examples of cases where order of evaluation problems can occur in lesson <a href="https://www.learncpp.com/cpp-tutorial/increment-decrement-operators-and-side-effects/">5.4 -- Increment/decrement operators, and side effects</a>.</p></div><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>You know from everyday mathematics that expressions inside of parentheses get evaluated first. For example, in the expression <code>(2 + 3) * 4</code>, the <code>(2 + 3)</code> part is evaluated first.</p><p>For this exercise, you are given a set of expressions that have no parentheses. Using the operator precedence and associativity rules in the table above, add parentheses to each expression to make it clear how the compiler will evaluate the expression.</p><p><a class="hint_link_show" href="javascript:void(0)" onclick="cppHintToggle(document.getElementById('cpp_hint_id_0'),this,'Show Hint','')">Show Hint</a></p><div class="wphint" id="cpp_hint_id_0" style="display:none;margin-bottom:1em">Hint: Use the pattern column in the table above to determine whether the operator is unary (has one operand) or binary (has two operands). Review the lesson <a href="https://www.learncpp.com/cpp-tutorial/introduction-to-literals-and-operators/">1.9 -- Introduction to literals and operators</a> if you need a refresher on what unary and binary operators are.</div><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><td>Sample problem: x = 2 + 3 % 4<p>Binary operator % has higher precedence than operator + or operator =, so it gets evaluated first:</p><p>x = 2 + (3 % 4)</p><p>Binary operator + has a higher precedence than operator =, so it gets evaluated next:</p><p>Final answer: x = (2 + (3 % 4))</p><p>We now no longer need the table above to understand how this expression will evaluate.</p></td></tr></tbody></table></div><p>a) x = 3 + 4 + 5;</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><p>Binary operator + has higher precedence than =:</p><p>x = (3 + 4 + 5);</p><p>Binary operator + has left to right association:</p><p>Final answer: x = ((3 + 4) + 5);</p></div><p>b) x = y = z;</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><p>Binary operator = has right to left association:</p><p>Final answer: x = (y = z);</p></div><p>c) z *= ++y + 5;</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_2'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_2" style="display:none"><p>Unary operator ++ has the highest precedence:</p><p>z *= (++y) + 5;</p><p>Binary operator + has the next highest precedence:</p><p>Final answer: z *= ((++y) + 5);</p></div><p>d) a || b &amp;&amp; c || d;</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_3'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_3" style="display:none"><p>Binary operator &amp;&amp; has higher precedence than ||:</p><p>a || (b &amp;&amp; c) || d;</p><p>Binary operator || has left to right association:</p><p>Final answer: (a || (b &amp;&amp; c)) || d;</p></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/arithmetic-operators/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">5.2</span>Arithmetic operators</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/chapter-4-summary-and-quiz/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">4.x</span>Chapter 4 summary and quiz</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/operator-precedence-and-associativity/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/computer-game-programming/three-questions-that-need-to-be-answered-before-you-start-writing-your-game/" rel="prev"><span>Three questions that need to be answered before you start writing your game</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/arithmetic-operators/" rel="next"><span>5.2 — Arithmetic operators</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="203"><span class="wpdtc" title="203">203</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CIWFuamO-PYCFaa_lgodJ4gCrQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=771170b4-66e0-438b-659b-07d6e9ac73eb&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/7383960012754519&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/operator-precedence-and-associativity/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CIaFuamO-PYCFaa_lgodJ4gCrQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=771170b4-66e0-438b-659b-07d6e9ac73eb&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/3924096890793141&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/operator-precedence-and-associativity/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>