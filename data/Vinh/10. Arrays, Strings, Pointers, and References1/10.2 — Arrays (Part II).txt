<main id="main" role="main" class="main"><article id="post-83" class="post-83 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.2 — Arrays (Part II)</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2007-06-27T17:48:43-07:00" itemprop="datePublished">June 27, 2007, 5:48 pm</time>
<time class="updated" datetime="2022-02-18T10:46:17-08:00" itemprop="dateModified">February 18, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CIGBl-KX-PYCFYQSvQodhfkLuQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>This lesson continues the discussion of arrays that began in lesson <a href="https://www.learncpp.com/cpp-tutorial/arrays-part-i/">10.1 -- Arrays (Part I)</a>.</p><p><strong>Initializing fixed arrays</strong></p><p>Array elements are treated just like normal variables, and as such, they are not initialized when created.</p><p>One way to “initialize” an array is to do it element by element:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> prime<span class="token punctuation brace-square brace-open brace-level-1" id="pair-0-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-0-open">]</span><span class="token punctuation">;</span> <span class="token comment">// hold the first 5 prime numbers</span>
prime<span class="token punctuation brace-square brace-open brace-level-1" id="pair-1-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-1-open">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
prime<span class="token punctuation brace-square brace-open brace-level-1" id="pair-2-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-2-open">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
prime<span class="token punctuation brace-square brace-open brace-level-1" id="pair-3-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-3-open">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
prime<span class="token punctuation brace-square brace-open brace-level-1" id="pair-4-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-4-open">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
prime<span class="token punctuation brace-square brace-open brace-level-1" id="pair-5-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-5-open">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>However, this is a pain, especially as the array gets larger. Furthermore, it’s not initialization, but assignment. Assignments don’t work if the array is <code>const</code>.</p><p>Fortunately, C++ provides a more convenient way to initialize entire arrays via use of an <strong>initializer list</strong>. The following example initializes the array with the same values as the one above:</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> prime<span class="token punctuation brace-square brace-open brace-level-1" id="pair-6-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-6-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-7-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-7-open">}</span><span class="token punctuation">;</span> <span class="token comment">// use initializer list to initialize the fixed array</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>If there are more initializers in the list than the array can hold, the compiler will generate an error.</p><p>However, if there are less initializers in the list than the array can hold, the remaining elements are initialized to 0 (or whatever value 0 converts to for a non-integral fundamental type -- e.g. 0.0 for double). This is called <strong>zero initialization</strong>.</p><p>The following example shows this in action:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-8-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-8-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-16-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-9-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-9-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-15-close">{</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-15-open">}</span><span class="token punctuation">;</span> <span class="token comment">// only initialize first 3 elements</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-10-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-10-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-11-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-11-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-12-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-12-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-13-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-13-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-14-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-14-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-16-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints:</p><pre>7
4
5
0
0
</pre><p>Consequently, to initialize all the elements of an array to 0, you can do this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// Initialize all elements to 0</span>
<span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-17-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-17-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-20-close">{</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-20-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Initialize all elements to 0.0</span>
<span class="token keyword keyword-double">double</span> array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-18-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-18-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-21-close">{</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-21-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Initialize all elements to an empty string</span>
std<span class="token double-colon punctuation">::</span>string array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-19-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-19-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-22-close">{</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-22-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>If the initializer list is omitted, the elements are uninitialized, unless they are a class-type.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// uninitialized</span>
<span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-23-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-23-open">]</span><span class="token punctuation">;</span>

<span class="token comment">// uninitialized</span>
<span class="token keyword keyword-double">double</span> array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-24-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-24-open">]</span><span class="token punctuation">;</span>

<span class="token comment">// Initialize all elements to an empty string</span>
std<span class="token double-colon punctuation">::</span>string array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-25-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-25-open">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Explicitly initialize arrays, even if they would be initialized without an initializer list.</p></div><p><strong>Omitted length</strong></p><p>If you are initializing a fixed array of elements using an initializer list, the compiler can figure out the length of the array for you, and you can omit explicitly declaring the length of the array.</p><p>The following two lines are equivalent:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-26-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-26-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-28-close">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-28-open">}</span><span class="token punctuation">;</span> <span class="token comment">// explicitly define the length of the array</span>
<span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-27-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-27-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-29-close">{</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-29-open">}</span><span class="token punctuation">;</span> <span class="token comment">// let the initializer list set length of the array</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This not only saves typing, it also means you don’t have to update the array length if you add or remove elements later.</p><p><strong>Arrays and enums</strong></p><p>One of the big documentation problems with arrays is that integer indices do not provide any information to the programmer about the meaning of the index. Consider a class of 5 students:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> numberOfStudents<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-32-close">{</span><span class="token number">5</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-32-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> testScores<span class="token punctuation brace-square brace-open brace-level-1" id="pair-30-close">[</span>numberOfStudents<span class="token punctuation brace-square brace-close brace-level-1" id="pair-30-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-33-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-33-open">}</span><span class="token punctuation">;</span>
testScores<span class="token punctuation brace-square brace-open brace-level-1" id="pair-31-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-31-open">]</span> <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Who is represented by testScores[2]? It’s not clear.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p>This can be solved by setting up an enumeration where one enumerator maps to each of the possible array indices:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-enum">enum</span> <span class="token class-name">StudentNames</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-37-close">{</span>
    kenny<span class="token punctuation">,</span> <span class="token comment">// 0</span>
    kyle<span class="token punctuation">,</span> <span class="token comment">// 1</span>
    stan<span class="token punctuation">,</span> <span class="token comment">// 2</span>
    butters<span class="token punctuation">,</span> <span class="token comment">// 3</span>
    cartman<span class="token punctuation">,</span> <span class="token comment">// 4</span>
    max_students <span class="token comment">// 5</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-37-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-34-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-34-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-39-close">{</span>
    <span class="token keyword keyword-int">int</span> testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-35-close">[</span>max_students<span class="token punctuation brace-square brace-close brace-level-2" id="pair-35-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-38-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-38-open">}</span><span class="token punctuation">;</span> <span class="token comment">// allocate 5 integers</span>
    testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-36-close">[</span>stan<span class="token punctuation brace-square brace-close brace-level-2" id="pair-36-open">]</span> <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-39-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In this way, it’s much clearer what each of the array elements represents. Note that an extra enumerator named max_students has been added. This enumerator is used during the array declaration to ensure the array has the proper length (as the array length should be one greater than the largest index). This is useful both for documentation purposes, and because the array will automatically be resized if another enumerator is added:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-enum">enum</span> <span class="token class-name">StudentNames</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-43-close">{</span>
    kenny<span class="token punctuation">,</span> <span class="token comment">// 0</span>
    kyle<span class="token punctuation">,</span> <span class="token comment">// 1</span>
    stan<span class="token punctuation">,</span> <span class="token comment">// 2</span>
    butters<span class="token punctuation">,</span> <span class="token comment">// 3</span>
    cartman<span class="token punctuation">,</span> <span class="token comment">// 4</span>
    wendy<span class="token punctuation">,</span> <span class="token comment">// 5</span>
    max_students <span class="token comment">// 6</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-43-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-40-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-40-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-45-close">{</span>
    <span class="token keyword keyword-int">int</span> testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-41-close">[</span>max_students<span class="token punctuation brace-square brace-close brace-level-2" id="pair-41-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-44-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-44-open">}</span><span class="token punctuation">;</span> <span class="token comment">// allocate 6 integers</span>
    testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-42-close">[</span>stan<span class="token punctuation brace-square brace-close brace-level-2" id="pair-42-open">]</span> <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span> <span class="token comment">// still works</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-45-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that this “trick” only works if you do not change the enumerator values manually!</p><p><strong>Arrays and enum classes</strong></p><p>Enum classes don’t have an implicit conversion to integer, so if you try the following:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-enum">enum</span> <span class="token keyword keyword-class">class</span> <span class="token class-name">StudentNames</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-49-close">{</span>
    kenny<span class="token punctuation">,</span> <span class="token comment">// 0</span>
    kyle<span class="token punctuation">,</span> <span class="token comment">// 1</span>
    stan<span class="token punctuation">,</span> <span class="token comment">// 2</span>
    butters<span class="token punctuation">,</span> <span class="token comment">// 3</span>
    cartman<span class="token punctuation">,</span> <span class="token comment">// 4</span>
    wendy<span class="token punctuation">,</span> <span class="token comment">// 5</span>
    max_students <span class="token comment">// 6</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-49-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-46-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-46-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-51-close">{</span>
    <span class="token keyword keyword-int">int</span> testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-47-close">[</span>StudentNames<span class="token double-colon punctuation">::</span>max_students<span class="token punctuation brace-square brace-close brace-level-2" id="pair-47-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-50-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-50-open">}</span><span class="token punctuation">;</span> <span class="token comment">// allocate 6 integers</span>
    testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-48-close">[</span>StudentNames<span class="token double-colon punctuation">::</span>stan<span class="token punctuation brace-square brace-close brace-level-2" id="pair-48-open">]</span> <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-51-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>You’ll get a compiler error. This can be addressed by using a static_cast to convert the enumerator to an integer:</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-52-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-52-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-58-close">{</span>
    <span class="token keyword keyword-int">int</span> testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-55-close">[</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-53-close">(</span>StudentNames<span class="token double-colon punctuation">::</span>max_students<span class="token punctuation brace-round brace-close brace-level-3" id="pair-53-open">)</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-55-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-57-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-57-open">}</span><span class="token punctuation">;</span> <span class="token comment">// allocate 6 integers</span>
    testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-56-close">[</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-54-close">(</span>StudentNames<span class="token double-colon punctuation">::</span>stan<span class="token punctuation brace-round brace-close brace-level-3" id="pair-54-open">)</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-56-open">]</span> <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-58-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>However, doing this is somewhat of a pain, so it might be better to use a standard enum inside of a namespace:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-namespace">namespace</span> StudentNames
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-63-close">{</span>
    <span class="token keyword keyword-enum">enum</span> <span class="token class-name">StudentNames</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-62-close">{</span>
        kenny<span class="token punctuation">,</span> <span class="token comment">// 0</span>
        kyle<span class="token punctuation">,</span> <span class="token comment">// 1</span>
        stan<span class="token punctuation">,</span> <span class="token comment">// 2</span>
        butters<span class="token punctuation">,</span> <span class="token comment">// 3</span>
        cartman<span class="token punctuation">,</span> <span class="token comment">// 4</span>
        wendy<span class="token punctuation">,</span> <span class="token comment">// 5</span>
        max_students <span class="token comment">// 6</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-62-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-63-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-59-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-59-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-65-close">{</span>
    <span class="token keyword keyword-int">int</span> testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-60-close">[</span>StudentNames<span class="token double-colon punctuation">::</span>max_students<span class="token punctuation brace-square brace-close brace-level-2" id="pair-60-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-64-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-64-open">}</span><span class="token punctuation">;</span> <span class="token comment">// allocate 6 integers</span>
    testScores<span class="token punctuation brace-square brace-open brace-level-2" id="pair-61-close">[</span>StudentNames<span class="token double-colon punctuation">::</span>stan<span class="token punctuation brace-square brace-close brace-level-2" id="pair-61-open">]</span> <span class="token operator">=</span> <span class="token number">76</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-65-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><strong>Passing arrays to functions</strong></p><p>Although passing an array to a function at first glance looks just like passing a normal variable, underneath the hood, C++ treats arrays differently.</p><p>When a normal variable is passed by value, C++ copies the value of the argument into the function parameter. Because the parameter is a copy, changing the value of the parameter does not change the value of the original argument.</p><p>However, because copying large arrays can be very expensive, C++ does <em>not</em> copy an array when an array is passed into a function. Instead, the <em>actual</em> array is passed. This has the side effect of allowing functions to directly change the value of array elements!</p><p>The following example illustrates this concept:</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">passValue</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-66-close">(</span><span class="token keyword keyword-int">int</span> value<span class="token punctuation brace-round brace-close brace-level-1" id="pair-66-open">)</span> <span class="token comment">// value is a copy of the argument</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-88-close">{</span>
    value <span class="token operator">=</span> <span class="token number">99</span><span class="token punctuation">;</span> <span class="token comment">// so changing it here won't change the value of the argument</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-88-open">}</span>

<span class="token keyword keyword-void">void</span> <span class="token function">passArray</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-67-close">(</span><span class="token keyword keyword-int">int</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-71-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-71-open">]</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-67-open">)</span> <span class="token comment">// prime is the actual array</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-89-close">{</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-72-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-72-open">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">// so changing it here will change the original argument!</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-73-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-73-open">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-74-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-74-open">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-75-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-75-open">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-76-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-76-open">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-89-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-68-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-68-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-92-close">{</span>
    <span class="token keyword keyword-int">int</span> value<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-90-close">{</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-90-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"before passValue: "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token function">passValue</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-69-close">(</span>value<span class="token punctuation brace-round brace-close brace-level-2" id="pair-69-open">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"after passValue: "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-77-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-77-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-91-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-91-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"before passArray: "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-78-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-78-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-79-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-79-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-80-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-80-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-81-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-81-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-82-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-82-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token function">passArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-70-close">(</span>prime<span class="token punctuation brace-round brace-close brace-level-2" id="pair-70-open">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"after passArray: "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-83-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-83-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-84-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-84-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-85-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-85-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-86-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-86-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-87-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-87-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-92-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><pre>before passValue: 1
after passValue: 1
before passArray: 2 3 5 7 11
after passArray: 11 7 5 3 2
</pre><p>In the above example, value is not changed in main() because the parameter value in function passValue() was a copy of variable value in function main(), not the actual variable. However, because the parameter array in function passArray() is the actual array, passArray() is able to directly change the value of the elements!</p><p>Why this happens is related to the way arrays are implemented in C++, a topic we’ll revisit in lesson <a href="https://www.learncpp.com/cpp-tutorial/pointers-and-arrays/">10.8 -- Pointers and arrays</a>. For now, you can consider this as a quirk of the language.</p><p>As a side note, if you want to ensure a function does not modify the array elements passed into it, you can make the array const:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// even though prime is the actual array, within this function it should be treated as a constant</span>
<span class="token keyword keyword-void">void</span> <span class="token function">passArray</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-93-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-94-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-94-open">]</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-93-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-100-close">{</span>
    <span class="token comment">// so each of these lines will cause a compile error!</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-95-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-95-open">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-96-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-96-open">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-97-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-97-open">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-98-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-98-open">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-99-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-99-open">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-100-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><strong>Determining the length of an array</strong></p><p>The std::size() function from the &lt;iterator&gt; header can be used to determine the length of arrays.</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0')};</script></span></span></div></div><p>Here’s an example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span> <span class="token comment">// for std::size</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-101-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-101-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-105-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-103-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-103-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-104-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-104-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The array has: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-102-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-102-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" elements\n"</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-105-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints:</p><pre>The array has: 8 elements
</pre><p>Note that due to the way C++ passes arrays to functions, this will <em>not</em> work for arrays that have been passed to functions!</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">printSize</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-106-close">(</span><span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-111-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-111-open">]</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-106-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-113-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-107-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-107-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// Error</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-113-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-108-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-108-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-115-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-112-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-112-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-114-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-114-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-109-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-109-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// will print the size of the array</span>
    <span class="token function">printSize</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-110-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-110-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-115-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>std::size() will work with other kinds of objects (such as std::array and std::vector), and it will cause a compiler error if you try to use it on a fixed array that has been passed to a function! Note that std::size returns an unsigned value. If you need a signed value, you can either cast the result or, since C++20, use std::ssize() (stands for signed size).</p><p>std::size() was added in C++17. If you’re still using an old compiler, you have to use the sizeof operator instead. sizeof isn’t as easy to use as std::size() and there are a few things you have to watch out for. If you’re using a C++17-capable compiler, you can skip to section “Indexing an array out of range”.</p><p>The sizeof operator can be used on arrays, and it will return the total size of the array (array length multiplied by element size).</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-116-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-116-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-121-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-119-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-119-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-120-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-120-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword keyword-sizeof">sizeof</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-117-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-117-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// will print the size of the array multiplied by the size of an int</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword keyword-sizeof">sizeof</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-118-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-118-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-121-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>On a machine with 4 byte integers and 8 byte pointers, this printed:</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><pre>32
4
</pre><p>(You may get a different result if the size of your types are different).</p><p>One neat trick: we can determine the length of a fixed array by dividing the size of the entire array by the size of an array element:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-122-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-122-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-128-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-125-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-125-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-127-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-127-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The array has: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword keyword-sizeof">sizeof</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-123-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-123-open">)</span> <span class="token operator">/</span> <span class="token keyword keyword-sizeof">sizeof</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-124-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-3" id="pair-126-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-126-open">]</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-124-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" elements\n"</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-128-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This printed</p><pre>The array has: 8 elements
</pre><p>How does this work? First, note that the size of the entire array is equal to the array’s length multiplied by the size of an element. Put more compactly: array size = array length * element size.</p><p>Using algebra, we can rearrange this equation: array length = array size / element size. sizeof(array) is the array size, and sizeof(array[0]) is the element size, so our equation becomes array length = sizeof(array) / sizeof(array[0]). We typically use array element 0 for the array element, since it’s the only element guaranteed to exist no matter what the array length is.</p><p>Note that this will only work if the array is a fixed-length array, and you’re doing this trick in the same function that array is declared in (we’ll talk more about why this restriction exists in a future lesson in this chapter).</p><p>When sizeof is used on an array that has been passed to a function, it doesn’t error out like std::size() does. Instead, it returns the size of a pointer.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">printSize</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-129-close">(</span><span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-136-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-136-open">]</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-129-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-140-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword keyword-sizeof">sizeof</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-130-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-130-open">)</span> <span class="token operator">/</span> <span class="token keyword keyword-sizeof">sizeof</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-131-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-3" id="pair-137-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-137-open">]</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-131-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-140-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-132-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-132-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-142-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-138-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-138-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-141-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">21</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-141-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token keyword keyword-sizeof">sizeof</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-133-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-133-open">)</span> <span class="token operator">/</span> <span class="token keyword keyword-sizeof">sizeof</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-134-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-3" id="pair-139-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-139-open">]</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-134-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token function">printSize</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-135-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-135-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-142-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Again assuming 8 byte pointers and 4 byte integers, this prints</p><pre>8
2
</pre><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">Author’s note</p><p>A properly configured compiler should print a warning if you try to use sizeof() on an array that was passed to a function.</p></div><p>The calculation in main() was correct, but the sizeof() in printSize() returned 8 (the size of a pointer), and 8 divided by 4 is 2.</p><p>For this reason, be careful about using sizeof() on arrays!</p><p>Note: In common usage, the terms “array size” and “array length” are both most often used to refer to the array’s length (the size of the array isn’t useful in most cases, outside of the trick we’ve shown you above).</p><p><strong>Indexing an array out of range</strong></p><p>Remember that an array of length N has array elements 0 through N-1. So what happens if you try to access an array with a subscript outside of that range?</p><p>Consider the following program:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-143-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-143-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-147-close">{</span>
    <span class="token keyword keyword-int">int</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-144-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-144-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-146-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-146-open">}</span><span class="token punctuation">;</span> <span class="token comment">// hold the first 5 prime numbers</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-145-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-145-open">]</span> <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-147-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In this program, our array is of length 5, but we’re trying to write a prime number into the 6th element (index 5).</p><p>C++ does <em>not</em> do any checking to make sure that your indices are valid for the length of your array. So in the above example, the value of 13 will be inserted into memory where the 6th element would have been had it existed. When this happens, you will get undefined behavior -- for example, this could overwrite the value of another variable, or cause your program to crash.</p><p>Although it happens less often, C++ will also let you use a negative index, with similarly undesirable results.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Rule</p><p>When using arrays, ensure that your indices are valid for the range of your array!</p></div><p><strong>Quiz</strong></p><ol start="1"><li>Declare an array to hold the high temperature (to the nearest tenth of a degree) for each day of a year (assume 365 days in a year). Initialize the array with a value of 0.0 for each day.</li><li>Set up an enum with the names of the following animals: chicken, dog, cat, elephant, duck, and snake. Put the enum in a namespace. Define an array with an element for each of these animals, and use an initializer list to initialize each element to hold the number of legs that animal has.</li></ol><p>Write a main function that prints the number of legs an elephant has, using the enumerator.</p><p><strong>Quiz answers</strong></p><ol start="1"><li><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></li></ol><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-double">double</span> temperature<span class="token punctuation brace-square brace-open brace-level-1" id="pair-148-close">[</span><span class="token number">365</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-148-open">]</span> <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-149-close">{</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-149-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><ol start="2"><li><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></li></ol><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-namespace">namespace</span> Animals
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-154-close">{</span>
    <span class="token keyword keyword-enum">enum</span> <span class="token class-name">Animals</span> <span class="token comment">// The name of this enum could be omitted since it isn't used anywhere</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-153-close">{</span>
        chicken<span class="token punctuation">,</span>
        dog<span class="token punctuation">,</span>
        cat<span class="token punctuation">,</span>
        elephant<span class="token punctuation">,</span>
        duck<span class="token punctuation">,</span>
        snake<span class="token punctuation">,</span>
        max_animals
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-153-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-154-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-150-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-150-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-156-close">{</span>
    <span class="token keyword keyword-int">int</span> legs<span class="token punctuation brace-square brace-open brace-level-2" id="pair-151-close">[</span>Animals<span class="token double-colon punctuation">::</span>max_animals<span class="token punctuation brace-square brace-close brace-level-2" id="pair-151-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-155-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-155-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"An elephant has "</span> <span class="token operator">&lt;&lt;</span> legs<span class="token punctuation brace-square brace-open brace-level-2" id="pair-152-close">[</span>Animals<span class="token double-colon punctuation">::</span>elephant<span class="token punctuation brace-square brace-close brace-level-2" id="pair-152-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" legs.\n"</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-156-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/arrays-and-loops/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.3</span>Arrays and loops</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/arrays-part-i/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.1</span>Arrays (Part I)</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/arrays-part-ii/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/arrays-part-i/" rel="prev"><span>10.1 — Arrays (Part I)</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/a1-static-and-dynamic-libraries/" rel="next"><span>A.1 — Static and dynamic libraries</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="402"><span class="wpdtc" title="402">402</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CIKBl-KX-PYCFYQSvQodhfkLuQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=6efe9538-af7f-416d-72d2-7882b3a4b367&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/2902962794907544&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/arrays-part-ii/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CIOBl-KX-PYCFYQSvQodhfkLuQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=6efe9538-af7f-416d-72d2-7882b3a4b367&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/8019277868882541&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/arrays-part-ii/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>