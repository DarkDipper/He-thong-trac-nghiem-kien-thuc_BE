<main id="main" role="main" class="main"><article id="post-82" class="post-82 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.1 â€” Arrays (Part I)</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2007-06-27T17:20:41-07:00" itemprop="datePublished">June 27, 2007, 5:20 pm</time>
<time class="updated" datetime="2021-12-10T12:04:17-08:00" itemprop="dateModified">December 10, 2021</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CJiO_aiW-PYCFUNklgodDlkLEg"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>Note: This chapter is a bit harder than the previous ones. If you feel a little discouraged, stick with it. The best stuff is yet to come!</p><p>In lesson <a href="https://www.learncpp.com/cpp-tutorial/introduction-to-structs-members-and-member-selection/">9.17 -- Introduction to structs, members, and member selection</a>, you learned that you can use a struct to aggregate many different data types into one identifier. This is great for the case where we want to model a single object that has many different properties. However, this is not so great for the case where we want to track many related instances of something.</p><p>Fortunately, structs are not the only aggregate data type in C++. An <strong>array</strong> is an aggregate data type that lets us access many variables of the same type through a single identifier.</p><p>Consider the case where you want to record the test scores for 30 students in a class. Without arrays, you would have to allocate 30 almost-identical variables!</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// allocate 30 integer variables (each with a different name)</span>
<span class="token keyword keyword-int">int</span> testScoreStudent1<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-0-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-0-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> testScoreStudent2<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-1-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-1-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> testScoreStudent3<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-2-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-2-open">}</span><span class="token punctuation">;</span>
<span class="token comment">// ...</span>
<span class="token keyword keyword-int">int</span> testScoreStudent30<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-3-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-3-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Arrays give us a much easier way to do this. The following array definition is essentially equivalent:</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> testScore<span class="token punctuation brace-square brace-open brace-level-1" id="pair-4-close">[</span><span class="token number">30</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-4-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-5-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-5-open">}</span><span class="token punctuation">;</span> <span class="token comment">// allocate 30 integer variables in a fixed array</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In an array variable declaration, we use square brackets ([]) to tell the compiler both that this is an array variable (instead of a normal variable), as well as how many variables to allocate (called the <strong>array length</strong>).</p><p>In the above example, we declare a fixed array named testScore, with a length of 30. A <strong>fixed array</strong> (also called a <strong>fixed length array</strong> or <strong>fixed size array</strong>) is an array where the length is known at compile time. When testScore is instantiated, 30 integers will be allocated.</p><p><strong>Array elements and subscripting</strong></p><p>Each of the variables in an array is called an <strong>element</strong>. Elements do not have their own unique names. Instead, to access individual elements of an array, we use the array name, along with the <strong>subscript operator ([])</strong>, and a parameter called a <strong>subscript</strong> (or <strong>index</strong>) that tells the compiler which element we want. This process is called <strong>subscripting</strong> or <strong>indexing</strong> the array.</p><p>In the example above, the first element in our array is testScore[0]. The second is testScore[1]. The tenth is testScore[9]. The last element in our testScore array is testScore[29]. This is great because we no longer need to keep track of a bunch of different (but related) names -- we can just vary the subscript to access different elements.</p><p><em>Important: Unlike everyday life, where we typically count starting from 1, in C++, arrays always count starting from 0!</em></p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><p>For an array of length N, the array elements are numbered 0 through N-1. This is called the arrayâ€™s <strong>range</strong>.</p><p><strong>An example array program</strong></p><p>Hereâ€™s a sample program that puts together the definition and indexing of an array:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-6-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-6-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-20-close">{</span>
    <span class="token keyword keyword-int">int</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-7-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-7-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-19-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-19-open">}</span><span class="token punctuation">;</span> <span class="token comment">// hold the first 5 prime numbers</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-8-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-8-open">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// The first element has index 0</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-9-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-9-open">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-10-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-10-open">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-11-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-11-open">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-12-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-12-open">]</span> <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">// The last element has index 4 (array length-1)</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The lowest prime number is: "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-13-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-13-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The sum of the first 5 primes is: "</span> <span class="token operator">&lt;&lt;</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-14-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-14-open">]</span> <span class="token operator">+</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-15-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-15-open">]</span> <span class="token operator">+</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-16-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-16-open">]</span> <span class="token operator">+</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-17-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-17-open">]</span> <span class="token operator">+</span> prime<span class="token punctuation brace-square brace-open brace-level-2" id="pair-18-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-18-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-20-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This prints:</p><pre>The lowest prime number is: 2
The sum of the first 5 primes is: 28
</pre><p><strong>Array data types</strong></p><p>Arrays can be made from any data type. Consider the following example, where we declare an array of doubles:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-21-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-21-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-31-close">{</span>
    <span class="token keyword keyword-double">double</span> batteryLifeInHours<span class="token punctuation brace-square brace-open brace-level-2" id="pair-23-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-23-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-30-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-30-open">}</span><span class="token punctuation">;</span> <span class="token comment">// allocate 3 doubles</span>
    batteryLifeInHours<span class="token punctuation brace-square brace-open brace-level-2" id="pair-24-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-24-open">]</span> <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
    batteryLifeInHours<span class="token punctuation brace-square brace-open brace-level-2" id="pair-25-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-25-open">]</span> <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">;</span>
    batteryLifeInHours<span class="token punctuation brace-square brace-open brace-level-2" id="pair-26-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-26-open">]</span> <span class="token operator">=</span> <span class="token number">4.3</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"The average battery life is "</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-22-close">(</span>batteryLifeInHours<span class="token punctuation brace-square brace-open brace-level-3" id="pair-27-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-27-open">]</span> <span class="token operator">+</span> batteryLifeInHours<span class="token punctuation brace-square brace-open brace-level-3" id="pair-28-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-28-open">]</span> <span class="token operator">+</span> batteryLifeInHours<span class="token punctuation brace-square brace-open brace-level-3" id="pair-29-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-29-open">]</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-22-open">)</span> <span class="token operator">/</span> <span class="token number">3.0</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" hour(s)\n"</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-31-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This program produces the result:</p><pre>The average battery life is 3.1 hour(s)
</pre><p>Arrays can also be made from structs. Consider the following example:</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-struct">struct</span> <span class="token class-name">Rectangle</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-35-close">{</span>
    <span class="token keyword keyword-int">int</span> length<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-33-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-33-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> width<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-34-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-34-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-35-open">}</span><span class="token punctuation">;</span>
Rectangle rects<span class="token punctuation brace-square brace-open brace-level-1" id="pair-32-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-32-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-36-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-36-open">}</span><span class="token punctuation">;</span> <span class="token comment">// declare an array of 5 Rectangle</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>To access a struct member of an array element, first pick which array element you want, and then use the member selection operator to select the struct member you want:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">rects<span class="token punctuation brace-square brace-open brace-level-1" id="pair-37-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-37-open">]</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Arrays can even be made from arrays, a topic that weâ€™ll cover in a future lesson.</p><p><strong>Array subscripts</strong></p><p>In C++, array subscripts must always be an integral type. This includes char, short, int, long, long long, etcâ€¦ and strangely enough, bool (where false gives an index of 0 and true gives an index of 1). An array subscript can be a literal value, a variable (constant or non-constant), or an expression that evaluates to an integral type.</p><p>Here are some examples:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-38-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-38-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-43-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-43-open">}</span><span class="token punctuation">;</span> <span class="token comment">// declare an array of length 5</span>

<span class="token comment">// using a literal (constant) index:</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-39-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-39-open">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>

<span class="token comment">// using an enum (constant) index</span>
<span class="token keyword keyword-enum">enum</span> <span class="token class-name">Animals</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-44-close">{</span>
    animal_cat <span class="token operator">=</span> <span class="token number">2</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-44-open">}</span><span class="token punctuation">;</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-40-close">[</span>animal_cat<span class="token punctuation brace-square brace-close brace-level-1" id="pair-40-open">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>

<span class="token comment">// using a variable (non-constant) index:</span>
<span class="token keyword keyword-int">int</span> index<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-45-close">{</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-45-open">}</span><span class="token punctuation">;</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-41-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-1" id="pair-41-open">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// ok</span>

<span class="token comment">// using an expression that evaluates to an integer index:</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-42-close">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-42-open">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">// ok</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><strong>Fixed array declarations</strong></p><p>When declaring a fixed array, the length of the array (between the square brackets) must be a compile-time constant. This is because the length of a fixed array must be known at compile time. Here are some different ways to declare fixed arrays:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// using a literal constant</span>
<span class="token keyword keyword-int">int</span> numberOfLessonsPerDay<span class="token punctuation brace-square brace-open brace-level-1" id="pair-46-close">[</span><span class="token number">7</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-46-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-50-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-50-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span>

<span class="token comment">// using a constexpr symbolic constant</span>
<span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> daysPerWeek<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-51-close">{</span> <span class="token number">7</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-51-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> numberOfLessonsPerDay<span class="token punctuation brace-square brace-open brace-level-1" id="pair-47-close">[</span>daysPerWeek<span class="token punctuation brace-square brace-close brace-level-1" id="pair-47-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-52-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-52-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span>

<span class="token comment">// using an enumerator</span>
<span class="token keyword keyword-enum">enum</span> <span class="token class-name">DaysOfWeek</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-53-close">{</span>
    monday<span class="token punctuation">,</span>
    tuesday<span class="token punctuation">,</span>
    wednesday<span class="token punctuation">,</span>
    thursday<span class="token punctuation">,</span>
    friday<span class="token punctuation">,</span>
    saturday<span class="token punctuation">,</span>
    sunday<span class="token punctuation">,</span>

    maxDaysOfWeek
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-53-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> numberOfLessonsPerDay<span class="token punctuation brace-square brace-open brace-level-1" id="pair-48-close">[</span>maxDaysOfWeek<span class="token punctuation brace-square brace-close brace-level-1" id="pair-48-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-54-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-54-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Ok</span>

<span class="token comment">// using a macro</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DAYS_PER_WEEK</span> <span class="token expression"><span class="token number">7</span></span></span>
<span class="token keyword keyword-int">int</span> numberOfLessonsPerDay<span class="token punctuation brace-square brace-open brace-level-1" id="pair-49-close">[</span>DAYS_PER_WEEK<span class="token punctuation brace-square brace-close brace-level-1" id="pair-49-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-55-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-55-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Works, but don't do this (use a constexpr symbolic constant instead)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that non-const variables or runtime constants cannot be used:</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// using a non-const variable</span>
<span class="token keyword keyword-int">int</span> daysPerWeek<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-58-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-58-open">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> daysPerWeek<span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> numberOfLessonsPerDay<span class="token punctuation brace-square brace-open brace-level-1" id="pair-56-close">[</span>daysPerWeek<span class="token punctuation brace-square brace-close brace-level-1" id="pair-56-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-59-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-59-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Not ok -- daysPerWeek is not a compile-time constant!</span>

<span class="token comment">// using a runtime const variable</span>
<span class="token keyword keyword-int">int</span> temp<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-60-close">{</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-60-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span> daysPerWeek<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-61-close">{</span> temp <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-61-open">}</span><span class="token punctuation">;</span> <span class="token comment">// the value of daysPerWeek isn't known until runtime, so this is a runtime constant, not a compile-time constant!</span>
<span class="token keyword keyword-int">int</span> numberOfLessonsPerDay<span class="token punctuation brace-square brace-open brace-level-1" id="pair-57-close">[</span>daysPerWeek<span class="token punctuation brace-square brace-close brace-level-1" id="pair-57-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-62-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-62-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Not ok</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that in the last two cases, an error should result because the length is not a compile-time constant. Some compilers may allow these kinds of arrays (for C99 compatibility reasons), but they are invalid in C++, and should not be used in C++ programs. If your compiler allows these arrays, you probably forgot to disable compiler extensions (Lesson <a href="https://www.learncpp.com/cpp-tutorial/configuring-your-compiler-compiler-extensions/">0.10 -- Configuring your compiler: Compiler extensions</a>).</p><p><strong>A note on dynamic arrays</strong></p><p>Because fixed arrays have memory allocated at compile time, that introduces two limitations:</p><ul><li>Fixed arrays cannot have a length based on either user input or some other value calculated at runtime.</li><li>Fixed arrays have a fixed length that can not be changed.</li></ul><p>In many cases, these limitations are problematic. Fortunately, C++ supports a second kind of array known as a <strong>dynamic array</strong>. The length of a dynamic array can be set at runtime, and their length can be changed. However, dynamic arrays are a little more complicated to instantiate, so weâ€™ll cover them later in the chapter.</p><p><strong>Summary</strong></p><p>Fixed arrays provide an easy way to allocate and use multiple variables of the same type so long as the length of the array is known at compile time.</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><p>Weâ€™ll look at more topics around fixed arrays in the next lesson.</p><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/arrays-part-ii/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.2</span>Arrays (Part II)</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/using-a-language-reference/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">9.y</span>Using a language reference</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/arrays-part-i/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/break-and-continue/" rel="prev"><span>7.10 â€” Break and continue</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/arrays-part-ii/" rel="next"><span>10.2 â€” Arrays (Part II)</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="237"><span class="wpdtc" title="237">237</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CJmO_aiW-PYCFUNklgodDlkLEg"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=b603eb18-2a5a-46ef-6b7a-48791bd50f3f&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/3042388696911846&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/arrays-part-i/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CJqO_aiW-PYCFUNklgodDlkLEg"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=b603eb18-2a5a-46ef-6b7a-48791bd50f3f&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/6288287848895005&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/arrays-part-i/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>