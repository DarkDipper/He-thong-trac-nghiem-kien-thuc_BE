<main id="main" role="main" class="main"><article id="post-9359" class="post-9359 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.19 — Introduction to standard library algorithms</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/nascardriver/" title="View all posts by nascardriver" itemprop="url"><em itemprop="name">nascardriver</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2020-01-03T05:04:32-08:00" itemprop="datePublished">January 3, 2020, 5:04 am</time>
<time class="updated" datetime="2022-01-18T10:39:32-08:00" itemprop="dateModified">January 18, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CPXxyKua-PYCFUqClgodQs8A3Q"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>New programmers typically spend a lot of time writing custom loops to perform relatively simple tasks, such as sorting or counting or searching arrays. These loops can be problematic, both in terms of how easy it is to make an error, and in terms of overall maintainability, as loops can be hard to understand.</p><p>Because searching, counting, and sorting are such common operations to do, the C++ standard library comes with a bunch of functions to do these things in just a few lines of code. Additionally, these standard library functions come pre-tested, are efficient, work on a variety of different container types, and many support parallelization (the ability to devote multiple CPU threads to the same task in order to complete it faster).</p><p>The functionality provided in the algorithms library generally fall into one of three categories:</p><ul><li><span class="cpp-definition">Inspectors</span> -- Used to view (but not modify) data in a container. Examples include searching and counting.</li><li><span class="cpp-definition">Mutators</span> -- Used to modify data in a container. Examples include sorting and shuffling.</li><li><span class="cpp-definition">Facilitators</span> -- Used to generate a result based on values of the data members. Examples include objects that multiply values, or objects that determine what order pairs of elements should be sorted in.</li></ul><p>These algorithms live in the <a href="https://en.cppreference.com/w/cpp/algorithm">algorithms</a> library. In this lesson, we’ll explore some of the more common algorithms -- but there are many more, and we encourage you to read through the linked reference to see everything that’s available!</p><p>Note: All of these make use of iterators, so if you’re not familiar with basic iterators, please review lesson <a href="https://www.learncpp.com/cpp-tutorial/introduction-to-iterators/">10.18 -- Introduction to iterators</a>.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p class="cpp-section cpp-topline" style="clear:both"><a name="std_find"></a>Using std::find to find an element by value</p><p><a href="https://en.cppreference.com/w/cpp/algorithm/find"><code>std::find</code></a> searches for the first occurrence of a value in a container. <code>std::find</code> takes 3 parameters: an iterator to the starting element in the sequence, an iterator to the ending element in the sequence, and a value to search for. It returns an iterator pointing to the element (if it is found) or the end of the container (if the element is not found).</p><p>For example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-14-close">{</span>
    std<span class="token double-colon punctuation">::</span>array arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-7-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-7-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter a value to search for and replace with: "</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> search<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-8-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-8-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> replace<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-9-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-9-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> search <span class="token operator">&gt;&gt;</span> replace<span class="token punctuation">;</span>

    <span class="token comment">// Input validation omitted</span>

    <span class="token comment">// std::find returns an iterator pointing to the found element (or the end of the container)</span>
    <span class="token comment">// we'll store it in a variable, using type inference to deduce the type of</span>
    <span class="token comment">// the iterator (since we don't care)</span>
    <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-10-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-3-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-1-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-1-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-2-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-2-open">)</span><span class="token punctuation">,</span> search<span class="token punctuation brace-round brace-close brace-level-3" id="pair-3-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-10-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Algorithms that don't find what they were looking for return the end iterator.</span>
    <span class="token comment">// We can access it by using the end() member function.</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-5-close">(</span>found <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-4-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-4-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-5-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-11-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Could not find "</span> <span class="token operator">&lt;&lt;</span> search <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-11-open">}</span>
    <span class="token keyword keyword-else">else</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-12-close">{</span>
        <span class="token comment">// Override the found element.</span>
        <span class="token operator">*</span>found <span class="token operator">=</span> replace<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-12-open">}</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-6-close">(</span><span class="token keyword keyword-int">int</span> i <span class="token operator">:</span> arr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-6-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-13-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-13-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-14-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Sample run when the element is found</p><pre>Enter a value to search for and replace with: 5 234
13 90 99 234 40 80
</pre><p>Sample run when the element isn’t found</p><pre>Enter a value to search for and replace with: 0 234
Could not find 0
13 90 99 5 40 80
</pre><p class="cpp-section cpp-topline" style="clear:both">Using std::find_if to find an element that matches some condition</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><p>Sometimes we want to see if there is a value in a container that matches some condition (e.g. a string that contains a specific substring) rather than an exact value. In such cases, <code>std::find_if</code> is perfect. The <code>std::find_if</code> function works similarly to <code>std::find</code>, but instead of passing in a value to search for, we pass in a callable object, such as a function pointer (or a lambda, which we’ll cover later) that checks to see if a match is found. <code>std::find_if</code> will call this function for every element until a matching element is found (or no more elements remain in the container to check).</p><p>Here’s an example where we use <code>std::find_if</code> to check if any elements contain the substring “nut”:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token comment">// Our function will return true if the element matches</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">containsNut</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-15-close">(</span>std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-round brace-close brace-level-1" id="pair-15-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-24-close">{</span>
    <span class="token comment">// std::string_view::find returns std::string_view::npos if it doesn't find</span>
    <span class="token comment">// the substring. Otherwise it returns the index where the substring occurs</span>
    <span class="token comment">// in str.</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-17-close">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-16-close">(</span><span class="token string">"nut"</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-16-open">)</span> <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos<span class="token punctuation brace-round brace-close brace-level-2" id="pair-17-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-24-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-18-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-18-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-29-close">{</span>
    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-25-close">{</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"walnut"</span><span class="token punctuation">,</span> <span class="token string">"lemon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-25-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Scan our array to see if any elements contain the "nut" substring</span>
    <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-26-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-21-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-19-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-19-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-20-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-20-open">)</span><span class="token punctuation">,</span> containsNut<span class="token punctuation brace-round brace-close brace-level-3" id="pair-21-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-26-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-23-close">(</span>found <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-22-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-22-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-23-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-27-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No nuts\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-27-open">}</span>
    <span class="token keyword keyword-else">else</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-28-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-28-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-29-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>Found walnut
</pre><p>If you were to write the above example by hand, you’d need at least three loops (one to loop through the array, and two to match the substring). The standard library functions allow us to do the same thing in just a few lines of code!</p><p class="cpp-section cpp-topline" style="clear:both"><a name="std_count"></a>Using std::count and std::count_if to count how many occurrences there are</p><p><a href="https://en.cppreference.com/w/cpp/algorithm/count"><code>std::count</code></a> and <code>std::count_if</code> search for all occurrences of an element or an element fulfilling a condition.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><p>In the following example, we’ll count how many elements contain the substring “nut”:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">containsNut</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-30-close">(</span>std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-round brace-close brace-level-1" id="pair-30-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-37-close">{</span>
	<span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-32-close">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-31-close">(</span><span class="token string">"nut"</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-31-open">)</span> <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos<span class="token punctuation brace-round brace-close brace-level-2" id="pair-32-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-37-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-33-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-33-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-40-close">{</span>
	std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-38-close">{</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"walnut"</span><span class="token punctuation">,</span> <span class="token string">"lemon"</span><span class="token punctuation">,</span> <span class="token string">"peanut"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-38-open">}</span><span class="token punctuation">;</span>

	<span class="token keyword keyword-auto">auto</span> nuts<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-39-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">count_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-36-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-34-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-34-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-35-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-35-open">)</span><span class="token punctuation">,</span> containsNut<span class="token punctuation brace-round brace-close brace-level-3" id="pair-36-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-39-open">}</span><span class="token punctuation">;</span>

	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Counted "</span> <span class="token operator">&lt;&lt;</span> nuts <span class="token operator">&lt;&lt;</span> <span class="token string">" nut(s)\n"</span><span class="token punctuation">;</span>

	<span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-40-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>Counted 2 nut(s)
</pre><p class="cpp-section cpp-topline" style="clear:both"><a name="std_sort"></a>Using std::sort to custom sort</p><p>We previously used <a href="https://en.cppreference.com/w/cpp/algorithm/sort"><code>std::sort</code></a> to sort an array in ascending order, but std::sort can do more than that. There’s a version of <code>std::sort</code> that takes a function as its third parameter that allows us to sort however we like. The function takes two parameters to compare, and returns true if the first argument should be ordered before the second. By default, <code>std::sort</code> sorts the elements in ascending order.</p><p>Let’s use <code>std::sort</code> to sort an array in reverse order using a custom comparison function named <code>greater</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">greater</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-41-close">(</span><span class="token keyword keyword-int">int</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> b<span class="token punctuation brace-round brace-close brace-level-1" id="pair-41-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-48-close">{</span>
    <span class="token comment">// Order @a before @b if @a is greater than @b.</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-42-close">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation brace-round brace-close brace-level-2" id="pair-42-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-48-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-43-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-43-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-51-close">{</span>
    std<span class="token double-colon punctuation">::</span>array arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-49-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-49-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Pass greater to std::sort</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-46-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-44-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-44-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-45-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-45-open">)</span><span class="token punctuation">,</span> greater<span class="token punctuation brace-round brace-close brace-level-2" id="pair-46-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-47-close">(</span><span class="token keyword keyword-int">int</span> i <span class="token operator">:</span> arr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-47-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-50-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-50-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-51-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>99 90 80 40 13 5
</pre><p>Once again, instead of writing our own custom loop functions, we can sort our array however we like in just a few lines of code!</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p>Our <code>greater</code> function needs 2 arguments, but we’re not passing it any, so where do they come from? When we use a function without parentheses (), it’s only a function pointer, not a call. You might remember this from when we tried to print a function without parentheses and <code>std::cout</code> printed “1”. <code>std::sort</code> uses this pointer and calls the actual <code>greater</code> function with any 2 elements of the array. We don’t know which elements <code>greater</code> will be called with, because it’s not defined which sorting algorithm <code>std::sort</code> is using under the hood. We talk more about function pointers in a later chapter.</p><div class="cpp-note cpp-lightbluebackground"><p class="cpp-note-title cpp-bottomline">Tip</p><p>Because sorting in descending order is so common, C++ provides a custom type (named <code>std::greater</code>) for that too (which is part of the <a href="https://en.cppreference.com/w/cpp/header/functional">functional</a> header). In the above example, we can replace:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-54-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-52-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-52-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-53-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-53-open">)</span><span class="token punctuation">,</span> greater<span class="token punctuation brace-round brace-close brace-level-1" id="pair-54-open">)</span><span class="token punctuation">;</span> <span class="token comment">// call our custom greater function</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>with:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-57-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-55-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-55-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-56-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-56-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>greater<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-61-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-61-open">}</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-57-open">)</span><span class="token punctuation">;</span> <span class="token comment">// use the standard library greater comparison</span>
<span class="token comment">// Before C++17, we had to specify the element type when we create std::greater</span>
std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-60-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-58-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-58-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-59-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-59-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>greater<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-62-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-62-open">}</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-60-open">)</span><span class="token punctuation">;</span> <span class="token comment">// use the standard library greater comparison</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that the <code>std::greater{}</code> needs the curly braces because it is not a callable function. It’s a type, and in order to use it, we need to instantiate an object of that type. The curly braces instantiate an anonymous object of that type (which then gets passed as an argument to std::sort).</p></div><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">For advanced readers</p><p>To further explain how <code>std::sort</code> uses the comparison function, we’ll have to take a step back to a modified version of the selection sort example from lesson <a href="https://www.learncpp.com/cpp-tutorial/sorting-an-array-using-selection-sort/">10.4 -- Sorting an array using selection sort</a>.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-63-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> begin<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token operator">*</span> end<span class="token punctuation brace-round brace-close brace-level-1" id="pair-63-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-81-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-64-close">(</span><span class="token keyword keyword-auto">auto</span> startElement<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-75-close">{</span> begin <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-75-open">}</span><span class="token punctuation">;</span> startElement <span class="token operator">!=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>startElement<span class="token punctuation brace-round brace-close brace-level-2" id="pair-64-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-80-close">{</span>
        <span class="token keyword keyword-auto">auto</span> smallestElement<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-76-close">{</span> startElement <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-76-open">}</span><span class="token punctuation">;</span>

        <span class="token comment">// std::next returns a pointer to the next element, just like (startElement + 1) would.</span>
        <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-66-close">(</span><span class="token keyword keyword-auto">auto</span> currentElement<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-77-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">next</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-65-close">(</span>startElement<span class="token punctuation brace-round brace-close brace-level-5" id="pair-65-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-77-open">}</span><span class="token punctuation">;</span> currentElement <span class="token operator">!=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>currentElement<span class="token punctuation brace-round brace-close brace-level-3" id="pair-66-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-79-close">{</span>
            <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-67-close">(</span><span class="token operator">*</span>currentElement <span class="token operator">&lt;</span> <span class="token operator">*</span>smallestElement<span class="token punctuation brace-round brace-close brace-level-4" id="pair-67-open">)</span>
            <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-78-close">{</span>
                smallestElement <span class="token operator">=</span> currentElement<span class="token punctuation">;</span>
            <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-78-open">}</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-79-open">}</span>

        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-68-close">(</span><span class="token operator">*</span>startElement<span class="token punctuation">,</span> <span class="token operator">*</span>smallestElement<span class="token punctuation brace-round brace-close brace-level-3" id="pair-68-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-80-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-81-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-69-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-69-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-84-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-74-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-74-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-82-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-82-open">}</span><span class="token punctuation">;</span>

    <span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-72-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-70-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-3" id="pair-70-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-71-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-3" id="pair-71-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-72-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-73-close">(</span><span class="token keyword keyword-auto">auto</span> i <span class="token operator">:</span> array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-73-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-83-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-83-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-84-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>So far, this is nothing new and <code>sort</code> always sorts elements from low to high. To add a comparison function, we have to use a new type, <code>std::function&lt;bool(int, int)&gt;</code>, to store a function that takes 2 int parameters and returns a bool. Treat this type as magic for now, we will explain it in <a href="https://www.learncpp.com#Chapter11">chapter 11</a>.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-void">void</span> <span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-86-close">(</span><span class="token keyword keyword-int">int</span> <span class="token operator">*</span>begin<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> <span class="token operator">*</span>end<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-bool">bool</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-85-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-85-open">)</span><span class="token operator">&gt;</span> compare<span class="token punctuation brace-round brace-close brace-level-1" id="pair-86-open">)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>We can now pass a comparison function like <code>greater</code> to <code>sort</code>, but how does <code>sort</code> use it? All we need to do is replace the line</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-87-close">(</span><span class="token operator">*</span>currentElement <span class="token operator">&lt;</span> <span class="token operator">*</span>smallestElement<span class="token punctuation brace-round brace-close brace-level-1" id="pair-87-open">)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>with</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-89-close">(</span><span class="token function">compare</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-88-close">(</span><span class="token operator">*</span>currentElement<span class="token punctuation">,</span> <span class="token operator">*</span>smallestElement<span class="token punctuation brace-round brace-close brace-level-2" id="pair-88-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-89-open">)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Now the caller of <code>sort</code> can choose how to compare two elements.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span> <span class="token comment">// std::function</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iterator&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span></span>

<span class="token comment">// sort accepts a comparison function</span>
<span class="token keyword keyword-void">void</span> <span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-91-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> begin<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token operator">*</span> end<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-bool">bool</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-90-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-90-open">)</span><span class="token operator">&gt;</span> compare<span class="token punctuation brace-round brace-close brace-level-1" id="pair-91-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-110-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-92-close">(</span><span class="token keyword keyword-auto">auto</span> startElement<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-104-close">{</span> begin <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-104-open">}</span><span class="token punctuation">;</span> startElement <span class="token operator">!=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>startElement<span class="token punctuation brace-round brace-close brace-level-2" id="pair-92-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-109-close">{</span>
        <span class="token keyword keyword-auto">auto</span> smallestElement<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-105-close">{</span> startElement <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-105-open">}</span><span class="token punctuation">;</span>

        <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-94-close">(</span><span class="token keyword keyword-auto">auto</span> currentElement<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-106-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">next</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-93-close">(</span>startElement<span class="token punctuation brace-round brace-close brace-level-5" id="pair-93-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-106-open">}</span><span class="token punctuation">;</span> currentElement <span class="token operator">!=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>currentElement<span class="token punctuation brace-round brace-close brace-level-3" id="pair-94-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-108-close">{</span>
            <span class="token comment">// the comparison function is used to check if the current element should be ordered</span>
            <span class="token comment">// before the currently "smallest" element.</span>
            <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-96-close">(</span><span class="token function">compare</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-95-close">(</span><span class="token operator">*</span>currentElement<span class="token punctuation">,</span> <span class="token operator">*</span>smallestElement<span class="token punctuation brace-round brace-close brace-level-5" id="pair-95-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-96-open">)</span>
            <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-107-close">{</span>
                smallestElement <span class="token operator">=</span> currentElement<span class="token punctuation">;</span>
            <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-107-open">}</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-108-open">}</span>

        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-97-close">(</span><span class="token operator">*</span>startElement<span class="token punctuation">,</span> <span class="token operator">*</span>smallestElement<span class="token punctuation brace-round brace-close brace-level-3" id="pair-97-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-109-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-110-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-98-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-98-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-114-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-103-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-103-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-111-close">{</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-111-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// use std::greater to sort in descending order</span>
    <span class="token comment">// (We have to use the global namespace selector to prevent a collision</span>
    <span class="token comment">// between our sort function and std::sort.)</span>
    <span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-101-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-99-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-3" id="pair-99-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-100-close">(</span>array<span class="token punctuation brace-round brace-close brace-level-3" id="pair-100-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>greater<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-112-close">{</span><span class="token punctuation brace-curly brace-close brace-level-3" id="pair-112-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-101-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-102-close">(</span><span class="token keyword keyword-auto">auto</span> i <span class="token operator">:</span> array<span class="token punctuation brace-round brace-close brace-level-2" id="pair-102-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-113-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-113-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-114-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p class="cpp-section cpp-topline" style="clear:both"><a name="std_for_each"></a>Using std::for_each to do something to all elements of a container</p><p><a href="https://en.cppreference.com/w/cpp/algorithm/for_each"><code>std::for_each</code></a> takes a list as input and applies a custom function to every element. This is useful when we want to perform the same operation to every element in a list.</p><p>Here’s an example where we use <code>std::for_each</code> to double all the numbers in an array:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">doubleNumber</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-115-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">&amp;</span> i<span class="token punctuation brace-round brace-close brace-level-1" id="pair-115-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-121-close">{</span>
    i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-121-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-116-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-116-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-124-close">{</span>
    std<span class="token double-colon punctuation">::</span>array arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-122-close">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-122-open">}</span><span class="token punctuation">;</span>

    std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-119-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-117-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-117-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-118-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-118-open">)</span><span class="token punctuation">,</span> doubleNumber<span class="token punctuation brace-round brace-close brace-level-2" id="pair-119-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-120-close">(</span><span class="token keyword keyword-int">int</span> i <span class="token operator">:</span> arr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-120-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-123-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-123-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-124-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><pre>2 4 6 8
</pre><p>This often seems like the most unnecessary algorithm to new developers, because equivalent code with a range-based for-loop is shorter and easier. But there are benefits to <code>std::for_each</code>. Let’s compare <code>std::for_each</code> to a range-based for-loop.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>ranges<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-125-close">(</span>arr<span class="token punctuation">,</span> doubleNumber<span class="token punctuation brace-round brace-close brace-level-1" id="pair-125-open">)</span><span class="token punctuation">;</span> <span class="token comment">// Since C++20, we don't have to use begin() and end().</span>
<span class="token comment">// std::for_each(arr.begin(), arr.end(), doubleNumber); // Before C++20</span>

<span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-126-close">(</span><span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> arr<span class="token punctuation brace-round brace-close brace-level-1" id="pair-126-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-128-close">{</span>
    <span class="token function">doubleNumber</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-127-close">(</span>i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-127-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-128-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>With <code>std::for_each</code>, our intentions are clear. Call <code>doubleNumber</code> with each element of <code>arr</code>. In the range-based for-loop, we have to add a new variable, <code>i</code>. This leads to several mistakes that a programmer could do when they’re tired or not paying attention. For one, there could be an implicit conversion if we don’t use <code>auto</code>. We could forget the ampersand, and <code>doubleNumber</code> wouldn’t affect the array. We could accidentally pass a variable other than <code>i</code> to <code>doubleNumber</code>. These mistakes cannot happen with <code>std::for_each</code>.</p><p>Additionally, <code>std::for_each</code> can skip elements at the beginning or end of a container, for example to skip the first element of <code>arr</code>, <a href="https://en.cppreference.com/w/cpp/iterator/next"><code>std::next</code></a> can be used to advance begin to the next element.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-132-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">next</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-130-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-129-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-129-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-130-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-131-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-131-open">)</span><span class="token punctuation">,</span> doubleNumber<span class="token punctuation brace-round brace-close brace-level-1" id="pair-132-open">)</span><span class="token punctuation">;</span>
<span class="token comment">// Now arr is [1, 4, 6, 8]. The first element wasn't doubled.</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This isn’t possible with a range-based for-loop.</p><p>Like many algorithms, <code>std::for_each</code> can be parallelized to achieve faster processing, making it better suited for large projects and big data than a range-based for-loop.</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">var asau='8992865211';var cid='2886929358';var pid='ca-pub-0588844875925051';var slotId='div-gpt-ad-learncpp_com-large-leaderboard-2-0';var ffid=1;var alS=1036%1000;var container=document.getElementById(slotId);var ins=document.createElement('ins');ins.id=slotId+'-asloaded';ins.className='adsbygoogle ezasloaded';ins.dataset.adClient=pid;ins.dataset.adSlot=asau;ins.dataset.adChannel=cid;ins.dataset.fullWidthResponsive='true';ins.style.display='block';if(ffid!==2){ins.style.width=container.offsetWidth+'px';}else{container.attributes.ezaw.value+'px';}
if(alS>=30&&(alS!=34&&alS!=35)){ins.dataset.adFormat='auto';}else{ins.style.height=container.attributes.ezah.value+'px';}
container.appendChild(ins);(adsbygoogle=window.adsbygoogle||[]).push({});window.ezoSTPixelAdd(slotId,'stat_source_id',44);window.ezoSTPixelAdd(slotId,'adsensetype',2);var lo=new MutationObserver(window.ezaslEvent);lo.observe(document.getElementById(slotId+'-asloaded'),{attributes:true});</script><ins id="div-gpt-ad-learncpp_com-large-leaderboard-2-0-asloaded" class="adsbygoogle ezasloaded" data-ad-client="ca-pub-0588844875925051" data-ad-slot="8992865211" data-ad-channel="2886929358" data-full-width-responsive="true" data-ad-format="auto" style="display: block; width: 970px; height: 280px;" data-adsbygoogle-status="done"><ins id="aswift_0_expand" style="border: none; height: 280px; width: 970px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: inline-table;"><ins id="aswift_0_anchor" style="border: none; height: 280px; width: 970px; margin: 0px; padding: 0px; position: relative; visibility: visible; background-color: transparent; display: block;"></ins></ins></ins></span></span></div></div><p class="cpp-section cpp-topline" style="clear:both">Order of execution</p><p>Note that most of the algorithms in the algorithms library do not guarantee a particular order of execution. For such algorithms, take care to ensure any functions you pass in do not assume a particular ordering, as the order of invocation may not be the same on every compiler.</p><p>The following algorithms do guarantee sequential execution: <code>std::for_each</code>, <code>std::copy</code>, <code>std::copy_backward</code>, <code>std::move</code>, and <code>std::move_backward</code>.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Unless otherwise specified, do not assume that standard library algorithms will execute in a particular sequence. <code>std::for_each</code>, <code>std::copy</code>, <code>std::copy_backward</code>, <code>std::move</code>, and <code>std::move_backward</code> have sequential guarantees.</p></div><p></p><p class="cpp-section cpp-topline" style="clear:both">Ranges in C++20</p><p>Having to explicitly pass <code>arr.begin()</code> and <code>arr.end()</code> to every algorithm is a bit annoying. But fear not -- C++20 adds <em>ranges</em>, which allow us to simply pass <code>arr</code>. This will make our code even shorter and more readable.</p><p class="cpp-section cpp-topline" style="clear:both">Conclusion</p><p>The algorithms library has a ton of useful functionality that can make your code simpler and more robust. We only cover a small subset in this lesson, but because most of these functions work very similarly, once you know how a few work, you can make use of most of them.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Favor using functions from the algorithms library over writing your own functionality to do the same thing</p></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/chapter-10-comprehensive-quiz/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.x</span>Chapter 10 comprehensive quiz</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/introduction-to-iterators/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.18</span>Introduction to iterators</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/introduction-to-standard-library-algorithms/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/introduction-to-iterators/" rel="prev"><span>10.18 — Introduction to iterators</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/introduction-to-lambdas-anonymous-functions/" rel="next"><span>11.7 — Introduction to lambdas (anonymous functions)</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="145"><span class="wpdtc" title="145">145</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CLaCuaua-PYCFcmBlgodRcQKoQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=0e68fba3-17a0-40f4-5815-243c5dc19462&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/1543292722871736&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/introduction-to-standard-library-algorithms/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CLeCuaua-PYCFcmBlgodRcQKoQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=0e68fba3-17a0-40f4-5815-243c5dc19462&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/6863717806852645&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/introduction-to-standard-library-algorithms/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>