<main id="main" role="main" class="main"><article id="post-2399" class="post-2399 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">10.12 — Dynamically allocating arrays</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2015-08-18T13:52:55-07:00" itemprop="datePublished">August 18, 2015, 1:52 pm</time>
<time class="updated" datetime="2022-01-18T10:38:38-08:00" itemprop="dateModified">January 18, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><div id="ezoic-pub-ad-placeholder-101"></div><script async="" src="https://www.learncpp.com/ezossp/unknown/pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?screx=1&amp;sxcb=2a" type="text/ez-screx"></script><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-0588844875925051" data-ad-slot="7945645163"></ins><script type="text/ez-screx">(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div><p>In addition to dynamically allocating single values, we can also dynamically allocate arrays of variables. Unlike a fixed array, where the array size must be fixed at compile time, dynamically allocating an array allows us to choose an array length at runtime.</p><p>To allocate an array dynamically, we use the array form of new and delete (often called new[] and delete[]):</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-7-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter a positive integer: "</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> length<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-4-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-4-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> length<span class="token punctuation">;</span>

    <span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-6-close">{</span> <span class="token keyword keyword-new">new</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-square brace-open brace-level-3" id="pair-1-close">[</span>length<span class="token punctuation brace-square brace-close brace-level-3" id="pair-1-open">]</span><span class="token punctuation brace-curly brace-open brace-level-3" id="pair-5-close">{</span><span class="token punctuation brace-curly brace-close brace-level-3" id="pair-5-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-6-open">}</span><span class="token punctuation">;</span> <span class="token comment">// use array new.  Note that length does not need to be constant!</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I just allocated an array of integers of length "</span> <span class="token operator">&lt;&lt;</span> length <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-2-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-2-open">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// set element 0 to value 5</span>

    <span class="token keyword keyword-delete">delete</span><span class="token punctuation brace-square brace-open brace-level-2" id="pair-3-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-3-open">]</span> array<span class="token punctuation">;</span> <span class="token comment">// use array delete to deallocate array</span>

    <span class="token comment">// we don't need to set array to nullptr/0 here because it's going to go out of scope immediately after this anyway</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-7-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Because we are allocating an array, C++ knows that it should use the array version of new instead of the scalar version of new. Essentially, the new[] operator is called, even though the [] isn’t placed next to the new keyword.</p><p>The length of dynamically allocated arrays has to be a type that’s convertible to <code>std::size_t</code>. In practice, using an <code>int</code> length is fine, since <code>int</code> will convert to <code>std::size_t</code>.</p><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">Author’s note</p><p>Some might argue that because array new expects a length of type <code>size_t</code>, our lengths (e.g. such as <code>length</code> in the example above) should either be of type <code>size_t</code> or converted to a <code>size_t</code> via <code>static_cast</code>.</p><p>I find this argument uncompelling for a number of reasons. First, it contradicts the best practice to use signed integers over unsigned ones. Second, when creating dynamic arrays using an integral length, it’s convention to do something like this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-double">double</span><span class="token operator">*</span> ptr <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-9-close">{</span> <span class="token keyword keyword-new">new</span> <span class="token keyword keyword-double">double</span><span class="token punctuation brace-square brace-open brace-level-2" id="pair-8-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-8-open">]</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-9-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><code>5</code> is an <code>int</code> literal, so we get an implicit conversion to <code>size_t</code>. Prior to C++23, there is no way to create a <code>size_t</code> literal without using <code>static_cast</code>! If the designers of C++ had intended us to strictly use <code>size_t</code> types here, they would have provided a way to create literals of type <code>size_t</code>.</p><p>The most common counterargument is that some pedantic compiler might flag this as a signed/unsigned conversion error (since we always treat warnings as errors). However, it’s worth noting that GCC does not flag this as a signed/unsigned conversion error even when such warnings (-Wconversion) are enabled.</p><p>While there is nothing wrong with using <code>size_t</code> as the length of a dynamically allocated array, in this tutorial series, we will not be pedantic about requiring it.</p></div><p>Note that because this memory is allocated from a different place than the memory used for fixed arrays, the size of the array can be quite large. You can run the program above and allocate an array of length 1,000,000 (or probably even 100,000,000) without issue. Try it! Because of this, programs that need to allocate a lot of memory in C++ typically do so dynamically.</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-130"></div></div></div><p class="cpp-section cpp-topline" style="clear:both">Dynamically deleting arrays</p><p>When deleting a dynamically allocated array, we have to use the array version of delete, which is delete[].</p><p>This tells the CPU that it needs to clean up multiple variables instead of a single variable. One of the most common mistakes that new programmers make when dealing with dynamic memory allocation is to use delete instead of delete[] when deleting a dynamically allocated array. Using the scalar version of delete on an array will result in undefined behavior, such as data corruption, memory leaks, crashes, or other problems.</p><p>One often asked question of array delete[] is, “How does array delete know how much memory to delete?” The answer is that array new[] keeps track of how much memory was allocated to a variable, so that array delete[] can delete the proper amount. Unfortunately, this size/length isn’t accessible to the programmer.</p><p class="cpp-section cpp-topline" style="clear:both">Dynamic arrays are almost identical to fixed arrays</p><p>In lesson <a href="https://www.learncpp.com/cpp-tutorial/pointers-and-arrays/">10.8 -- Pointers and arrays</a>, you learned that a fixed array holds the memory address of the first array element. You also learned that a fixed array can decay into a pointer that points to the first element of the array. In this decayed form, the length of the fixed array is not available (and therefore neither is the size of the array via sizeof()), but otherwise there is little difference.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-108"></div></div></div><p>A dynamic array starts its life as a pointer that points to the first element of the array. Consequently, it has the same limitations in that it doesn’t know its length or size. A dynamic array functions identically to a decayed fixed array, with the exception that the programmer is responsible for deallocating the dynamic array via the delete[] keyword.</p><p class="cpp-section cpp-topline" style="clear:both">Initializing dynamically allocated arrays</p><p>If you want to initialize a dynamically allocated array to 0, the syntax is quite simple:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-12-close">{</span> <span class="token keyword keyword-new">new</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-square brace-open brace-level-2" id="pair-10-close">[</span>length<span class="token punctuation brace-square brace-close brace-level-2" id="pair-10-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-11-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-11-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-12-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Prior to C++11, there was no easy way to initialize a dynamic array to a non-zero value (initializer lists only worked for fixed arrays). This means you had to loop through the array and assign element values explicitly.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array <span class="token operator">=</span> <span class="token keyword keyword-new">new</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-square brace-open brace-level-1" id="pair-13-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-13-open">]</span><span class="token punctuation">;</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-14-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-14-open">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-15-close">[</span><span class="token number">1</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-15-open">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-16-close">[</span><span class="token number">2</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-16-open">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-17-close">[</span><span class="token number">3</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-17-open">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
array<span class="token punctuation brace-square brace-open brace-level-1" id="pair-18-close">[</span><span class="token number">4</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-18-open">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Super annoying!</p><p>However, starting with C++11, it’s now possible to initialize dynamic arrays using initializer lists!</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-124"></div></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> fixedArray<span class="token punctuation brace-square brace-open brace-level-1" id="pair-19-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-19-open">]</span> <span class="token operator">=</span> <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-22-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-22-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize a fixed array before C++11</span>
<span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-24-close">{</span> <span class="token keyword keyword-new">new</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-square brace-open brace-level-2" id="pair-20-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-20-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-23-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-23-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-24-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize a dynamic array since C++11</span>
<span class="token comment">// To prevent writing the type twice, we can use auto. This is often done for types with long names.</span>
<span class="token keyword keyword-auto">auto</span><span class="token operator">*</span> array<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-26-close">{</span> <span class="token keyword keyword-new">new</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-square brace-open brace-level-2" id="pair-21-close">[</span><span class="token number">5</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-21-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-25-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-25-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-26-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that this syntax has no operator= between the array length and the initializer list.</p><p>For consistency, fixed arrays can also be initialized using uniform initialization:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> fixedArray<span class="token punctuation brace-square brace-open brace-level-1" id="pair-27-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-27-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-29-close">{</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-29-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize a fixed array in C++11</span>
<span class="token keyword keyword-char">char</span> fixedArray<span class="token punctuation brace-square brace-open brace-level-1" id="pair-28-close">[</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-28-open">]</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-30-close">{</span> <span class="token string">"Hello, world!"</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-30-open">}</span><span class="token punctuation">;</span> <span class="token comment">// initialize a fixed array in C++11</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Explicitly stating the size of the array is optional.</p><p class="cpp-section cpp-topline" style="clear:both">Resizing arrays</p><p>Dynamically allocating an array allows you to set the array length at the time of allocation. However, C++ does not provide a built-in way to resize an array that has already been allocated. It is possible to work around this limitation by dynamically allocating a new array, copying the elements over, and deleting the old array. However, this is error prone, especially when the element type is a class (which have special rules governing how they are created).</p><p>Consequently, we recommend avoiding doing this yourself.</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-120"></div></div></div><p>Fortunately, if you need this capability, C++ provides a resizable array as part of the standard library called std::vector. We’ll introduce std::vector shortly.</p><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>Write a program that:</p><ul><li>Asks the user how many names they wish to enter.</li><li>Dynamically allocates a <code>std::string</code> array.</li><li>Asks the user to enter each name.</li><li>Calls <code>std::sort</code> to sort the names (See <a href="https://www.learncpp.com/cpp-tutorial/sorting-an-array-using-selection-sort/#stdsort">10.4 -- Sorting an array using selection sort</a> and <a href="https://www.learncpp.com/cpp-tutorial/pointer-arithmetic-and-array-indexing/">10.9 -- Pointer arithmetic and array indexing</a>)</li><li>Prints the sorted list of names.</li></ul><p><code>std::string</code> supports comparing strings via the comparison operators &lt; and &gt;. You don’t need to implement string comparison by hand.</p><p>Your output should match this:</p><pre>How many names would you like to enter? 5
Enter name #1: Jason
Enter name #2: Mark
Enter name #3: Alex
Enter name #4: Chris
Enter name #5: John

Here is your sorted list:
Name #1: Alex
Name #2: Chris
Name #3: Jason
Name #4: John
Name #5: Mark
</pre><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">A reminder</p><p>You can use <code>std::getline()</code> to read in names that contain spaces (see lesson <a href="https://www.learncpp.com/cpp-tutorial/an-introduction-to-stdstring/">4.13 -- An introduction to std::string</a>).</p></div><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">A reminder</p><p>To use <code>std::sort()</code> with a pointer to an array, calculate begin and end manually</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-31-close">(</span>array<span class="token punctuation">,</span> array <span class="token operator">+</span> arrayLength<span class="token punctuation brace-round brace-close brace-level-1" id="pair-31-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::sort</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">getNameCount</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-32-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-32-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-48-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"How many names would you like to enter? "</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> length<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-47-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-47-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> length<span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> length<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-48-open">}</span>

<span class="token comment">// Asks user to enter all the names</span>
<span class="token keyword keyword-void">void</span> <span class="token function">getNames</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-33-close">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> names<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> length<span class="token punctuation brace-round brace-close brace-level-1" id="pair-33-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-51-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-34-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-49-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-49-open">}</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-34-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-50-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter name #"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">getline</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-35-close">(</span>std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> std<span class="token double-colon punctuation">::</span>ws<span class="token punctuation">,</span> names<span class="token punctuation brace-square brace-open brace-level-4" id="pair-43-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-4" id="pair-43-open">]</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-35-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-50-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-51-open">}</span>

<span class="token comment">// Prints the sorted names</span>
<span class="token keyword keyword-void">void</span> <span class="token function">printNames</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-36-close">(</span>std<span class="token double-colon punctuation">::</span>string<span class="token operator">*</span> names<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> length<span class="token punctuation brace-round brace-close brace-level-1" id="pair-36-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-53-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"\nHere is your sorted list:\n"</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-37-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-52-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-52-open">}</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-37-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Name #"</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> names<span class="token punctuation brace-square brace-open brace-level-2" id="pair-44-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-2" id="pair-44-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-53-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-38-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-38-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-57-close">{</span>
    <span class="token keyword keyword-int">int</span> length<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-54-close">{</span> <span class="token function">getNameCount</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-39-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-39-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-54-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Allocate an array to hold the names</span>
    <span class="token keyword keyword-auto">auto</span><span class="token operator">*</span> names<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-56-close">{</span> <span class="token keyword keyword-new">new</span> std<span class="token double-colon punctuation">::</span>string<span class="token punctuation brace-square brace-open brace-level-3" id="pair-45-close">[</span>length<span class="token punctuation brace-square brace-close brace-level-3" id="pair-45-open">]</span><span class="token punctuation brace-curly brace-open brace-level-3" id="pair-55-close">{</span><span class="token punctuation brace-curly brace-close brace-level-3" id="pair-55-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-56-open">}</span><span class="token punctuation">;</span>

    <span class="token function">getNames</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-40-close">(</span>names<span class="token punctuation">,</span> length<span class="token punctuation brace-round brace-close brace-level-2" id="pair-40-open">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Sort the array</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-41-close">(</span>names<span class="token punctuation">,</span> names <span class="token operator">+</span> length<span class="token punctuation brace-round brace-close brace-level-2" id="pair-41-open">)</span><span class="token punctuation">;</span>

    <span class="token function">printNames</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-42-close">(</span>names<span class="token punctuation">,</span> length<span class="token punctuation brace-round brace-close brace-level-2" id="pair-42-open">)</span><span class="token punctuation">;</span>

    <span class="token comment">// don't forget to use array delete</span>
    <span class="token keyword keyword-delete">delete</span><span class="token punctuation brace-square brace-open brace-level-2" id="pair-46-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-46-open">]</span> names<span class="token punctuation">;</span>
    <span class="token comment">// we don't need to set names to nullptr/0 here because it's going to go out</span>
    <span class="token comment">// of scope immediately after this anyway.</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-57-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/for-each-loops/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.13</span>For-each loops</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/dynamic-memory-allocation-with-new-and-delete/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.11</span>Dynamic memory allocation with new and delete</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-106"></div><script async="" src="https://www.learncpp.com/ezossp/unknown/pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?screx=1&amp;sxcb=2a" type="text/ez-screx"></script><ins class="adsbygoogle" style="display:inline-block;width:336px;height:280px" data-ad-client="ca-pub-0588844875925051" data-ad-slot="8689484849"></ins><script type="text/ez-screx">(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/dynamically-allocating-arrays/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/c-style-string-symbolic-constants/" rel="prev"><span>10.10 — C-style string symbolic constants</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/bit-manipulation-with-bitwise-operators-and-bit-masks/" rel="next"><span>O.3 — Bit manipulation with bitwise operators and bit masks</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="789"><span class="wpdtc" title="789">789</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><div id="ezoic-pub-ad-placeholder-103"></div><script async="" src="https://www.learncpp.com/ezossp/unknown/pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?screx=1&amp;sxcb=2a" type="text/ez-screx"></script><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-0588844875925051" data-ad-slot="6408671241"></ins><script type="text/ez-screx">(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><div id="ezoic-pub-ad-placeholder-102"></div></div><script async="" src="https://www.learncpp.com/ezossp/unknown/pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?screx=1&amp;sxcb=2a" type="text/ez-screx"></script><ins class="adsbygoogle" style="display:inline-block;width:160px;height:600px" data-ad-client="ca-pub-0588844875925051" data-ad-slot="1425558446"></ins><script type="text/ez-screx">(adsbygoogle=window.adsbygoogle||[]).push({});</script></div></div></section></aside>