<main id="main" role="main" class="main"><article id="post-9369" class="post-9369 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">11.8 — Lambda captures</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/nascardriver/" title="View all posts by nascardriver" itemprop="url"><em itemprop="name">nascardriver</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2020-01-03T05:19:38-08:00" itemprop="datePublished">January 3, 2020, 5:19 am</time>
<time class="updated" datetime="2022-03-29T09:25:41-07:00" itemprop="dateModified">March 29, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CJXl6fCb-PYCFRellgodWaEIdg"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p><br></p><p class="cpp-section">Capture clauses and capture by value</p><p>In the previous lesson (<a href="https://www.learncpp.com/cpp-tutorial/introduction-to-lambdas-anonymous-functions/">11.7 -- Introduction to lambdas (anonymous functions)</a>), we introduced this example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-15-close">{</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-10-close">{</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"walnut"</span><span class="token punctuation">,</span> <span class="token string">"lemon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-10-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-12-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-6-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-1-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-1-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-2-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-2-open">)</span><span class="token punctuation">,</span>
                           <span class="token punctuation brace-square brace-open brace-level-4" id="pair-9-close">[</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-9-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-3-close">(</span>std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-round brace-close brace-level-4" id="pair-3-open">)</span>
                           <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-11-close">{</span>
                             <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-5-close">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-6" id="pair-4-close">(</span><span class="token string">"nut"</span><span class="token punctuation brace-round brace-close brace-level-6" id="pair-4-open">)</span> <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos<span class="token punctuation brace-round brace-close brace-level-5" id="pair-5-open">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-11-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-6-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-12-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-8-close">(</span>found <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-7-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-7-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-8-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-13-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No nuts\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-13-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-14-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-14-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-15-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Now, let’s modify the nut example and let the user pick a substring to search for. This isn’t as intuitive as you might expect.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-16-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-16-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-32-close">{</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-26-close">{</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"walnut"</span><span class="token punctuation">,</span> <span class="token string">"lemon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-26-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Ask the user what to search for.</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"search for: "</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>string search<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-27-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-27-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> search<span class="token punctuation">;</span>

  <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-29-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-22-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-17-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-17-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-18-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-18-open">)</span><span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-4" id="pair-25-close">[</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-25-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-19-close">(</span>std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-round brace-close brace-level-4" id="pair-19-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-28-close">{</span>
    <span class="token comment">// Search for @search rather than "nut".</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-21-close">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-6" id="pair-20-close">(</span>search<span class="token punctuation brace-round brace-close brace-level-6" id="pair-20-open">)</span> <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos<span class="token punctuation brace-round brace-close brace-level-5" id="pair-21-open">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: search not accessible in this scope</span>
  <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-28-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-22-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-29-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-24-close">(</span>found <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-23-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-23-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-24-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-30-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not found\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-30-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-31-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-31-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-32-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This code won’t compile. Unlike nested blocks, where any identifier defined in an outer block is accessible in the scope of the nested block, lambdas can only access specific kinds of identifiers: global identifiers, entities that are known at compile time, and entities with static storage duration. <code>search</code> fulfills none of these requirements, so the lambda can’t see it. That’s what the capture clause is there for.</p><p class="cpp-section cpp-topline" style="clear:both">The capture clause</p><p>The <span class="cpp-definition">capture clause</span> is used to (indirectly) give a lambda access to variables available in the surrounding scope that it normally would not have access to. All we need to do is list the entities we want to access from within the lambda as part of the capture clause. In this case, we want to give our lambda access to the value of variable <code>search</code>, so we add it to the capture clause:</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-33-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-33-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-49-close">{</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-43-close">{</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"walnut"</span><span class="token punctuation">,</span> <span class="token string">"lemon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-43-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"search for: "</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>string search<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-44-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-44-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> search<span class="token punctuation">;</span>

  <span class="token comment">// Capture @search                                vvvvvv</span>
  <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-46-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-39-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-34-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-34-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-35-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-35-open">)</span><span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-4" id="pair-42-close">[</span>search<span class="token punctuation brace-square brace-close brace-level-4" id="pair-42-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-36-close">(</span>std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-round brace-close brace-level-4" id="pair-36-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-45-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-38-close">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-6" id="pair-37-close">(</span>search<span class="token punctuation brace-round brace-close brace-level-6" id="pair-37-open">)</span> <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos<span class="token punctuation brace-round brace-close brace-level-5" id="pair-38-open">)</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-45-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-39-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-46-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-41-close">(</span>found <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-40-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-40-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-41-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-47-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Not found\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-47-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-48-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-48-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-49-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The user can now search for an element of our array.</p><p>Output</p><pre>search for: nana
Found banana
</pre><p class="cpp-section cpp-topline" style="clear:both">So how do captures actually work?</p><p>While it might look like our lambda in the example above is directly accessing the value of <code>main</code>‘s <code>search</code> variable, this is not the case. Lambdas might look like nested blocks, but they work slightly differently (and the distinction is important).</p><p>When a lambda definition is executed, for each variable that the lambda captures, a clone of that variable is made (with an identical name) inside the lambda. These cloned variables are initialized from the outer scope variables of the same name at this point.</p><p>Thus, in the above example, when the lambda object is created, the lambda gets its own cloned variable named <code>search</code>. This cloned <code>search</code> has the same value as <code>main</code>‘s <code>search</code>, so it behaves like we’re accessing <code>main</code>‘s <code>search</code>, but we’re not.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><p>While these cloned variables have the same name, they don’t necessarily have the same type as the original variable. We’ll explore this in the upcoming sections of this lesson.</p><div class="cpp-note cpp-lightbluebackground"><p class="cpp-note-title cpp-bottomline">Key insight</p><p>The captured variables of a lambda are <em>clones</em> of the outer scope variables, not the actual variables.</p></div><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">For advanced readers</p><p>Although lambdas look like functions, they’re actually objects that can be called like functions (these are called <span class="cpp-definition">functors</span> -- we’ll discuss how to create your own functors from scratch in a future lesson).</p><p>When the compiler encounters a lambda definition, it creates a custom object definition for the lambda. Each captured variable becomes a data member of the object.</p><p>At runtime, when the lambda definition is encountered, the lambda object is instantiated, and the members of the lambda are initialized at that point.</p></div><p class="cpp-section cpp-topline" style="clear:both">Captures default to const value</p><p>By default, variables are captured by <code>const value</code>. This means when the lambda is created, the lambda captures a constant copy of the outer scope variable, which means that the lambda is not allowed to modify them. In the following example, we capture the variable <code>ammo</code> and try to decrement it.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-50-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-50-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-57-close">{</span>
  <span class="token keyword keyword-int">int</span> ammo<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-54-close">{</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-54-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Define a lambda and store it in a variable called "shoot".</span>
  <span class="token keyword keyword-auto">auto</span> shoot<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-56-close">{</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-53-close">[</span>ammo<span class="token punctuation brace-square brace-close brace-level-3" id="pair-53-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-51-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-51-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-55-close">{</span>
      <span class="token comment">// Illegal, ammo was captured as a const copy.</span>
      <span class="token operator">--</span>ammo<span class="token punctuation">;</span>

      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Pew! "</span> <span class="token operator">&lt;&lt;</span> ammo <span class="token operator">&lt;&lt;</span> <span class="token string">" shot(s) left.\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-55-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-56-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Call the lambda</span>
  <span class="token function">shoot</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-52-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-52-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ammo <span class="token operator">&lt;&lt;</span> <span class="token string">" shot(s) left\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-57-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In the above example, when we capture <code>ammo</code>, a new <code>const</code> variable with the same name and value is created in the lambda. We can’t modify it, because it is <code>const</code>, which causes a compile error.</p><p class="cpp-section cpp-topline" style="clear:both">Mutable capture by value</p><p>To allow modifications of variables that were captured by value, we can mark the lambda as <code>mutable</code>. The <span class="cpp-definition">mutable</span> keyword in this context removes the <code>const</code> qualification from <em>all</em> variables captured by value.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-58-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-58-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-66-close">{</span>
  <span class="token keyword keyword-int">int</span> ammo<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-63-close">{</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-63-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-auto">auto</span> shoot<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-65-close">{</span>
    <span class="token comment">// Added mutable after the parameter list.</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-62-close">[</span>ammo<span class="token punctuation brace-square brace-close brace-level-3" id="pair-62-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-59-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-59-open">)</span> <span class="token keyword keyword-mutable">mutable</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-64-close">{</span>
      <span class="token comment">// We're allowed to modify ammo now</span>
      <span class="token operator">--</span>ammo<span class="token punctuation">;</span>

      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Pew! "</span> <span class="token operator">&lt;&lt;</span> ammo <span class="token operator">&lt;&lt;</span> <span class="token string">" shot(s) left.\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-64-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-65-open">}</span><span class="token punctuation">;</span>

  <span class="token function">shoot</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-60-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-60-open">)</span><span class="token punctuation">;</span>
  <span class="token function">shoot</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-61-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-61-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ammo <span class="token operator">&lt;&lt;</span> <span class="token string">" shot(s) left\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-66-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output:</p><pre>Pew! 9 shot(s) left.
Pew! 8 shot(s) left.
10 shot(s) left
</pre><p>While this now compiles, there’s still a logic error. What happened? When the lambda was called, the lambda captured a <em>copy</em> of <code>ammo</code>. When the lambda decremented <code>ammo</code> from <code>10</code> to <code>9</code> to <code>8</code>, it decremented its own copy, not the original value.</p><p>Note that the value of <code>ammo</code> is preserved across calls to the lambda!</p><div class="cpp-note cpp-lightredbackground"><p class="cpp-note-title cpp-bottomline">Warning</p><p>Because captured variables are members of the lambda object, their values are persisted across multiple calls to the lambda!</p></div><p class="cpp-section cpp-topline" style="clear:both">Capture by reference</p><p>Much like functions can change the value of arguments passed by reference, we can also capture variables by reference to allow our lambda to affect the value of the argument.</p><p>To capture a variable by reference, we prepend an ampersand (<code>&amp;</code>) to the variable name in the capture. Unlike variables that are captured by value, variables that are captured by reference are non-const, unless the variable they’re capturing is <code>const</code>. Capture by reference should be preferred over capture by value whenever you would normally prefer passing an argument to a function by reference (e.g. for non-fundamental types).</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><p>Here’s the above code with <code>ammo</code> captured by reference:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-67-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-67-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-74-close">{</span>
  <span class="token keyword keyword-int">int</span> ammo<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-71-close">{</span> <span class="token number">10</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-71-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-auto">auto</span> shoot<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-73-close">{</span>
    <span class="token comment">// We don't need mutable anymore</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-70-close">[</span><span class="token operator">&amp;</span>ammo<span class="token punctuation brace-square brace-close brace-level-3" id="pair-70-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-68-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-68-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-72-close">{</span> <span class="token comment">// &amp;ammo means ammo is captured by reference</span>
      <span class="token comment">// Changes to ammo will affect main's ammo</span>
      <span class="token operator">--</span>ammo<span class="token punctuation">;</span>

      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Pew! "</span> <span class="token operator">&lt;&lt;</span> ammo <span class="token operator">&lt;&lt;</span> <span class="token string">" shot(s) left.\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-72-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-73-open">}</span><span class="token punctuation">;</span>

  <span class="token function">shoot</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-69-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-69-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> ammo <span class="token operator">&lt;&lt;</span> <span class="token string">" shot(s) left\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-74-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This produces the expected answer:</p><pre>Pew! 9 shot(s) left.
9 shot(s) left
</pre><p>Now, let’s use a reference capture to count how many comparisons <code>std::sort</code> makes when it sorts an array.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Car</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-85-close">{</span>
  std<span class="token double-colon punctuation">::</span>string make<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-83-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-83-open">}</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>string model<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-84-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-84-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-85-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-75-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-75-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-94-close">{</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Car<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> cars<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-90-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-89-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-86-close">{</span> <span class="token string">"Volkswagen"</span><span class="token punctuation">,</span> <span class="token string">"Golf"</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-86-open">}</span><span class="token punctuation">,</span>
                             <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-87-close">{</span> <span class="token string">"Toyota"</span><span class="token punctuation">,</span> <span class="token string">"Corolla"</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-87-open">}</span><span class="token punctuation">,</span>
                             <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-88-close">{</span> <span class="token string">"Honda"</span><span class="token punctuation">,</span> <span class="token string">"Civic"</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-88-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-89-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-90-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-int">int</span> comparisons<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-91-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-91-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-80-close">(</span>cars<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-76-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-76-open">)</span><span class="token punctuation">,</span> cars<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-77-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-77-open">)</span><span class="token punctuation">,</span>
    <span class="token comment">// Capture @comparisons by reference.</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-82-close">[</span><span class="token operator">&amp;</span>comparisons<span class="token punctuation brace-square brace-close brace-level-3" id="pair-82-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-78-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-78-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-92-close">{</span>
      <span class="token comment">// We captured comparisons by reference. We can modify it without "mutable".</span>
      <span class="token operator">++</span>comparisons<span class="token punctuation">;</span>

      <span class="token comment">// Sort the cars by their make.</span>
      <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-79-close">(</span>a<span class="token punctuation">.</span>make <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>make<span class="token punctuation brace-round brace-close brace-level-4" id="pair-79-open">)</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-92-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-80-open">)</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Comparisons: "</span> <span class="token operator">&lt;&lt;</span> comparisons <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-81-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> car <span class="token operator">:</span> cars<span class="token punctuation brace-round brace-close brace-level-2" id="pair-81-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-93-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> car<span class="token punctuation">.</span>make <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> car<span class="token punctuation">.</span>model <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-93-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-94-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Possible output</p><pre>Comparisons: 2
Honda Civic
Toyota Corolla
Volkswagen Golf
</pre><p class="cpp-section cpp-topline" style="clear:both">Capturing multiple variables</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><p>Multiple variables can be captured by separating them with a comma. This can include a mix of variables captured by value or by reference:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> health<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-97-close">{</span> <span class="token number">33</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-97-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> armor<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-98-close">{</span> <span class="token number">100</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-98-open">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>CEnemy<span class="token operator">&gt;</span> enemies<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-99-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-99-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Capture health and armor by value, and enemies by reference.</span>
<span class="token punctuation brace-square brace-open brace-level-1" id="pair-96-close">[</span>health<span class="token punctuation">,</span> armor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>enemies<span class="token punctuation brace-square brace-close brace-level-1" id="pair-96-open">]</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-95-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-95-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-100-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-100-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p class="cpp-section cpp-topline" style="clear:both">Default captures</p><p>Having to explicitly list the variables you want to capture can be burdensome. If you modify your lambda, you may forget to add or remove captured variables. Fortunately, we can enlist the compiler’s help to auto-generate a list of variables we need to capture.</p><p>A <span class="cpp-definition">default capture</span> (also called a <span class="cpp-definition">capture-default</span>) captures all variables that are mentioned in the lambda. Variables not mentioned in the lambda are not captured if a default capture is used.</p><p>To capture all used variables by value, use a capture value of <code>=</code>.<br>To capture all used variables by reference, use a capture value of <code>&amp;</code>.</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0')};</script></span></span></div></div><p>Here’s an example of using a default capture by value:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-101-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-101-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-117-close">{</span>
  std<span class="token double-colon punctuation">::</span>array areas<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-110-close">{</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-110-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-int">int</span> width<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-111-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-111-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> height<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-112-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-112-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter width and height: "</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> width <span class="token operator">&gt;&gt;</span> height<span class="token punctuation">;</span>

  <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-114-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-106-close">(</span>areas<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-102-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-102-open">)</span><span class="token punctuation">,</span> areas<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-103-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-103-open">)</span><span class="token punctuation">,</span>
                           <span class="token punctuation brace-square brace-open brace-level-4" id="pair-109-close">[</span><span class="token operator">=</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-109-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-104-close">(</span><span class="token keyword keyword-int">int</span> knownArea<span class="token punctuation brace-round brace-close brace-level-4" id="pair-104-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-113-close">{</span> <span class="token comment">// will default capture width and height by value</span>
                             <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-105-close">(</span>width <span class="token operator">*</span> height <span class="token operator">==</span> knownArea<span class="token punctuation brace-round brace-close brace-level-5" id="pair-105-open">)</span><span class="token punctuation">;</span> <span class="token comment">// because they're mentioned here</span>
                           <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-113-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-106-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-114-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-108-close">(</span>found <span class="token operator">==</span> areas<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-107-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-107-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-108-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-115-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I don't know this area :(\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-115-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-116-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Area found :)\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-116-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-117-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Default captures can be mixed with normal captures. We can capture some variables by value and others by reference, but each variable can only be captured once.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> health<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-132-close">{</span> <span class="token number">33</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-132-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> armor<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-133-close">{</span> <span class="token number">100</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-133-open">}</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>CEnemy<span class="token operator">&gt;</span> enemies<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-134-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-134-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Capture health and armor by value, and enemies by reference.</span>
<span class="token punctuation brace-square brace-open brace-level-1" id="pair-125-close">[</span>health<span class="token punctuation">,</span> armor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>enemies<span class="token punctuation brace-square brace-close brace-level-1" id="pair-125-open">]</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-118-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-118-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-135-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-135-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Capture enemies by reference and everything else by value.</span>
<span class="token punctuation brace-square brace-open brace-level-1" id="pair-126-close">[</span><span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>enemies<span class="token punctuation brace-square brace-close brace-level-1" id="pair-126-open">]</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-119-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-119-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-136-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-136-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Capture armor by value and everything else by reference.</span>
<span class="token punctuation brace-square brace-open brace-level-1" id="pair-127-close">[</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> armor<span class="token punctuation brace-square brace-close brace-level-1" id="pair-127-open">]</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-120-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-120-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-137-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-137-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Illegal, we already said we want to capture everything by reference.</span>
<span class="token punctuation brace-square brace-open brace-level-1" id="pair-128-close">[</span><span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>armor<span class="token punctuation brace-square brace-close brace-level-1" id="pair-128-open">]</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-121-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-121-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-138-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-138-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Illegal, we already said we want to capture everything by value.</span>
<span class="token punctuation brace-square brace-open brace-level-1" id="pair-129-close">[</span><span class="token operator">=</span><span class="token punctuation">,</span> armor<span class="token punctuation brace-square brace-close brace-level-1" id="pair-129-open">]</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-122-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-122-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-139-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-139-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Illegal, armor appears twice.</span>
<span class="token punctuation brace-square brace-open brace-level-1" id="pair-130-close">[</span>armor<span class="token punctuation">,</span> <span class="token operator">&amp;</span>health<span class="token punctuation">,</span> <span class="token operator">&amp;</span>armor<span class="token punctuation brace-square brace-close brace-level-1" id="pair-130-open">]</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-123-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-123-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-140-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-140-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Illegal, the default capture has to be the first element in the capture group.</span>
<span class="token punctuation brace-square brace-open brace-level-1" id="pair-131-close">[</span>armor<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation brace-square brace-close brace-level-1" id="pair-131-open">]</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-124-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-124-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-141-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-141-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p class="cpp-section cpp-topline" style="clear:both">Defining new variables in the lambda-capture</p><p>Sometimes we want to capture a variable with a slight modification or declare a new variable that is only visible in the scope of the lambda. We can do so by defining a variable in the lambda-capture without specifying its type.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-142-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-142-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-159-close">{</span>
  std<span class="token double-colon punctuation">::</span>array areas<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-151-close">{</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">56</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-151-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-int">int</span> width<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-152-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-152-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> height<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-153-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-153-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter width and height: "</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> width <span class="token operator">&gt;&gt;</span> height<span class="token punctuation">;</span>

  <span class="token comment">// We store areas, but the user entered width and height.</span>
  <span class="token comment">// We need to calculate the area before we can search for it.</span>
  <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-156-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-147-close">(</span>areas<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-143-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-143-open">)</span><span class="token punctuation">,</span> areas<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-144-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-144-open">)</span><span class="token punctuation">,</span>
                           <span class="token comment">// Declare a new variable that's visible only to the lambda.</span>
                           <span class="token comment">// The type of userArea is automatically deduced to int.</span>
                           <span class="token punctuation brace-square brace-open brace-level-4" id="pair-150-close">[</span>userArea<span class="token punctuation brace-curly brace-open brace-level-5" id="pair-154-close">{</span> width <span class="token operator">*</span> height <span class="token punctuation brace-curly brace-close brace-level-5" id="pair-154-open">}</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-150-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-145-close">(</span><span class="token keyword keyword-int">int</span> knownArea<span class="token punctuation brace-round brace-close brace-level-4" id="pair-145-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-155-close">{</span>
                             <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-146-close">(</span>userArea <span class="token operator">==</span> knownArea<span class="token punctuation brace-round brace-close brace-level-5" id="pair-146-open">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-155-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-147-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-156-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-149-close">(</span>found <span class="token operator">==</span> areas<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-148-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-148-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-149-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-157-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I don't know this area :(\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-157-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-158-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Area found :)\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-158-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-159-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><code>userArea</code> will only be calculated once when the lambda is defined. The calculated area is stored in the lambda object and is the same for every call. If a lambda is mutable and modifies a variable that was defined in the capture, the original value will be overridden.</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Only initialize variables in the capture if their value is short and their type is obvious. Otherwise it’s best to define the variable outside of the lambda and capture it.</p></div><p class="cpp-section cpp-topline" style="clear:both">Dangling captured variables</p><p>Variables are captured at the point where the lambda is defined. If a variable captured by reference dies before the lambda, the lambda will be left holding a dangling reference.</p><p>For example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token comment">// returns a lambda</span>
<span class="token keyword keyword-auto">auto</span> <span class="token function">makeWalrus</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-160-close">(</span><span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>string<span class="token operator">&amp;</span> name<span class="token punctuation brace-round brace-close brace-level-1" id="pair-160-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-167-close">{</span>
  <span class="token comment">// Capture name by reference and return the lambda.</span>
  <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-square brace-open brace-level-2" id="pair-165-close">[</span><span class="token operator">&amp;</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-165-open">]</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-161-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-161-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-166-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I am a walrus, my name is "</span> <span class="token operator">&lt;&lt;</span> name <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// Undefined behavior</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-166-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-167-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-162-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-162-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-169-close">{</span>
  <span class="token comment">// Create a new walrus whose name is Roofus.</span>
  <span class="token comment">// sayName is the lambda returned by makeWalrus.</span>
  <span class="token keyword keyword-auto">auto</span> sayName<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-168-close">{</span> <span class="token function">makeWalrus</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-163-close">(</span><span class="token string">"Roofus"</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-163-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-168-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Call the lambda function that makeWalrus returned.</span>
  <span class="token function">sayName</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-164-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-164-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-169-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The call to <code>makeWalrus</code> creates a temporary <code>std::string</code> from the string literal “Roofus”. The lambda in <code>makeWalrus</code> captures the temporary string by reference. The temporary string dies when <code>makeWalrus</code> returns, but the lambda still references it. Then when we call <code>sayName</code>, the dangling reference is accessed, causing undefined behavior.</p><p>Note that this also happens if <code>name</code> is passed to <code>makeWalrus</code> by value. The variable <code>name</code> still dies at the end of <code>makeWalrus</code>, and the lambda is left holding a dangling reference.</p><div class="cpp-note cpp-lightredbackground"><p class="cpp-note-title cpp-bottomline">Warning</p><p>Be extra careful when you capture variables by reference, especially with a default reference capture. The captured variables must outlive the lambda.</p></div><p>If we want the captured <code>name</code> to be valid when the lambda is used, we need to capture it by value instead (either explicitly or using a default-capture by value).</p><p class="cpp-section cpp-topline" style="clear:both"><a name="mutable_copy"></a>Unintended copies of mutable lambdas</p><p>Because lambdas are objects, they can be copied. In some cases, this can cause problems. Consider the following code:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-170-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-170-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-180-close">{</span>
  <span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-176-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-176-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Create a new lambda named count</span>
  <span class="token keyword keyword-auto">auto</span> count<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-178-close">{</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-175-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-3" id="pair-175-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-171-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-171-open">)</span> <span class="token keyword keyword-mutable">mutable</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-177-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-177-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-178-open">}</span><span class="token punctuation">;</span>

  <span class="token function">count</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-172-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-172-open">)</span><span class="token punctuation">;</span> <span class="token comment">// invoke count</span>

  <span class="token keyword keyword-auto">auto</span> otherCount<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-179-close">{</span> count <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-179-open">}</span><span class="token punctuation">;</span> <span class="token comment">// create a copy of count</span>

  <span class="token comment">// invoke both count and the copy</span>
  <span class="token function">count</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-173-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-173-open">)</span><span class="token punctuation">;</span>
  <span class="token function">otherCount</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-174-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-174-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-180-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>1
2
2
</pre><p>Rather than printing 1, 2, 3, the code prints 2 twice. When we created <code>otherCount</code> as a copy of <code>count</code>, we created a copy of <code>count</code> in its current state. <code>count</code>‘s <code>i</code> was 1, so <code>otherCount</code>‘s <code>i</code> is 1 as well. Since <code>otherCount</code> is a copy of <code>count</code>, they each have their own <code>i</code>.</p><p>Now let’s take a look at a slightly less obvious example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">invoke</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-182-close">(</span><span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-void">void</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-181-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-181-open">)</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> fn<span class="token punctuation brace-round brace-close brace-level-1" id="pair-182-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-190-close">{</span>
    <span class="token function">fn</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-183-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-183-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-190-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-184-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-184-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-194-close">{</span>
    <span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-191-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-191-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Increments and prints its local copy of @i.</span>
    <span class="token keyword keyword-auto">auto</span> count<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-193-close">{</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-189-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-3" id="pair-189-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-185-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-185-open">)</span> <span class="token keyword keyword-mutable">mutable</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-192-close">{</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-192-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-193-open">}</span><span class="token punctuation">;</span>

    <span class="token function">invoke</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-186-close">(</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-186-open">)</span><span class="token punctuation">;</span>
    <span class="token function">invoke</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-187-close">(</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-187-open">)</span><span class="token punctuation">;</span>
    <span class="token function">invoke</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-188-close">(</span>count<span class="token punctuation brace-round brace-close brace-level-2" id="pair-188-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-194-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output:</p><pre>1
1
1
</pre><p>This exhibits the same problem as the prior example in a more obscure form. When <code>std::function</code> is created with a lambda, the <code>std::function</code> internally makes a copy of the lambda object. Thus, our call to <code>fn()</code> is actually being executed on the copy of our lambda, not the actual lambda.</p><p>If we need to pass a mutable lambda, and want to avoid the possibility of inadvertent copies being made, there are two options. One option is to use a non-capturing lambda instead -- in the above case, we could remove the capture and track our state using a static local variable instead. But static local variables can be difficult to keep track of and make our code less readable. A better option is to prevent copies of our lambda from being made in the first place. But since we can’t affect how <code>std::function</code> (or other standard library functions or objects) are implemented, how can we do this?</p><p>Fortunately, C++ provides a convenient type (as part of the &lt;functional&gt; header) called <code>std::reference_wrapper</code> that allows us to pass a normal type as if it was a reference. For even more convenience, a <code>std::reference_wrapper</code> can be created by using the <code>std::ref()</code> function. By wrapping our lambda in a <code>std::reference_wrapper</code>, whenever anybody tries to make a copy of our lambda, they’ll make a copy of the reference instead, which will copy the reference rather than the actual object.</p><p>Here’s our updated code using <code>std::ref</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">invoke</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-196-close">(</span><span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-void">void</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-195-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-195-open">)</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> fn<span class="token punctuation brace-round brace-close brace-level-1" id="pair-196-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-207-close">{</span>
    <span class="token function">fn</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-197-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-197-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-207-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-198-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-198-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-211-close">{</span>
    <span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-208-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-208-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Increments and prints its local copy of @i.</span>
    <span class="token keyword keyword-auto">auto</span> count<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-210-close">{</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-206-close">[</span>i<span class="token punctuation brace-square brace-close brace-level-3" id="pair-206-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-199-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-199-open">)</span> <span class="token keyword keyword-mutable">mutable</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-209-close">{</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>i <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-209-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-210-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// std::ref(count) ensures count is treated like a reference</span>
    <span class="token comment">// thus, anything that tries to copy count will actually copy the reference</span>
    <span class="token comment">// ensuring that only one count exists</span>
    <span class="token function">invoke</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-201-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-200-close">(</span>count<span class="token punctuation brace-round brace-close brace-level-3" id="pair-200-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-201-open">)</span><span class="token punctuation">;</span>
    <span class="token function">invoke</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-203-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-202-close">(</span>count<span class="token punctuation brace-round brace-close brace-level-3" id="pair-202-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-203-open">)</span><span class="token punctuation">;</span>
    <span class="token function">invoke</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-205-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">ref</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-204-close">(</span>count<span class="token punctuation brace-round brace-close brace-level-3" id="pair-204-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-205-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-211-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Our output is now as expected:</p><pre>1
2
3
</pre><p>Note that the output doesn’t change even if <code>invoke</code> takes <code>fn</code> by value. <code>std::function</code> doesn’t create a copy of the lambda if we create it with <code>std::ref</code>.</p><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Rule</p><p>Standard library functions may copy function objects (reminder: lambdas are function objects). If you want to provide lambdas with mutable captured variables, pass them by reference using <code>std::ref</code>.</p></div><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Best practice</p><p>Try to avoid mutable lambdas. Non-mutable lambdas are easier to understand and don’t suffer from the above issues, as well as more dangerous issues that arise when you add parallel execution.</p></div><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>Which of the following variables can be used by the lambda in <code>main</code> without explicitly capturing them?</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-219-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-219-open">}</span><span class="token punctuation">;</span>
<span class="token keyword keyword-static">static</span> <span class="token keyword keyword-int">int</span> j<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-220-close">{</span><span class="token punctuation brace-curly brace-close brace-level-1" id="pair-220-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-212-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-212-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-221-close">{</span>
  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-221-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-213-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-213-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-231-close">{</span>
  <span class="token keyword keyword-int">int</span> a<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-222-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-222-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> b<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-223-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-223-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-static">static</span> <span class="token keyword keyword-int">int</span> c<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-224-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-224-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-static">static</span> <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> d<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-225-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-225-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span> e<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-226-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-226-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span> f<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-227-close">{</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-214-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-214-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-227-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-static">static</span> <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span> g<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-228-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-228-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-static">static</span> <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-int">int</span> h<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-229-close">{</span> <span class="token function">getValue</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-215-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-215-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-229-open">}</span><span class="token punctuation">;</span>

  <span class="token punctuation brace-square brace-open brace-level-2" id="pair-218-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-218-open">]</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-216-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-216-open">)</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-230-close">{</span>
    <span class="token comment">// Try to use the variables without explicitly capturing them.</span>
    a<span class="token punctuation">;</span>
    b<span class="token punctuation">;</span>
    c<span class="token punctuation">;</span>
    d<span class="token punctuation">;</span>
    e<span class="token punctuation">;</span>
    f<span class="token punctuation">;</span>
    g<span class="token punctuation">;</span>
    h<span class="token punctuation">;</span>
    i<span class="token punctuation">;</span>
    j<span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-230-open">}</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-217-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-217-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-231-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="cpp-table-wrapper"><p></p><table class="cpp-table"><tbody><tr><th>Variable</th><th>Usable without explicit capture</th></tr><tr><td><code>a</code></td><td>No. <code>a</code> has automatic storage duration.</td></tr><tr><td><code>b</code></td><td>Yes. <code>b</code> is usable in a constant expression.</td></tr><tr><td><code>c</code></td><td>Yes. <code>c</code> has static storage duration.</td></tr><tr><td><code>d</code></td><td>Yes.</td></tr><tr><td><code>e</code></td><td>Yes. <code>e</code> is usable in a constant expression.</td></tr><tr><td><code>f</code></td><td>No. <code>f</code>‘s value depends on <code>getValue</code>, which might require the program to run.</td></tr><tr><td><code>g</code></td><td>Yes.</td></tr><tr><td><code>h</code></td><td>Yes. <code>h</code> has static storage duration.</td></tr><tr><td><code>i</code></td><td>Yes. <code>i</code> is a global variable.</td></tr><tr><td><code>j</code></td><td>Yes. <code>j</code> is accessible in the entire file.</td></tr></tbody></table></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #2</p><p>What does the following code print? Don’t run the code, work it out in your head.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-232-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-232-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-239-close">{</span>
  std<span class="token double-colon punctuation">::</span>string favoriteFruit<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-236-close">{</span> <span class="token string">"grapes"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-236-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-auto">auto</span> printFavoriteFruit<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-238-close">{</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-235-close">[</span><span class="token operator">=</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-235-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-233-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-233-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-237-close">{</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I like "</span> <span class="token operator">&lt;&lt;</span> favoriteFruit <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-237-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-238-open">}</span><span class="token punctuation">;</span>

  favoriteFruit <span class="token operator">=</span> <span class="token string">"bananas with chocolate"</span><span class="token punctuation">;</span>

  <span class="token function">printFavoriteFruit</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-234-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-234-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-239-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><pre>I like grapes
</pre><p><code>printFavoriteFruit</code> captured <code>favoriteFruit</code> by value. Modifying <code>main</code>‘s <code>favoriteFruit</code> doesn’t affect the lambda’s <code>favoriteFruit</code>.</p></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #3</p><p>We’re going to write a little game with square numbers (numbers which can be created by multiplying an integer with itself (1, 4, 9, 16, 25, …)).</p><p>Ask the user to input 2 numbers, the first is the square root of the number to start at, the second is the amount of numbers to generate. Generate a random integer from 2 to 4, and square numbers in the range that was chosen by the user. Multiply each square number by the random number. You can assume that the user enters valid numbers.</p><p>The user has to calculate which numbers have been generated. The program checks if the user guessed correctly and removes the guessed number from the list. If the user guessed wrong, the game is over and the program prints the number that was closest to the user’s final guess, but only if the final guess was not off by more than 4.</p><p>Here are a couple of sample sessions to give you a better understanding of how the game works:</p><pre>Start where? 4
How many? 8
I generated 8 square numbers. Do you know what each number is after multiplying it by 2?
&gt; 32
Nice! 7 number(s) left.
&gt; 72
Nice! 6 number(s) left.
&gt; 50
Nice! 5 number(s) left.
&gt; 126
126 is wrong! Try 128 next time.
</pre><ul><li>The user chose to start at 4 and wants to play with 8 numbers.</li><li>Each square number will be multiplied by 2. 2 was randomly chosen by the program.</li><li>The program generates 8 square numbers, starting with 4 as a base:</li><li>16 25 36 49 64 81 100 121</li><li>But each number is multiplied by 2, so we get:</li><li>32 50 72 98 128 162 200 242</li><li>Now the user starts to guess. The order in which in guesses are entered doesn’t matter.</li><li>32 is in the list.</li><li>72 is in the list.</li><li>126 is not in the list, the user loses. There is a number in the list (128) that is not more then 4 away from the user’s guess, so that number is printed.</li></ul><pre>Start where? 1
How many? 3
I generated 3 square numbers. Do you know what each number is after multiplying it by 4?
&gt; 4
Nice! 2 numbers left.
&gt; 16
Nice! 1 numbers left.
&gt; 36
Nice! You found all numbers, good job!
</pre><ul><li>The user chose to start at 1 and wants to play with 3 numbers.</li><li>Each square number will be multiplied by 4.</li><li>The program generates these square numbers:</li><li>1 4 9</li><li>Multiplied by 4</li><li>4 16 36</li><li>The user guesses all numbers correctly and wins the game.</li></ul><pre>Start where? 2
How many? 2
I generated 2 square numbers. Do you know what each number is after multiplying it by 4?
&gt; 21
21 is wrong!
</pre><ul><li>The user chose to start at 2 and wants to play with 2 numbers.</li><li>Each square number will be multiplied by 4.</li><li>The program generates these numbers:</li><li>16 36</li><li>The user guesses 21 and loses. 21 is not close enough to any of the remaining numbers, so no number is printed.</li></ul><p>Use <code>std::find</code> (<a href="https://www.learncpp.com/cpp-tutorial/introduction-to-standard-library-algorithms/#std_find">10.19 -- Introduction to standard library algorithms</a>) to search for a number in the list.<br>Use <code>std::vector::erase</code> to remove an element, e.g.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-242-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-240-close">(</span><span class="token comment">/* ... */</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-240-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-242-open">}</span><span class="token punctuation">;</span>

<span class="token comment">// Make sure the element was found</span>

myVector<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-241-close">(</span>found<span class="token punctuation brace-round brace-close brace-level-1" id="pair-241-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Use <code>std::min_element</code> and a lambda to find the number closest to the user’s guess. <code>std::min_element</code> works analogous to <code>std::max_element</code> from the previous quiz.</p><p><a class="hint_link_show" href="javascript:void(0)" onclick="cppHintToggle(document.getElementById('cpp_hint_id_0'),this,'Show Hint','')">Show Hint</a></p><div class="wphint" id="cpp_hint_id_0" style="display:none;margin-bottom:1em">Hint: Use <code>std::abs</code> from &lt;cmath&gt; to calculate the positive difference between two numbers.<div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> distance<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-244-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-243-close">(</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">5</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-243-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-244-open">}</span><span class="token punctuation">;</span> <span class="token comment">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_2'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_2" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span> <span class="token comment">// std::find, std::min_element</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span> <span class="token comment">// std::abs</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ctime&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword keyword-using">using</span> list_type <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword keyword-namespace">namespace</span> config
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-299-close">{</span>
  <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> multiplierMin<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-296-close">{</span> <span class="token number">2</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-296-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> multiplierMax<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-297-close">{</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-297-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-constexpr">constexpr</span> <span class="token keyword keyword-int">int</span> maximumWrongAnswer<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-298-close">{</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-298-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-299-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">getRandomInt</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-245-close">(</span><span class="token keyword keyword-int">int</span> min<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> max<span class="token punctuation brace-round brace-close brace-level-1" id="pair-245-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-302-close">{</span>
  <span class="token keyword keyword-static">static</span> std<span class="token double-colon punctuation">::</span>mt19937 mt<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-300-close">{</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>mt19937<span class="token double-colon punctuation">::</span>result_type<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-247-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">time</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-246-close">(</span><span class="token keyword keyword-nullptr">nullptr</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-246-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-247-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-300-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> std<span class="token double-colon punctuation">::</span>uniform_int_distribution<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-301-close">{</span> min<span class="token punctuation">,</span> max <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-301-open">}</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-248-close">(</span>mt<span class="token punctuation brace-round brace-close brace-level-2" id="pair-248-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-302-open">}</span>

<span class="token comment">// Generates @count numbers starting at @start*@start and multiplies</span>
<span class="token comment">// every square number by multiplier.</span>
list_type <span class="token function">generateNumbers</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-249-close">(</span><span class="token keyword keyword-int">int</span> start<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> count<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> multiplier<span class="token punctuation brace-round brace-close brace-level-1" id="pair-249-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-305-close">{</span>
  list_type <span class="token function">numbers</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-251-close">(</span><span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>list_type<span class="token double-colon punctuation">::</span>size_type<span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-250-close">(</span>count<span class="token punctuation brace-round brace-close brace-level-3" id="pair-250-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-251-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-303-close">{</span> start <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-303-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-252-close">(</span><span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> number <span class="token operator">:</span> numbers<span class="token punctuation brace-round brace-close brace-level-2" id="pair-252-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-304-close">{</span>
    number <span class="token operator">=</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-254-close">(</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-253-close">(</span>i <span class="token operator">*</span> i<span class="token punctuation brace-round brace-close brace-level-4" id="pair-253-open">)</span> <span class="token operator">*</span> multiplier<span class="token punctuation brace-round brace-close brace-level-3" id="pair-254-open">)</span><span class="token punctuation">;</span>
    <span class="token operator">++</span>i<span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-304-open">}</span>

  <span class="token keyword keyword-return">return</span> numbers<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-305-open">}</span>

<span class="token comment">// Asks the user to input start and amount, then calls @generateNumbers.</span>
list_type <span class="token function">generateUserNumbers</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-255-close">(</span><span class="token keyword keyword-int">int</span> multiplier<span class="token punctuation brace-round brace-close brace-level-1" id="pair-255-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-308-close">{</span>
  <span class="token keyword keyword-int">int</span> start<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-306-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-306-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> count<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-307-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-307-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Start where? "</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> start<span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"How many? "</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> count<span class="token punctuation">;</span>

  <span class="token comment">// Input validation omitted. All functions assume valid input.</span>

  <span class="token keyword keyword-return">return</span> <span class="token function">generateNumbers</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-256-close">(</span>start<span class="token punctuation">,</span> count<span class="token punctuation">,</span> multiplier<span class="token punctuation brace-round brace-close brace-level-2" id="pair-256-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-308-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">getUserGuess</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-257-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-257-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-310-close">{</span>
  <span class="token keyword keyword-int">int</span> guess<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-309-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-309-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&gt; "</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> guess<span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> guess<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-310-open">}</span>

<span class="token comment">// Searches for the value @guess in @numbers and removes it.</span>
<span class="token comment">// Returns true if the value was found. False otherwise.</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">findAndRemove</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-258-close">(</span>list_type<span class="token operator">&amp;</span> numbers<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> guess<span class="token punctuation brace-round brace-close brace-level-1" id="pair-258-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-314-close">{</span>
  <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-311-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-261-close">(</span>numbers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-259-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-259-open">)</span><span class="token punctuation">,</span> numbers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-260-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-260-open">)</span><span class="token punctuation">,</span> guess<span class="token punctuation brace-round brace-close brace-level-3" id="pair-261-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-311-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-263-close">(</span>found <span class="token operator">==</span> numbers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-262-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-262-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-263-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-312-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-312-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-313-close">{</span>
    numbers<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-264-close">(</span>found<span class="token punctuation brace-round brace-close brace-level-3" id="pair-264-open">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-313-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-314-open">}</span>

<span class="token comment">// Finds the value in @numbers that is closest to @guess.</span>
<span class="token keyword keyword-int">int</span> <span class="token function">findClosestNumber</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-265-close">(</span><span class="token keyword keyword-const">const</span> list_type<span class="token operator">&amp;</span> numbers<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> guess<span class="token punctuation brace-round brace-close brace-level-1" id="pair-265-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-316-close">{</span>
  <span class="token keyword keyword-return">return</span> <span class="token operator">*</span>std<span class="token double-colon punctuation">::</span><span class="token function">min_element</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-272-close">(</span>numbers<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-266-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-266-open">)</span><span class="token punctuation">,</span> numbers<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-267-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-267-open">)</span><span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-295-close">[</span><span class="token operator">=</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-295-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-268-close">(</span><span class="token keyword keyword-int">int</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-268-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-315-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-271-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-269-close">(</span>a <span class="token operator">-</span> guess<span class="token punctuation brace-round brace-close brace-level-5" id="pair-269-open">)</span> <span class="token operator">&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-270-close">(</span>b <span class="token operator">-</span> guess<span class="token punctuation brace-round brace-close brace-level-5" id="pair-270-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-271-open">)</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-315-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-272-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-316-open">}</span>

<span class="token keyword keyword-void">void</span> <span class="token function">printTask</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-273-close">(</span>list_type<span class="token double-colon punctuation">::</span>size_type count<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> multiplier<span class="token punctuation brace-round brace-close brace-level-1" id="pair-273-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-317-close">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I generated "</span> <span class="token operator">&lt;&lt;</span> count
            <span class="token operator">&lt;&lt;</span> <span class="token string">" square numbers. Do you know what each number is after multiplying it by "</span>
            <span class="token operator">&lt;&lt;</span> multiplier <span class="token operator">&lt;&lt;</span> <span class="token string">"?\n"</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-317-open">}</span>

<span class="token comment">// Called when the user guesses a number correctly.</span>
<span class="token keyword keyword-void">void</span> <span class="token function">printSuccess</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-274-close">(</span>list_type<span class="token double-colon punctuation">::</span>size_type numbersLeft<span class="token punctuation brace-round brace-close brace-level-1" id="pair-274-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-320-close">{</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Nice! "</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-275-close">(</span>numbersLeft <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-275-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-318-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You found all numbers, good job!\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-318-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-319-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> numbersLeft <span class="token operator">&lt;&lt;</span> <span class="token string">" number(s) left.\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-319-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-320-open">}</span>

<span class="token comment">// Called when the user guesses a number that is not in the numbers.</span>
<span class="token keyword keyword-void">void</span> <span class="token function">printFailure</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-276-close">(</span><span class="token keyword keyword-const">const</span> list_type<span class="token operator">&amp;</span> numbers<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> guess<span class="token punctuation brace-round brace-close brace-level-1" id="pair-276-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-324-close">{</span>
  <span class="token keyword keyword-int">int</span> closest<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-321-close">{</span> <span class="token function">findClosestNumber</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-277-close">(</span>numbers<span class="token punctuation">,</span> guess<span class="token punctuation brace-round brace-close brace-level-3" id="pair-277-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-321-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> guess <span class="token operator">&lt;&lt;</span> <span class="token string">" is wrong!"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-279-close">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">abs</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-278-close">(</span>closest <span class="token operator">-</span> guess<span class="token punctuation brace-round brace-close brace-level-3" id="pair-278-open">)</span> <span class="token operator">&lt;=</span> config<span class="token double-colon punctuation">::</span>maximumWrongAnswer<span class="token punctuation brace-round brace-close brace-level-2" id="pair-279-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-322-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">" Try "</span> <span class="token operator">&lt;&lt;</span> closest <span class="token operator">&lt;&lt;</span> <span class="token string">" next time.\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-322-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-323-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-323-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-324-open">}</span>

<span class="token comment">// Returns false if the game is over. True otherwise.</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">playRound</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-280-close">(</span>list_type<span class="token operator">&amp;</span> numbers<span class="token punctuation brace-round brace-close brace-level-1" id="pair-280-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-328-close">{</span>
  <span class="token keyword keyword-int">int</span> guess<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-325-close">{</span> <span class="token function">getUserGuess</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-281-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-281-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-325-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-283-close">(</span><span class="token function">findAndRemove</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-282-close">(</span>numbers<span class="token punctuation">,</span> guess<span class="token punctuation brace-round brace-close brace-level-3" id="pair-282-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-283-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-326-close">{</span>
    <span class="token function">printSuccess</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-285-close">(</span>numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-284-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-284-open">)</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-285-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token operator">!</span>numbers<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-286-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-286-open">)</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-326-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-327-close">{</span>
    <span class="token function">printFailure</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-287-close">(</span>numbers<span class="token punctuation">,</span> guess<span class="token punctuation brace-round brace-close brace-level-3" id="pair-287-open">)</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-327-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-328-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-288-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-288-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-331-close">{</span>
  <span class="token keyword keyword-int">int</span> multiplier<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-329-close">{</span> <span class="token function">getRandomInt</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-289-close">(</span>config<span class="token double-colon punctuation">::</span>multiplierMin<span class="token punctuation">,</span> config<span class="token double-colon punctuation">::</span>multiplierMax<span class="token punctuation brace-round brace-close brace-level-3" id="pair-289-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-329-open">}</span><span class="token punctuation">;</span>
  list_type numbers<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-330-close">{</span> <span class="token function">generateUserNumbers</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-290-close">(</span>multiplier<span class="token punctuation brace-round brace-close brace-level-3" id="pair-290-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-330-open">}</span><span class="token punctuation">;</span>

  <span class="token function">printTask</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-292-close">(</span>numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-291-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-291-open">)</span><span class="token punctuation">,</span> multiplier<span class="token punctuation brace-round brace-close brace-level-2" id="pair-292-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-294-close">(</span><span class="token function">playRound</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-293-close">(</span>numbers<span class="token punctuation brace-round brace-close brace-level-3" id="pair-293-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-294-open">)</span>
    <span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-331-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/chapter-11-comprehensive-quiz/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">11.x</span>Chapter 11 comprehensive quiz</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/introduction-to-lambdas-anonymous-functions/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">11.7</span>Introduction to lambdas (anonymous functions)</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/lambda-captures/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/introduction-to-lambdas-anonymous-functions/" rel="prev"><span>11.7 — Introduction to lambdas (anonymous functions)</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/internal-linkage/" rel="next"><span>6.6 — Internal linkage</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="258"><span class="wpdtc" title="258">258</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CODOiPGb-PYCFYWQlgodb6IBFQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=10a971b5-ad73-4d9c-47c8-22fadfa7e401&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/4355521738865039&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/lambda-captures/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="COHOiPGb-PYCFYWQlgodb6IBFQ"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=10a971b5-ad73-4d9c-47c8-22fadfa7e401&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/782856524906513&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/lambda-captures/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>