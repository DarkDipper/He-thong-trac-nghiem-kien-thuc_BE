<main id="main" role="main" class="main"><article id="post-9367" class="post-9367 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">11.7 — Introduction to lambdas (anonymous functions)</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/nascardriver/" title="View all posts by nascardriver" itemprop="url"><em itemprop="name">nascardriver</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2020-01-03T05:19:35-08:00" itemprop="datePublished">January 3, 2020, 5:19 am</time>
<time class="updated" datetime="2022-03-29T09:25:38-07:00" itemprop="dateModified">March 29, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad" data-google-query-id="CJDH_9-b-PYCFQnCTAIdovkJBA"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>Consider this snippet of code that we introduced in lesson <a href="https://www.learncpp.com/cpp-tutorial/introduction-to-standard-library-algorithms/">10.19 -- Introduction to standard library algorithms</a>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token comment">// Our function will return true if the element matches</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">containsNut</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span>std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-9-close">{</span>
    <span class="token comment">// std::string_view::find returns std::string_view::npos if it doesn't find</span>
    <span class="token comment">// the substring. Otherwise it returns the index where the substring occurs</span>
    <span class="token comment">// in str.</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-2-close">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-1-close">(</span><span class="token string">"nut"</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-1-open">)</span> <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos<span class="token punctuation brace-round brace-close brace-level-2" id="pair-2-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-9-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-3-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-3-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-14-close">{</span>
    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-10-close">{</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"walnut"</span><span class="token punctuation">,</span> <span class="token string">"lemon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-10-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Scan our array to see if any elements contain the "nut" substring</span>
    <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-11-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-6-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-4-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-4-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-5-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-5-open">)</span><span class="token punctuation">,</span> containsNut<span class="token punctuation brace-round brace-close brace-level-3" id="pair-6-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-11-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-8-close">(</span>found <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-7-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-7-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-8-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-12-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No nuts\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-12-open">}</span>
    <span class="token keyword keyword-else">else</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-13-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-13-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-14-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This code searches through an array of strings looking for the first element that contains the substring “nut”. Thus, it produces the result:</p><pre>Found walnut
</pre><p>And while it works, it could be improved.</p><p>The root of the issue here is that <code>std::find_if</code> requires that we pass it a function pointer. Because of that, we are forced to define a function that’s only going to be used once, that must be given a name, and that must be put in the global scope (because functions can’t be nested!). The function is also so short, it’s almost easier to discern what it does from the one line of code than from the name and comments.</p><p class="cpp-section cpp-topline" style="clear:both">Lambdas to the rescue</p><p>A <span class="cpp-definition">lambda expression</span> (also called a <span class="cpp-definition">lambda</span> or <span class="cpp-definition">closure</span>) allows us to define an anonymous function inside another function. The nesting is important, as it allows us both to avoid namespace naming pollution, and to define the function as close to where it is used as possible (providing additional context).</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>The syntax for lambdas is one of the weirder things in C++, and takes a bit of getting used to. Lambdas take the form:</p><pre>[ captureClause ] ( parameters ) -&gt; returnType
{
    statements;
}
</pre><p>The <code>capture clause</code> and <code>parameters</code> can both be empty if they are not needed.</p><p>The <code>return type</code> is optional, and if omitted, <code>auto</code> will be assumed (thus using type inference used to determine the return type). While we previously noted that type inference for function return types should be avoided, in this context, it’s fine to use (because these functions are typically so trivial).</p><p>Also note that lambdas have no name, so we don’t need to provide one.</p><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">As an aside…</p><p>This means a trivial lambda definition looks like this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-15-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-15-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-19-close">{</span>
  <span class="token punctuation brace-square brace-open brace-level-2" id="pair-17-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-17-open">]</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-16-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-16-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-18-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-18-open">}</span><span class="token punctuation">;</span> <span class="token comment">// defines a lambda with no captures, no parameters, and no return type</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-19-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>Let’s rewrite the above example using a lambda:</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-20-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-20-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-35-close">{</span>
  <span class="token keyword keyword-constexpr">constexpr</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>std<span class="token double-colon punctuation">::</span>string_view<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-30-close">{</span> <span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"banana"</span><span class="token punctuation">,</span> <span class="token string">"walnut"</span><span class="token punctuation">,</span> <span class="token string">"lemon"</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-30-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Define the function right where we use it.</span>
  <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span> found<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-32-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">find_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-26-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-21-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-21-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-22-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-22-open">)</span><span class="token punctuation">,</span>
                           <span class="token punctuation brace-square brace-open brace-level-4" id="pair-29-close">[</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-29-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-23-close">(</span>std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-round brace-close brace-level-4" id="pair-23-open">)</span> <span class="token comment">// here's our lambda, no capture clause</span>
                           <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-31-close">{</span>
                             <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-25-close">(</span>str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation brace-round brace-open brace-level-6" id="pair-24-close">(</span><span class="token string">"nut"</span><span class="token punctuation brace-round brace-close brace-level-6" id="pair-24-open">)</span> <span class="token operator">!=</span> std<span class="token double-colon punctuation">::</span>string_view<span class="token double-colon punctuation">::</span>npos<span class="token punctuation brace-round brace-close brace-level-5" id="pair-25-open">)</span><span class="token punctuation">;</span>
                           <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-31-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-26-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-32-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-28-close">(</span>found <span class="token operator">==</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-27-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-27-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-28-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-33-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No nuts\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-33-open">}</span>
  <span class="token keyword keyword-else">else</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-34-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>found <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-34-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-35-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This works just like the function pointer case, and produces an identical result:</p><pre>Found walnut
</pre><p>Note how similar our lambda is to our <code>containsNut</code> function. They both have identical parameters and function bodies. The lambda has no capture clause (we’ll explain what a capture clause is in the next lesson) because it doesn’t need one. And we’ve omitted the trailing return type in the lambda (for conciseness), but since <code>operator!=</code> returns a <code>bool</code>, our lambda will return a <code>bool</code> too.</p><p class="cpp-section cpp-topline" style="clear:both">Type of a lambda</p><p>In the above example, we defined a lambda right where it was needed. This use of a lambda is sometimes called a <span class="cpp-definition">function literal</span>.</p><p>However, writing a lambda in the same line as it’s used can sometimes make code harder to read. Much like we can initialize a variable with a literal value (or a function pointer) for use later, we can also initialize a lambda variable with a lambda definition and then use it later. A named lambda along with a good function name can make code easier to read.</p><p>For example, in the following snippet, we’re using <code>std::all_of</code> to check if all elements of an array are even:</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// Bad: We have to read the lambda to understand what's happening.</span>
<span class="token keyword keyword-return">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">all_of</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-41-close">(</span>array<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-36-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-36-open">)</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-37-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-37-open">)</span><span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-2" id="pair-42-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-42-open">]</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-38-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-38-open">)</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-43-close">{</span> <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-40-close">(</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-39-close">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-39-open">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-40-open">)</span><span class="token punctuation">;</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-43-open">}</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-41-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>We can improve the readability of this as follows:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// Good: Instead, we can store the lambda in a named variable and pass it to the function.</span>
<span class="token keyword keyword-auto">auto</span> isEven<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-52-close">{</span>
  <span class="token punctuation brace-square brace-open brace-level-2" id="pair-50-close">[</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-50-open">]</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-44-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-44-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-51-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-46-close">(</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-45-close">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-45-open">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-46-open">)</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-51-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-52-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-return">return</span> std<span class="token double-colon punctuation">::</span><span class="token function">all_of</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-49-close">(</span>array<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-47-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-47-open">)</span><span class="token punctuation">,</span> array<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-48-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-48-open">)</span><span class="token punctuation">,</span> isEven<span class="token punctuation brace-round brace-close brace-level-1" id="pair-49-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note how well the last line reads: “return whether <em>all of</em> the elements in the <em>array</em> are <em>even</em>”</p><p>But what is the type of lambda <code>isEven</code>?</p><p>As it turns out, lambdas don’t have a type that we can explicitly use. When we write a lambda, the compiler generates a unique type just for the lambda that is not exposed to us.</p><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">For advanced readers</p><p>In actuality, lambdas aren’t functions (which is part of how they avoid the limitation of C++ not supporting nested functions). They’re a special kind of object called a functor. Functors are objects that contain an overloaded <code>operator()</code> that make them callable like a function.</p></div><p>Although we don’t know the type of a lambda, there are several ways of storing a lambda for use post-definition. If the lambda has an empty capture clause, we can use a regular function pointer. In the next lesson, we introduce lambda captures, a function pointer won’t work anymore at that point. However, <code>std::function</code> can be used for lambdas even if they are capturing something.</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-53-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-53-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-74-close">{</span>
  <span class="token comment">// A regular function pointer. Only works with an empty capture clause.</span>
  <span class="token keyword keyword-double">double</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-54-close">(</span><span class="token operator">*</span>addNumbers1<span class="token punctuation brace-round brace-close brace-level-2" id="pair-54-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-55-close">(</span><span class="token keyword keyword-double">double</span><span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-55-open">)</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-69-close">{</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-65-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-65-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-56-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-56-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-68-close">{</span>
      <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-57-close">(</span>a <span class="token operator">+</span> b<span class="token punctuation brace-round brace-close brace-level-4" id="pair-57-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-68-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-69-open">}</span><span class="token punctuation">;</span>

  <span class="token function">addNumbers1</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-58-close">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-58-open">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Using std::function. The lambda could have a non-empty capture clause (Next lesson).</span>
  std<span class="token double-colon punctuation">::</span>function addNumbers2<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-71-close">{</span> <span class="token comment">// note: pre-C++17, use std::function&lt;double(double, double)&gt; instead</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-66-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-66-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-59-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-59-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-70-close">{</span>
      <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-60-close">(</span>a <span class="token operator">+</span> b<span class="token punctuation brace-round brace-close brace-level-4" id="pair-60-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-70-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-71-open">}</span><span class="token punctuation">;</span>

  <span class="token function">addNumbers2</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-61-close">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-61-open">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Using auto. Stores the lambda with its real type.</span>
  <span class="token keyword keyword-auto">auto</span> addNumbers3<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-73-close">{</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-67-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-67-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-62-close">(</span><span class="token keyword keyword-double">double</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-double">double</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-62-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-72-close">{</span>
      <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-63-close">(</span>a <span class="token operator">+</span> b<span class="token punctuation brace-round brace-close brace-level-4" id="pair-63-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-72-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-73-open">}</span><span class="token punctuation">;</span>

  <span class="token function">addNumbers3</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-64-close">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-64-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-74-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The only way of using the lambda’s actual type is by means of <code>auto</code>. <code>auto</code> also has the benefit of having no overhead compared to <code>std::function</code>.</p><p>Unfortunately, prior to C++20, we can’t always use <code>auto</code>. In cases where the actual lambda is unknown (e.g. because we’re passing a lambda to a function as a parameter and the caller determines what lambda will be passed in), we can’t use <code>auto</code> without compromises. In such cases, <code>std::function</code> can be used instead.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// We don't know what fn will be. std::function works with regular functions and lambdas.</span>
<span class="token keyword keyword-void">void</span> <span class="token function">repeat</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-76-close">(</span><span class="token keyword keyword-int">int</span> repetitions<span class="token punctuation">,</span> <span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-void">void</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-75-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-75-open">)</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> fn<span class="token punctuation brace-round brace-close brace-level-1" id="pair-76-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-85-close">{</span>
  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-77-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-83-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-83-open">}</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> repetitions<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation brace-round brace-close brace-level-2" id="pair-77-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-84-close">{</span>
    <span class="token function">fn</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-78-close">(</span>i<span class="token punctuation brace-round brace-close brace-level-3" id="pair-78-open">)</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-84-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-85-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-79-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-79-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-87-close">{</span>
  <span class="token function">repeat</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-81-close">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-82-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-82-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-80-close">(</span><span class="token keyword keyword-int">int</span> i<span class="token punctuation brace-round brace-close brace-level-3" id="pair-80-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-86-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-86-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-81-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-87-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>0
1
2
</pre><p>If we had used <code>auto</code> for the type of <code>fn</code>, the caller of the function wouldn’t know what parameters and return type <code>fn</code> needs to have. This limitation was lifted in C++20 when abbreviated function templates were added.</p><p>Furthermore, functions with <code>auto</code> parameters cannot be separated into a header and source file. We cover the reason for this restriction when we talk about templates.</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><div class="cpp-note cpp-lightgreenbackground"><p class="cpp-note-title cpp-bottomline">Rule</p><p>Use <code>auto</code> when initializing variables with lambdas, and <code>std::function</code> if you can’t initialize the variable with the lambda.</p></div><p class="cpp-section cpp-topline" style="clear:both">Generic lambdas</p><p>For the most part, lambda parameters work by the same rules as regular function parameters.</p><p>One notable exception is that since C++14 we’re allowed to use <code>auto</code> for parameters (note: in C++20, regular functions are able to use <code>auto</code> for parameters too). When a lambda has one or more <code>auto</code> parameter, the compiler will infer what parameter types are needed from the calls to the lambda.</p><p>Because lambdas with one or more <code>auto</code> parameter can potentially work with a wide variety of types, they are called <span class="cpp-definition">generic lambdas</span>.</p><div class="cpp-note cpp-lightgraybackground"><p class="cpp-note-title cpp-bottomline">For advanced readers</p><p>When used in the context of a lambda, <code>auto</code> is just a shorthand for a template parameter.</p></div><p>Let’s take a look at a generic lambda:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-88-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-88-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-104-close">{</span>
  <span class="token keyword keyword-constexpr">constexpr</span> std<span class="token double-colon punctuation">::</span>array months<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-100-close">{</span> <span class="token comment">// pre-C++17 use std::array&lt;const char*, 12&gt;</span>
    <span class="token string">"January"</span><span class="token punctuation">,</span>
    <span class="token string">"February"</span><span class="token punctuation">,</span>
    <span class="token string">"March"</span><span class="token punctuation">,</span>
    <span class="token string">"April"</span><span class="token punctuation">,</span>
    <span class="token string">"May"</span><span class="token punctuation">,</span>
    <span class="token string">"June"</span><span class="token punctuation">,</span>
    <span class="token string">"July"</span><span class="token punctuation">,</span>
    <span class="token string">"August"</span><span class="token punctuation">,</span>
    <span class="token string">"September"</span><span class="token punctuation">,</span>
    <span class="token string">"October"</span><span class="token punctuation">,</span>
    <span class="token string">"November"</span><span class="token punctuation">,</span>
    <span class="token string">"December"</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-100-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Search for two consecutive months that start with the same letter.</span>
  <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span> sameLetter<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-102-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">adjacent_find</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-93-close">(</span>months<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-89-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-89-open">)</span><span class="token punctuation">,</span> months<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-90-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-90-open">)</span><span class="token punctuation">,</span>
                                      <span class="token punctuation brace-square brace-open brace-level-4" id="pair-97-close">[</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-97-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-91-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> b<span class="token punctuation brace-round brace-close brace-level-4" id="pair-91-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-101-close">{</span>
                                        <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-92-close">(</span>a<span class="token punctuation brace-square brace-open brace-level-6" id="pair-98-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-6" id="pair-98-open">]</span> <span class="token operator">==</span> b<span class="token punctuation brace-square brace-open brace-level-6" id="pair-99-close">[</span><span class="token number">0</span><span class="token punctuation brace-square brace-close brace-level-6" id="pair-99-open">]</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-92-open">)</span><span class="token punctuation">;</span>
                                      <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-101-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-93-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-102-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Make sure that two months were found.</span>
  <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-95-close">(</span>sameLetter <span class="token operator">!=</span> months<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-94-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-94-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-95-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-103-close">{</span>
    <span class="token comment">// std::next returns the next iterator after sameLetter</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>sameLetter <span class="token operator">&lt;&lt;</span> <span class="token string">" and "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>std<span class="token double-colon punctuation">::</span><span class="token function">next</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-96-close">(</span>sameLetter<span class="token punctuation brace-round brace-close brace-level-3" id="pair-96-open">)</span>
              <span class="token operator">&lt;&lt;</span> <span class="token string">" start with the same letter\n"</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-103-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-104-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output:</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0')};</script></span></span></div></div><pre>June and July start with the same letter
</pre><p>In the above example, we use <code>auto</code> parameters to capture our strings by <code>const</code> reference. Because all string types allow access to their individual characters via <code>operator[]</code>, we don’t need to care whether the user is passing in a <code>std::string</code>, C-style string, or something else. This allows us to write a lambda that could accept any of these, meaning if we change the type of <code>months</code> later, we won’t have to rewrite the lambda.</p><p>However, <code>auto</code> isn’t always the best choice. Consider:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-105-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-105-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-116-close">{</span>
  <span class="token keyword keyword-constexpr">constexpr</span> std<span class="token double-colon punctuation">::</span>array months<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-113-close">{</span> <span class="token comment">// pre-C++17 use std::array&lt;const char*, 12&gt;</span>
    <span class="token string">"January"</span><span class="token punctuation">,</span>
    <span class="token string">"February"</span><span class="token punctuation">,</span>
    <span class="token string">"March"</span><span class="token punctuation">,</span>
    <span class="token string">"April"</span><span class="token punctuation">,</span>
    <span class="token string">"May"</span><span class="token punctuation">,</span>
    <span class="token string">"June"</span><span class="token punctuation">,</span>
    <span class="token string">"July"</span><span class="token punctuation">,</span>
    <span class="token string">"August"</span><span class="token punctuation">,</span>
    <span class="token string">"September"</span><span class="token punctuation">,</span>
    <span class="token string">"October"</span><span class="token punctuation">,</span>
    <span class="token string">"November"</span><span class="token punctuation">,</span>
    <span class="token string">"December"</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-113-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Count how many months consist of 5 letters</span>
  <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span> fiveLetterMonths<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-115-close">{</span> std<span class="token double-colon punctuation">::</span><span class="token function">count_if</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-111-close">(</span>months<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-106-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-106-open">)</span><span class="token punctuation">,</span> months<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-107-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-107-open">)</span><span class="token punctuation">,</span>
                                       <span class="token punctuation brace-square brace-open brace-level-4" id="pair-112-close">[</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-112-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-108-close">(</span>std<span class="token double-colon punctuation">::</span>string_view str<span class="token punctuation brace-round brace-close brace-level-4" id="pair-108-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-114-close">{</span>
                                         <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-110-close">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation brace-round brace-open brace-level-6" id="pair-109-close">(</span><span class="token punctuation brace-round brace-close brace-level-6" id="pair-109-open">)</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-110-open">)</span><span class="token punctuation">;</span>
                                       <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-114-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-111-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-115-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"There are "</span> <span class="token operator">&lt;&lt;</span> fiveLetterMonths <span class="token operator">&lt;&lt;</span> <span class="token string">" months with 5 letters\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-116-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output:</p><pre>There are 2 months with 5 letters
</pre><p>In this example, using <code>auto</code> would infer a type of <code>const char*</code>. C-style strings aren’t easy to work with (apart from using <code>operator[]</code>). In this case, we prefer to explicitly define the parameter as a <code>std::string_view</code>, which allows us to work with the underlying data much more easily (e.g. we can ask the string view for its length, even if the user passed in a C-style array).</p><p class="cpp-section cpp-topline" style="clear:both">Generic lambdas and static variables</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>One thing to be aware of is that a unique lambda will be generated for each different type that <code>auto</code> resolves to. The following example shows how one generic lambda turns into two distinct lambdas:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-117-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-117-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-128-close">{</span>
  <span class="token comment">// Print a value and count how many times @print has been called.</span>
  <span class="token keyword keyword-auto">auto</span> print<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-127-close">{</span>
    <span class="token punctuation brace-square brace-open brace-level-3" id="pair-124-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-124-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-118-close">(</span><span class="token keyword keyword-auto">auto</span> value<span class="token punctuation brace-round brace-close brace-level-3" id="pair-118-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-126-close">{</span>
      <span class="token keyword keyword-static">static</span> <span class="token keyword keyword-int">int</span> callCount<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-125-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-125-open">}</span><span class="token punctuation">;</span>
      std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> callCount<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-126-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-127-open">}</span><span class="token punctuation">;</span>

  <span class="token function">print</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-119-close">(</span><span class="token string">"hello"</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-119-open">)</span><span class="token punctuation">;</span> <span class="token comment">// 0: hello</span>
  <span class="token function">print</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-120-close">(</span><span class="token string">"world"</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-120-open">)</span><span class="token punctuation">;</span> <span class="token comment">// 1: world</span>

  <span class="token function">print</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-121-close">(</span><span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-121-open">)</span><span class="token punctuation">;</span> <span class="token comment">// 0: 1</span>
  <span class="token function">print</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-122-close">(</span><span class="token number">2</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-122-open">)</span><span class="token punctuation">;</span> <span class="token comment">// 1: 2</span>

  <span class="token function">print</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-123-close">(</span><span class="token string">"ding dong"</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-123-open">)</span><span class="token punctuation">;</span> <span class="token comment">// 2: ding dong</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-128-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>0: hello
1: world
0: 1
1: 2
2: ding dong
</pre><p>In the above example, we define a lambda and then call it with two different parameters (a string literal parameter, and an integer parameter). This generates two different versions of the lambda (one with a string literal parameter, and one with an integer parameter).</p><p>Most of the time, this is inconsequential. However, note that if the generic lambda uses static duration variables, those variables are not shared between the generated lambdas.</p><p>We can see this in the example above, where each type (string literals and integers) has its own unique count! Although we only wrote the lambda once, two lambdas were generated -- and each has its own version of <code>callCount</code>. To have a shared counter between the two generated lambdas, we’d have to define a global variable or a <code>static</code> local variable outside of the lambda. As you know from previous lessons, both global- and static local variables can cause problems and make it more difficult to understand code. We’ll be able to avoid those variables after talking about lambda captures in the next lesson.</p><p class="cpp-section cpp-topline" style="clear:both">Return type deduction and trailing return types</p><p>If return type deduction is used, a lambda’s return type is deduced from the <code>return</code>-statements inside the lambda. If return type inference is used, all return statements in the lambda must return the same type (otherwise the compiler won’t know which one to prefer).</p><p>For example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-129-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-129-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-138-close">{</span>
  <span class="token keyword keyword-auto">auto</span> divide<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-137-close">{</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-135-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-135-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-130-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation">,</span> <span class="token keyword keyword-bool">bool</span> bInteger<span class="token punctuation brace-round brace-close brace-level-3" id="pair-130-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-136-close">{</span> <span class="token comment">// note: no specified return type</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-131-close">(</span>bInteger<span class="token punctuation brace-round brace-close brace-level-4" id="pair-131-open">)</span>
      <span class="token keyword keyword-return">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>
    <span class="token keyword keyword-else">else</span>
      <span class="token keyword keyword-return">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-double">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-132-close">(</span>x<span class="token punctuation brace-round brace-close brace-level-4" id="pair-132-open">)</span> <span class="token operator">/</span> y<span class="token punctuation">;</span> <span class="token comment">// ERROR: return type doesn't match previous return type</span>
  <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-136-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-137-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">divide</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-133-close">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-133-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">divide</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-134-close">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-134-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-138-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This produces a compile error because the return type of the first return statement (int) doesn’t match the return type of the second return statement (double).</p><p>In the case where we’re returning different types, we have two options:</p><ol start="1"><li>Do explicit casts to make all the return types match, or</li><li>explicitly specify a return type for the lambda, and let the compiler do implicit conversions.</li></ol><p>The second case is usually the better choice:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-139-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-139-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-148-close">{</span>
  <span class="token comment">// note: explicitly specifying this returns a double</span>
  <span class="token keyword keyword-auto">auto</span> divide<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-147-close">{</span> <span class="token punctuation brace-square brace-open brace-level-3" id="pair-145-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-145-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-140-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation">,</span> <span class="token keyword keyword-bool">bool</span> bInteger<span class="token punctuation brace-round brace-close brace-level-3" id="pair-140-open">)</span> <span class="token operator">-&gt;</span> <span class="token keyword keyword-double">double</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-146-close">{</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-141-close">(</span>bInteger<span class="token punctuation brace-round brace-close brace-level-4" id="pair-141-open">)</span>
      <span class="token keyword keyword-return">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span> <span class="token comment">// will do an implicit conversion to double</span>
    <span class="token keyword keyword-else">else</span>
      <span class="token keyword keyword-return">return</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-double">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-142-close">(</span>x<span class="token punctuation brace-round brace-close brace-level-4" id="pair-142-open">)</span> <span class="token operator">/</span> y<span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-146-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-147-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">divide</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-143-close">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-143-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">divide</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-144-close">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-144-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-148-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>That way, if you ever decide to change the return type, you (usually) only need to change the lambda’s return type, and not touch the lambda body.</p><p class="cpp-section cpp-topline" style="clear:both">Standard library function objects</p><p>For common operations (e.g. addition, negation, or comparison) you don’t need to write your own lambdas, because the standard library comes with many basic callable objects that can be used instead. These are defined in the <a href="https://en.cppreference.com/w/cpp/utility/functional#Operator_function_objects">&lt;functional&gt;</a> header.</p><p>In the following example:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-bool">bool</span> <span class="token function">greater</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-149-close">(</span><span class="token keyword keyword-int">int</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> b<span class="token punctuation brace-round brace-close brace-level-1" id="pair-149-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-156-close">{</span>
  <span class="token comment">// Order @a before @b if @a is greater than @b.</span>
  <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-150-close">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation brace-round brace-close brace-level-2" id="pair-150-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-156-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-151-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-151-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-159-close">{</span>
  std<span class="token double-colon punctuation">::</span>array arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-157-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-157-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Pass greater to std::sort</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-154-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-152-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-152-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-153-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-153-open">)</span><span class="token punctuation">,</span> greater<span class="token punctuation brace-round brace-close brace-level-2" id="pair-154-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-155-close">(</span><span class="token keyword keyword-int">int</span> i <span class="token operator">:</span> arr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-155-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-158-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-158-open">}</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-159-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>99 90 80 40 13 5
</pre><p>Instead of converting our <code>greater</code> function to a lambda (which would obscure its meaning a bit), we can instead use <code>std::greater</code>:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span> <span class="token comment">// for std::greater</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-160-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-160-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-168-close">{</span>
  std<span class="token double-colon punctuation">::</span>array arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-165-close">{</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">80</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-165-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// Pass std::greater to std::sort</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-163-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-161-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-161-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-162-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-162-open">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>greater<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-166-close">{</span><span class="token punctuation brace-curly brace-close brace-level-3" id="pair-166-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-163-open">)</span><span class="token punctuation">;</span> <span class="token comment">// note: need curly braces to instantiate object</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-164-close">(</span><span class="token keyword keyword-int">int</span> i <span class="token operator">:</span> arr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-164-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-167-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-167-open">}</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-168-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Output</p><pre>99 90 80 40 13 5
</pre><p class="cpp-section cpp-topline" style="clear:both">Conclusion</p><p>Lambdas and the algorithm library may seem unnecessarily complicated when compared to a solution that uses a loop. However, this combination can allow some very powerful operations in just a few lines of code, and can be more readable than writing your own loops. On top of that, the algorithm library features powerful and easy-to-use parallelism, which you won’t get with loops. Upgrading source code that uses library functions is easier than upgrading code that uses loops.</p><p>Lambdas are great, but they don’t replace regular functions for all cases. Prefer regular functions for non-trivial and reusable cases.</p><p class="cpp-section cpp-topline" style="clear:both">Quiz time</p><div class="quiz" style="clear:both"><p class="quiz-header">Question #1</p><p>Create a <code>struct Student</code> that stores the name and points of a student. Create an array of students and use <a href="https://en.cppreference.com/w/cpp/algorithm/max_element"><code>std::max_element</code></a> to find the student with the most points, then print that student’s name. <code>std::max_element</code> takes the <code>begin</code> and <code>end</code> of a list, and a function that takes 2 parameters and returns <code>true</code> if the first argument is less than the second.</p><p>Given the following array</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-178-close">{</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-177-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-169-close">{</span> <span class="token string">"Albert"</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-169-open">}</span><span class="token punctuation">,</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-170-close">{</span> <span class="token string">"Ben"</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-170-open">}</span><span class="token punctuation">,</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-171-close">{</span> <span class="token string">"Christine"</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-171-open">}</span><span class="token punctuation">,</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-172-close">{</span> <span class="token string">"Dan"</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-172-open">}</span><span class="token punctuation">,</span> <span class="token comment">// Dan has the most points (8).</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-173-close">{</span> <span class="token string">"Enchilada"</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-173-open">}</span><span class="token punctuation">,</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-174-close">{</span> <span class="token string">"Francis"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-174-open">}</span><span class="token punctuation">,</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-175-close">{</span> <span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-175-open">}</span><span class="token punctuation">,</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-176-close">{</span> <span class="token string">"Hagrid"</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-176-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-177-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-178-open">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>your program should print</p><pre>Dan is the best student
</pre><p><a class="hint_link_show" href="javascript:void(0)" onclick="cppHintToggle(document.getElementById('cpp_hint_id_0'),this,'Show Hint','')">Show Hint</a></p><div class="wphint" id="cpp_hint_id_0" style="display:none;margin-bottom:1em">Hint:<div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Student</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-185-close">{</span>
  std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-183-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-183-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> points<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-184-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-184-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-185-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-179-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-179-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-197-close">{</span>
  <span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-195-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-194-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-186-close">{</span> <span class="token string">"Albert"</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-186-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-187-close">{</span> <span class="token string">"Ben"</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-187-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-188-close">{</span> <span class="token string">"Christine"</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-188-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-189-close">{</span> <span class="token string">"Dan"</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-189-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-190-close">{</span> <span class="token string">"Enchilada"</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-190-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-191-close">{</span> <span class="token string">"Francis"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-191-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-192-close">{</span> <span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-192-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-193-close">{</span> <span class="token string">"Hagrid"</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-193-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-194-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-195-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span> best<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-196-close">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">max_element</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-182-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-180-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-180-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-181-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-181-open">)</span><span class="token punctuation">,</span> <span class="token comment">/* lambda */</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-182-open">)</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-196-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> best<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" is the best student\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-197-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string&gt;</span></span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Student</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-207-close">{</span>
  std<span class="token double-colon punctuation">::</span>string name<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-205-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-205-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-int">int</span> points<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-206-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-206-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-207-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-198-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-198-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-220-close">{</span>
  <span class="token keyword keyword-const">const</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Student<span class="token punctuation">,</span> <span class="token number">8</span><span class="token operator">&gt;</span> arr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-217-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-216-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-208-close">{</span> <span class="token string">"Albert"</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-208-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-209-close">{</span> <span class="token string">"Ben"</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-209-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-210-close">{</span> <span class="token string">"Christine"</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-210-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-211-close">{</span> <span class="token string">"Dan"</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-211-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-212-close">{</span> <span class="token string">"Enchilada"</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-212-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-213-close">{</span> <span class="token string">"Francis"</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-213-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-214-close">{</span> <span class="token string">"Greg"</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-214-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-215-close">{</span> <span class="token string">"Hagrid"</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-215-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-216-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-217-open">}</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span> best<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-219-close">{</span>
    std<span class="token double-colon punctuation">::</span><span class="token function">max_element</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-203-close">(</span>arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-199-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-199-open">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-200-close">(</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-200-open">)</span><span class="token punctuation">,</span> <span class="token punctuation brace-square brace-open brace-level-4" id="pair-204-close">[</span><span class="token punctuation brace-square brace-close brace-level-4" id="pair-204-open">]</span><span class="token punctuation brace-round brace-open brace-level-4" id="pair-201-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> b<span class="token punctuation brace-round brace-close brace-level-4" id="pair-201-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-218-close">{</span>
      <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-5" id="pair-202-close">(</span>a<span class="token punctuation">.</span>points <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>points<span class="token punctuation brace-round brace-close brace-level-5" id="pair-202-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-218-open">}</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-203-open">)</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-219-open">}</span><span class="token punctuation">;</span>

  std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> best<span class="token operator">-&gt;</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">" is the best student\n"</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-220-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="quiz" style="clear:both"><p class="quiz-header">Question #2</p><p>Use <code>std::sort</code> and a lambda in the following code to sort the seasons by ascending average temperature.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Season</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-225-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view name<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-223-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-223-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-double">double</span> averageTemperature<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-224-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-224-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-225-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-221-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-221-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-233-close">{</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Season<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> seasons<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-231-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-230-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-226-close">{</span> <span class="token string">"Spring"</span><span class="token punctuation">,</span> <span class="token number">285.0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-226-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-227-close">{</span> <span class="token string">"Summer"</span><span class="token punctuation">,</span> <span class="token number">296.0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-227-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-228-close">{</span> <span class="token string">"Fall"</span><span class="token punctuation">,</span> <span class="token number">288.0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-228-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-229-close">{</span> <span class="token string">"Winter"</span><span class="token punctuation">,</span> <span class="token number">263.0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-229-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-230-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-231-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">/*
   * Use std::sort here
   */</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-222-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> season <span class="token operator">:</span> seasons<span class="token punctuation brace-round brace-close brace-level-2" id="pair-222-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-232-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> season<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-232-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-233-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The program should print</p><pre>Winter
Spring
Fall
Summer
</pre><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string_view&gt;</span></span>

<span class="token keyword keyword-struct">struct</span> <span class="token class-name">Season</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-244-close">{</span>
  std<span class="token double-colon punctuation">::</span>string_view name<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-242-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-242-open">}</span><span class="token punctuation">;</span>
  <span class="token keyword keyword-double">double</span> averageTemperature<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-243-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-243-open">}</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-244-open">}</span><span class="token punctuation">;</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-234-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-234-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-253-close">{</span>
  std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Season<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span> seasons<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-250-close">{</span>
    <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-249-close">{</span> <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-245-close">{</span> <span class="token string">"Spring"</span><span class="token punctuation">,</span> <span class="token number">285.0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-245-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-246-close">{</span> <span class="token string">"Summer"</span><span class="token punctuation">,</span> <span class="token number">296.0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-246-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-247-close">{</span> <span class="token string">"Fall"</span><span class="token punctuation">,</span> <span class="token number">288.0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-247-open">}</span><span class="token punctuation">,</span>
      <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-248-close">{</span> <span class="token string">"Winter"</span><span class="token punctuation">,</span> <span class="token number">263.0</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-248-open">}</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-249-open">}</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-250-open">}</span><span class="token punctuation">;</span>

  <span class="token comment">// We can compare averageTemperature of the two arguments to</span>
  <span class="token comment">// sort the array.</span>
  std<span class="token double-colon punctuation">::</span><span class="token function">sort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-239-close">(</span>seasons<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-235-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-235-open">)</span><span class="token punctuation">,</span> seasons<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-236-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-236-open">)</span><span class="token punctuation">,</span>
            <span class="token punctuation brace-square brace-open brace-level-3" id="pair-241-close">[</span><span class="token punctuation brace-square brace-close brace-level-3" id="pair-241-open">]</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-237-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> b<span class="token punctuation brace-round brace-close brace-level-3" id="pair-237-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-251-close">{</span>
              <span class="token keyword keyword-return">return</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-238-close">(</span>a<span class="token punctuation">.</span>averageTemperature <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>averageTemperature<span class="token punctuation brace-round brace-close brace-level-4" id="pair-238-open">)</span><span class="token punctuation">;</span>
            <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-251-open">}</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-239-open">)</span><span class="token punctuation">;</span>

  <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-240-close">(</span><span class="token keyword keyword-const">const</span> <span class="token keyword keyword-auto">auto</span><span class="token operator">&amp;</span> season <span class="token operator">:</span> seasons<span class="token punctuation brace-round brace-close brace-level-2" id="pair-240-open">)</span>
  <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-252-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> season<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
  <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-252-open">}</span>

  <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-253-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/lambda-captures/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">11.8</span>Lambda captures</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/ellipsis-and-why-to-avoid-them/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">11.6</span>Ellipsis (and why to avoid them)</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/introduction-to-lambdas-anonymous-functions/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/introduction-to-standard-library-algorithms/" rel="prev"><span>10.19 — Introduction to standard library algorithms</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/lambda-captures/" rel="next"><span>11.8 — Lambda captures</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="181"><span class="wpdtc" title="181">181</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CNuhpeCb-PYCFceDwgodWp0GPg"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=03e3af43-be58-4403-69d6-c922720b8523&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/3320243216880173&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/introduction-to-lambdas-anonymous-functions/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CNyhpeCb-PYCFceDwgodWp0GPg"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=03e3af43-be58-4403-69d6-c922720b8523&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/5242902680858348&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/introduction-to-lambdas-anonymous-functions/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>