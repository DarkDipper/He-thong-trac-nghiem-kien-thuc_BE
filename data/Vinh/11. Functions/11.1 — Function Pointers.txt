<main id="main" role="main" class="main"><article id="post-119" class="post-119 post type-post status-publish format-standard hentry category-cpp-tutorial" itemscope="" itemtype="http://schema.org/Article" itemprop="mainEntity"><div class="schema-image"></div><div class="article-inner"><header><div class="entry-meta beforetitle-meta"></div><h1 class="entry-title singular-title" itemprop="headline">11.1 — Function Pointers</h1><div class="entry-meta aftertitle-meta"><span class="author vcard" itemscope="" itemtype="http://schema.org/Person" itemprop="author"><i class="icon-author icon-metas" title="Author"></i><a class="url fn n" rel="author" href="https://www.learncpp.com/author/Alex/" title="View all posts by Alex" itemprop="url"><em itemprop="name">Alex</em></a></span>
<span class="onDate date"><i class="icon-date icon-metas" title="Date"></i><time class="published" datetime="2007-08-08T16:52:10-07:00" itemprop="datePublished">August 8, 2007, 4:52 pm</time>
<time class="updated" datetime="2022-03-29T09:25:18-07:00" itemprop="dateModified">March 29, 2022</time></span></div></header><div class="entry-content" itemprop="articleBody"><div class="code-block code-block-1" style="margin:8px 8px 8px 0;float:left"><div class="cf_monitor" style="margin-right:16px"><span id="ezoic-pub-ad-placeholder-101"></span><span class="ezoic-ad medrectangle-3 medrectangle-3101 adtester-container adtester-container-101" data-ez-name="learncpp_com-medrectangle-3"><span id="div-gpt-ad-learncpp_com-medrectangle-3-0" ezaw="336" ezah="280" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:280px;min-width:336px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-3-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-medrectangle-3_0__container__" style="border: 0pt none; width: 336px; height: 0px;"></div></span></span></div></div><p>In lesson <a href="https://www.learncpp.com/cpp-tutorial/introduction-to-pointers/">9.6 -- Introduction to pointers</a>, you learned that a pointer is a variable that holds the address of another variable. Function pointers are similar, except that instead of pointing to variables, they point to functions!</p><p>Consider the following function:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-0-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-0-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-1-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-1-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Identifier foo is the function’s name. But what type is the function? Functions have their own l-value function type -- in this case, a function type that returns an integer and takes no parameters. Much like variables, functions live at an assigned address in memory.</p><p>When a function is called (via the () operator), execution jumps to the address of the function being called:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-2-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-2-open">)</span> <span class="token comment">// code for foo starts at memory address 0x002717f0</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-5-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-5-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-3-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-3-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-6-close">{</span>
    <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-4-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-4-open">)</span><span class="token punctuation">;</span> <span class="token comment">// jump to address 0x002717f0</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-6-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>At some point in your programming career (if you haven’t already), you’ll probably make a simple mistake:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-7-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-7-open">)</span> <span class="token comment">// code starts at memory address 0x002717f0</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-9-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-9-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-8-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-8-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-10-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> foo <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// we meant to call foo(), but instead we're printing foo itself!</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-10-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Instead of calling function foo() and printing the return value, we’ve unintentionally sent function foo directly to std::cout. What happens in this case?</p><div class="code-block code-block-2" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-130"></span><span class="ezoic-ad medrectangle-4 medrectangle-4130 adtester-container adtester-container-130 ezoic-ad-adaptive" data-ez-name="learncpp_com-medrectangle-4"><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_1')};</script></span></span><span class="ezoic-ad medrectangle-4 medrectangle-4-multi-130 adtester-container adtester-container-130" data-ez-name="learncpp_com-medrectangle-4"><span id="div-gpt-ad-learncpp_com-medrectangle-4-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-medrectangle-4-0_2')};</script></span></span><style>.medrectangle-4-multi-130{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><p>On the author’s machine, this printed:</p><pre>0x002717f0
</pre><p>…but it may print some other value (e.g. 1) on your machine, depending on how your compiler decides to convert the function pointer to another type for printing. If your machine doesn’t print the function’s address, you may be able to force it to do so by converting the function to a void pointer and printing that:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-11-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-11-open">)</span> <span class="token comment">// code starts at memory address 0x002717f0</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-14-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-14-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-12-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-12-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-15-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword keyword-void">void</span><span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-13-close">(</span>foo<span class="token punctuation brace-round brace-close brace-level-2" id="pair-13-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// Tell C++ to interpret function foo as a void pointer</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-15-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Just like it is possible to declare a non-constant pointer to a normal variable, it’s also possible to declare a non-constant pointer to a function. In the rest of this lesson, we’ll examine these function pointers and their uses. Function pointers are a fairly advanced topic, and the rest of this lesson can be safely skipped or skimmed by those only looking for C++ basics.</p><p><strong>Pointers to functions</strong></p><p>The syntax for creating a non-const function pointer is one of the ugliest things you will ever see in C++:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// fcnPtr is a pointer to a function that takes no arguments and returns an integer</span>
<span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-16-close">(</span><span class="token operator">*</span>fcnPtr<span class="token punctuation brace-round brace-close brace-level-1" id="pair-16-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-17-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-17-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In the above snippet, fcnPtr is a pointer to a function that has no parameters and returns an integer. fcnPtr can point to any function that matches this type.</p><div class="code-block code-block-3" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-108"></span></div></div><p>The parentheses around *fcnPtr are necessary for precedence reasons, as <code>int* fcnPtr()</code> would be interpreted as a forward declaration for a function named fcnPtr that takes no parameters and returns a pointer to an integer.</p><p>To make a const function pointer, the const goes after the asterisk:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-18-close">(</span><span class="token operator">*</span><span class="token keyword keyword-const">const</span> fcnPtr<span class="token punctuation brace-round brace-close brace-level-1" id="pair-18-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-19-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-19-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>If you put the const before the int, then that would indicate the function being pointed to would return a const int.</p><p><strong>Assigning a function to a function pointer</strong></p><p>Function pointers can be initialized with a function (and non-const function pointers can be assigned a function). In the above example, we have used foo directly, and it has been converted to a function pointer. Like with pointers to variables, we can also use &amp;foo to get a function pointer to foo.</p><div class="code-block code-block-4" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-124"></span><span class="ezoic-ad box-4 box-4124 adtester-container adtester-container-124" data-ez-name="learncpp_com-box-4"><span id="div-gpt-ad-learncpp_com-box-4-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-4-0')};</script></span></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-20-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-20-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-25-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-25-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">goo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-21-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-21-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-26-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-26-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-22-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-22-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-28-close">{</span>
    <span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-23-close">(</span><span class="token operator">*</span>fcnPtr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-23-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-24-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-24-open">)</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-27-close">{</span> <span class="token operator">&amp;</span>foo <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-27-open">}</span><span class="token punctuation">;</span> <span class="token comment">// fcnPtr points to function foo</span>
    fcnPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>goo<span class="token punctuation">;</span> <span class="token comment">// fcnPtr now points to function goo</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-28-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>One common mistake is to do this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">fcnPtr <span class="token operator">=</span> <span class="token function">goo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-29-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-29-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This would actually assign the return value from a call to function goo() to fcnPtr, which isn’t what we want. We want fcnPtr to be assigned the address of function goo, not the return value from function goo(). So no parentheses are needed.</p><p>Note that the type (parameters and return type) of the function pointer must match the type of the function. Here are some examples of this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// function prototypes</span>
<span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-30-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-30-open">)</span><span class="token punctuation">;</span>
<span class="token keyword keyword-double">double</span> <span class="token function">goo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-31-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-31-open">)</span><span class="token punctuation">;</span>
<span class="token keyword keyword-int">int</span> <span class="token function">hoo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-32-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-round brace-close brace-level-1" id="pair-32-open">)</span><span class="token punctuation">;</span>

<span class="token comment">// function pointer assignments</span>
<span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-33-close">(</span><span class="token operator">*</span>fcnPtr1<span class="token punctuation brace-round brace-close brace-level-1" id="pair-33-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-34-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-34-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-41-close">{</span> <span class="token operator">&amp;</span>foo <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-41-open">}</span><span class="token punctuation">;</span> <span class="token comment">// okay</span>
<span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-35-close">(</span><span class="token operator">*</span>fcnPtr2<span class="token punctuation brace-round brace-close brace-level-1" id="pair-35-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-36-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-36-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-42-close">{</span> <span class="token operator">&amp;</span>goo <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-42-open">}</span><span class="token punctuation">;</span> <span class="token comment">// wrong -- return types don't match!</span>
<span class="token keyword keyword-double">double</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-37-close">(</span><span class="token operator">*</span>fcnPtr4<span class="token punctuation brace-round brace-close brace-level-1" id="pair-37-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-38-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-38-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-43-close">{</span> <span class="token operator">&amp;</span>goo <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-43-open">}</span><span class="token punctuation">;</span> <span class="token comment">// okay</span>
fcnPtr1 <span class="token operator">=</span> <span class="token operator">&amp;</span>hoo<span class="token punctuation">;</span> <span class="token comment">// wrong -- fcnPtr1 has no parameters, but hoo() does</span>
<span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-39-close">(</span><span class="token operator">*</span>fcnPtr3<span class="token punctuation brace-round brace-close brace-level-1" id="pair-39-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-40-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-40-open">)</span><span class="token punctuation brace-curly brace-open brace-level-1" id="pair-44-close">{</span> <span class="token operator">&amp;</span>hoo <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-44-open">}</span><span class="token punctuation">;</span> <span class="token comment">// okay</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Unlike fundamental types, C++ <em>will</em> implicitly convert a function into a function pointer if needed (so you don’t need to use the address-of operator (&amp;) to get the function’s address). However, it will not implicitly convert function pointers to void pointers, or vice-versa.</p><p>Function pointers can also be initialized or assigned the value nullptr:</p><div class="code-block code-block-5" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-120"></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-45-close">(</span><span class="token operator">*</span>fcnptr<span class="token punctuation brace-round brace-close brace-level-1" id="pair-45-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-46-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-46-open">)</span> <span class="token punctuation brace-curly brace-open brace-level-1" id="pair-47-close">{</span> <span class="token keyword keyword-nullptr">nullptr</span> <span class="token punctuation brace-curly brace-close brace-level-1" id="pair-47-open">}</span><span class="token punctuation">;</span> <span class="token comment">// okay</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><strong>Calling a function using a function pointer</strong></p><p>The other primary thing you can do with a function pointer is use it to actually call the function. There are two ways to do this. The first is via explicit dereference:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-48-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-round brace-close brace-level-1" id="pair-48-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-54-close">{</span>
    <span class="token keyword keyword-return">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-54-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-49-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-49-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-56-close">{</span>
    <span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-50-close">(</span><span class="token operator">*</span>fcnPtr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-50-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-51-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-51-open">)</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-55-close">{</span> <span class="token operator">&amp;</span>foo <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-55-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Initialize fcnPtr with function foo</span>
    <span class="token punctuation brace-round brace-open brace-level-2" id="pair-52-close">(</span><span class="token operator">*</span>fcnPtr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-52-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-53-close">(</span><span class="token number">5</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-53-open">)</span><span class="token punctuation">;</span> <span class="token comment">// call function foo(5) through fcnPtr.</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-56-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The second way is via implicit dereference:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-57-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-round brace-close brace-level-1" id="pair-57-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-62-close">{</span>
    <span class="token keyword keyword-return">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-62-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-58-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-58-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-64-close">{</span>
    <span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-59-close">(</span><span class="token operator">*</span>fcnPtr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-59-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-60-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-60-open">)</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-63-close">{</span> <span class="token operator">&amp;</span>foo <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-63-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Initialize fcnPtr with function foo</span>
    <span class="token function">fcnPtr</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-61-close">(</span><span class="token number">5</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-61-open">)</span><span class="token punctuation">;</span> <span class="token comment">// call function foo(5) through fcnPtr.</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-64-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>As you can see, the implicit dereference method looks just like a normal function call -- which is what you’d expect, since normal function names are pointers to functions anyway! However, some older compilers do not support the implicit dereference method, but all modern compilers should.</p><p>One interesting note: Default parameters won’t work for functions called through function pointers. Default parameters are resolved at compile-time (that is, if you don’t supply an argument for a defaulted parameter, the compiler substitutes one in for you when the code is compiled). However, function pointers are resolved at run-time. Consequently, default parameters can not be resolved when making a function call with a function pointer. You’ll explicitly have to pass in values for any defaulted parameters in this case.</p><div class="code-block code-block-6" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-125"></span><span class="ezoic-ad banner-1 banner-1125 adtester-container adtester-container-125" data-ez-name="learncpp_com-banner-1"><span id="div-gpt-ad-learncpp_com-banner-1-0" ezaw="970" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:300px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-banner-1-0')};</script></span></span></div></div><p>Also note that because function pointers can be set to nullptr, it’s a good idea to assert or conditionally test whether your function pointer is a null pointer before calling it. Just like with normal pointers, dereferencing a null function pointer lead to undefined behavior.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-65-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-round brace-close brace-level-1" id="pair-65-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-71-close">{</span>
    <span class="token keyword keyword-return">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-71-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-66-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-66-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-73-close">{</span>
    <span class="token keyword keyword-int">int</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-67-close">(</span><span class="token operator">*</span>fcnPtr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-67-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-68-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-68-open">)</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-72-close">{</span> <span class="token operator">&amp;</span>foo <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-72-open">}</span><span class="token punctuation">;</span> <span class="token comment">// Initialize fcnPtr with function foo</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-69-close">(</span>fcnPtr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-69-open">)</span> <span class="token comment">// make sure fcnPtr isn't a null pointer</span>
        <span class="token function">fcnPtr</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-70-close">(</span><span class="token number">5</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-70-open">)</span><span class="token punctuation">;</span> <span class="token comment">// otherwise this will lead to undefined behavior</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-73-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><strong>Passing functions as arguments to other functions</strong></p><p>One of the most useful things to do with function pointers is pass a function as an argument to another function. Functions used as arguments to another function are sometimes called <strong>callback functions</strong>.</p><p>Consider a case where you are writing a function to perform a task (such as sorting an array), but you want the user to be able to define how a particular part of that task will be performed (such as whether the array is sorted in ascending or descending order). Let’s take a closer look at this problem as applied specifically to sorting, as an example that can be generalized to other similar problems.</p><p>Many comparison-based sorting algorithms work on a similar concept: the sorting algorithm iterates through a list of numbers, does comparisons on pairs of numbers, and reorders the numbers based on the results of those comparisons. Consequently, by varying the comparison, we can change the way the algorithm sorts without affecting the rest of the sorting code.</p><div class="code-block code-block-7" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-121"></span><span class="ezoic-ad large-leaderboard-2 large-leaderboard-2121 adtester-container adtester-container-121" data-ez-name="learncpp_com-large-leaderboard-2"><span id="div-gpt-ad-learncpp_com-large-leaderboard-2-0" ezaw="580" ezah="400" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-leaderboard-2-0')};</script></span></span></div></div><p>Here is our selection sort routine from a previous lesson:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span> <span class="token comment">// for std::swap</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">SelectionSort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-74-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> size<span class="token punctuation brace-round brace-close brace-level-1" id="pair-74-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-90-close">{</span>
    <span class="token comment">// Step through each element of the array</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-76-close">(</span><span class="token keyword keyword-int">int</span> startIndex<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-84-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-84-open">}</span><span class="token punctuation">;</span> startIndex <span class="token operator">&lt;</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-75-close">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-75-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>startIndex<span class="token punctuation brace-round brace-close brace-level-2" id="pair-76-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-89-close">{</span>
        <span class="token comment">// smallestIndex is the index of the smallest element we've encountered so far.</span>
        <span class="token keyword keyword-int">int</span> smallestIndex<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-85-close">{</span> startIndex <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-85-open">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Look for smallest element remaining in the array (starting at startIndex+1)</span>
        <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-77-close">(</span><span class="token keyword keyword-int">int</span> currentIndex<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-86-close">{</span> startIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-86-open">}</span><span class="token punctuation">;</span> currentIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>currentIndex<span class="token punctuation brace-round brace-close brace-level-3" id="pair-77-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-88-close">{</span>
            <span class="token comment">// If the current element is smaller than our previously found smallest</span>
            <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-78-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-5" id="pair-80-close">[</span>smallestIndex<span class="token punctuation brace-square brace-close brace-level-5" id="pair-80-open">]</span> <span class="token operator">&gt;</span> array<span class="token punctuation brace-square brace-open brace-level-5" id="pair-81-close">[</span>currentIndex<span class="token punctuation brace-square brace-close brace-level-5" id="pair-81-open">]</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-78-open">)</span> <span class="token comment">// COMPARISON DONE HERE</span>
            <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-87-close">{</span>
                <span class="token comment">// This is the new smallest number for this iteration</span>
                smallestIndex <span class="token operator">=</span> currentIndex<span class="token punctuation">;</span>
            <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-87-open">}</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-88-open">}</span>

        <span class="token comment">// Swap our start element with our smallest element</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-79-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-4" id="pair-82-close">[</span>startIndex<span class="token punctuation brace-square brace-close brace-level-4" id="pair-82-open">]</span><span class="token punctuation">,</span> array<span class="token punctuation brace-square brace-open brace-level-4" id="pair-83-close">[</span>smallestIndex<span class="token punctuation brace-square brace-close brace-level-4" id="pair-83-open">]</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-79-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-89-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-90-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Let’s replace that comparison with a function to do the comparison. Because our comparison function is going to compare two integers and return a boolean value to indicate whether the elements should be swapped, it will look something like this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-bool">bool</span> <span class="token function">ascending</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-91-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-91-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-92-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">;</span> <span class="token comment">// swap if the first element is greater than the second</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-92-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>And here’s our selection sort routine using the ascending() function to do the comparison:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span> <span class="token comment">// for std::swap</span></span>

<span class="token keyword keyword-void">void</span> <span class="token function">SelectionSort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-93-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> size<span class="token punctuation brace-round brace-close brace-level-1" id="pair-93-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-110-close">{</span>
    <span class="token comment">// Step through each element of the array</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-95-close">(</span><span class="token keyword keyword-int">int</span> startIndex<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-104-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-104-open">}</span><span class="token punctuation">;</span> startIndex <span class="token operator">&lt;</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-94-close">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-94-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>startIndex<span class="token punctuation brace-round brace-close brace-level-2" id="pair-95-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-109-close">{</span>
        <span class="token comment">// smallestIndex is the index of the smallest element we've encountered so far.</span>
        <span class="token keyword keyword-int">int</span> smallestIndex<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-105-close">{</span> startIndex <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-105-open">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Look for smallest element remaining in the array (starting at startIndex+1)</span>
        <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-96-close">(</span><span class="token keyword keyword-int">int</span> currentIndex<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-106-close">{</span> startIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-106-open">}</span><span class="token punctuation">;</span> currentIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>currentIndex<span class="token punctuation brace-round brace-close brace-level-3" id="pair-96-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-108-close">{</span>
            <span class="token comment">// If the current element is smaller than our previously found smallest</span>
            <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-98-close">(</span><span class="token function">ascending</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-97-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-6" id="pair-100-close">[</span>smallestIndex<span class="token punctuation brace-square brace-close brace-level-6" id="pair-100-open">]</span><span class="token punctuation">,</span> array<span class="token punctuation brace-square brace-open brace-level-6" id="pair-101-close">[</span>currentIndex<span class="token punctuation brace-square brace-close brace-level-6" id="pair-101-open">]</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-97-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-98-open">)</span> <span class="token comment">// COMPARISON DONE HERE</span>
            <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-107-close">{</span>
                <span class="token comment">// This is the new smallest number for this iteration</span>
                smallestIndex <span class="token operator">=</span> currentIndex<span class="token punctuation">;</span>
            <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-107-open">}</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-108-open">}</span>

        <span class="token comment">// Swap our start element with our smallest element</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-99-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-4" id="pair-102-close">[</span>startIndex<span class="token punctuation brace-square brace-close brace-level-4" id="pair-102-open">]</span><span class="token punctuation">,</span> array<span class="token punctuation brace-square brace-open brace-level-4" id="pair-103-close">[</span>smallestIndex<span class="token punctuation brace-square brace-close brace-level-4" id="pair-103-open">]</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-99-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-109-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-110-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Now, in order to let the caller decide how the sorting will be done, instead of using our own hard-coded comparison function, we’ll allow the caller to provide their own sorting function! This is done via a function pointer.</p><p>Because the caller’s comparison function is going to compare two integers and return a boolean value, a pointer to such a function would look something like this:</p><div class="code-block code-block-8" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-126"></span><span class="ezoic-ad leader-1 leader-1126 adtester-container adtester-container-126 ezoic-ad-adaptive" data-ez-name="learncpp_com-leader-1"><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_1" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_1')};</script></span></span><span class="ezoic-ad leader-1 leader-1-multi-126 adtester-container adtester-container-126" data-ez-name="learncpp_com-leader-1"><span id="div-gpt-ad-learncpp_com-leader-1-0_2" ezaw="323" ezah="250" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:323px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-leader-1-0_2')};</script></span></span><style>.leader-1-multi-126{border:none!important;display:block!important;float:none!important;line-height:0;margin-bottom:15px!important;margin-left:0!important;margin-right:0!important;margin-top:15px!important;max-width:100%!important;min-height:250px;min-width:300px;padding:0;text-align:center!important}</style></span></div></div><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-bool">bool</span> <span class="token punctuation brace-round brace-open brace-level-1" id="pair-111-close">(</span><span class="token operator">*</span>comparisonFcn<span class="token punctuation brace-round brace-close brace-level-1" id="pair-111-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-112-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-112-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>So, we’ll allow the caller to pass our sort routine a pointer to their desired comparison function as the third parameter, and then we’ll use the caller’s function to do the comparison.</p><p>Here’s a full example of a selection sort that uses a function pointer parameter to do a user-defined comparison, along with an example of how to call it:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;utility&gt;</span> <span class="token comment">// for std::swap</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// Note our user-defined comparison is the third parameter</span>
<span class="token keyword keyword-void">void</span> <span class="token function">selectionSort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-115-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> size<span class="token punctuation">,</span> <span class="token keyword keyword-bool">bool</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-113-close">(</span><span class="token operator">*</span>comparisonFcn<span class="token punctuation brace-round brace-close brace-level-2" id="pair-113-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-114-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-114-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-115-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-143-close">{</span>
    <span class="token comment">// Step through each element of the array</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-117-close">(</span><span class="token keyword keyword-int">int</span> startIndex<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-137-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-137-open">}</span><span class="token punctuation">;</span> startIndex <span class="token operator">&lt;</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-116-close">(</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-116-open">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>startIndex<span class="token punctuation brace-round brace-close brace-level-2" id="pair-117-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-142-close">{</span>
        <span class="token comment">// bestIndex is the index of the smallest/largest element we've encountered so far.</span>
        <span class="token keyword keyword-int">int</span> bestIndex<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-138-close">{</span> startIndex <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-138-open">}</span><span class="token punctuation">;</span>

        <span class="token comment">// Look for smallest/largest element remaining in the array (starting at startIndex+1)</span>
        <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-118-close">(</span><span class="token keyword keyword-int">int</span> currentIndex<span class="token punctuation brace-curly brace-open brace-level-4" id="pair-139-close">{</span> startIndex <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-139-open">}</span><span class="token punctuation">;</span> currentIndex <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>currentIndex<span class="token punctuation brace-round brace-close brace-level-3" id="pair-118-open">)</span>
        <span class="token punctuation brace-curly brace-open brace-level-3" id="pair-141-close">{</span>
            <span class="token comment">// If the current element is smaller/larger than our previously found smallest</span>
            <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-4" id="pair-120-close">(</span><span class="token function">comparisonFcn</span><span class="token punctuation brace-round brace-open brace-level-5" id="pair-119-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-6" id="pair-131-close">[</span>bestIndex<span class="token punctuation brace-square brace-close brace-level-6" id="pair-131-open">]</span><span class="token punctuation">,</span> array<span class="token punctuation brace-square brace-open brace-level-6" id="pair-132-close">[</span>currentIndex<span class="token punctuation brace-square brace-close brace-level-6" id="pair-132-open">]</span><span class="token punctuation brace-round brace-close brace-level-5" id="pair-119-open">)</span><span class="token punctuation brace-round brace-close brace-level-4" id="pair-120-open">)</span> <span class="token comment">// COMPARISON DONE HERE</span>
            <span class="token punctuation brace-curly brace-open brace-level-4" id="pair-140-close">{</span>
                <span class="token comment">// This is the new smallest/largest number for this iteration</span>
                bestIndex <span class="token operator">=</span> currentIndex<span class="token punctuation">;</span>
            <span class="token punctuation brace-curly brace-close brace-level-4" id="pair-140-open">}</span>
        <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-141-open">}</span>

        <span class="token comment">// Swap our start element with our smallest/largest element</span>
        std<span class="token double-colon punctuation">::</span><span class="token function">swap</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-121-close">(</span>array<span class="token punctuation brace-square brace-open brace-level-4" id="pair-133-close">[</span>startIndex<span class="token punctuation brace-square brace-close brace-level-4" id="pair-133-open">]</span><span class="token punctuation">,</span> array<span class="token punctuation brace-square brace-open brace-level-4" id="pair-134-close">[</span>bestIndex<span class="token punctuation brace-square brace-close brace-level-4" id="pair-134-open">]</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-121-open">)</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-142-open">}</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-143-open">}</span>

<span class="token comment">// Here is a comparison function that sorts in ascending order</span>
<span class="token comment">// (Note: it's exactly the same as the previous ascending() function)</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">ascending</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-122-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-122-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-144-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">&gt;</span> y<span class="token punctuation">;</span> <span class="token comment">// swap if the first element is greater than the second</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-144-open">}</span>

<span class="token comment">// Here is a comparison function that sorts in descending order</span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">descending</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-123-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-123-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-145-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> <span class="token comment">// swap if the second element is greater than the first</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-145-open">}</span>

<span class="token comment">// This function prints out the values in the array</span>
<span class="token keyword keyword-void">void</span> <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-124-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> size<span class="token punctuation brace-round brace-close brace-level-1" id="pair-124-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-148-close">{</span>
    <span class="token keyword keyword-for">for</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-125-close">(</span><span class="token keyword keyword-int">int</span> index<span class="token punctuation brace-curly brace-open brace-level-3" id="pair-146-close">{</span> <span class="token number">0</span> <span class="token punctuation brace-curly brace-close brace-level-3" id="pair-146-open">}</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>index<span class="token punctuation brace-round brace-close brace-level-2" id="pair-125-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-147-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation brace-square brace-open brace-level-3" id="pair-135-close">[</span>index<span class="token punctuation brace-square brace-close brace-level-3" id="pair-135-open">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-147-open">}</span>

    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-148-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-126-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-126-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-150-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-136-close">[</span><span class="token number">9</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-136-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-149-close">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-149-open">}</span><span class="token punctuation">;</span>

    <span class="token comment">// Sort the array in descending order using the descending() function</span>
    <span class="token function">selectionSort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-127-close">(</span>array<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> descending<span class="token punctuation brace-round brace-close brace-level-2" id="pair-127-open">)</span><span class="token punctuation">;</span>
    <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-128-close">(</span>array<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-128-open">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Sort the array in ascending order using the ascending() function</span>
    <span class="token function">selectionSort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-129-close">(</span>array<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> ascending<span class="token punctuation brace-round brace-close brace-level-2" id="pair-129-open">)</span><span class="token punctuation">;</span>
    <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-130-close">(</span>array<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-130-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-150-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This program produces the result:</p><pre>9 8 7 6 5 4 3 2 1
1 2 3 4 5 6 7 8 9
</pre><p>Is that cool or what? We’ve given the caller the ability to control how our selection sort does its job.</p><p>The caller can even define their own “strange” comparison functions:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-bool">bool</span> <span class="token function">evensFirst</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-151-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-151-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-163-close">{</span>
	<span class="token comment">// if x is even and y is odd, x goes first (no swap needed)</span>
	<span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-154-close">(</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-152-close">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-152-open">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-153-close">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-153-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-154-open">)</span>
		<span class="token keyword keyword-return">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

	<span class="token comment">// if x is odd and y is even, y goes first (swap needed)</span>
	<span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-157-close">(</span><span class="token operator">!</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-155-close">(</span>x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-155-open">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation brace-round brace-open brace-level-3" id="pair-156-close">(</span>y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-156-open">)</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-157-open">)</span>
		<span class="token keyword keyword-return">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token comment">// otherwise sort in ascending order</span>
	<span class="token keyword keyword-return">return</span> <span class="token function">ascending</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-158-close">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-158-open">)</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-163-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-159-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-159-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-165-close">{</span>
    <span class="token keyword keyword-int">int</span> array<span class="token punctuation brace-square brace-open brace-level-2" id="pair-162-close">[</span><span class="token number">9</span><span class="token punctuation brace-square brace-close brace-level-2" id="pair-162-open">]</span><span class="token punctuation brace-curly brace-open brace-level-2" id="pair-164-close">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-164-open">}</span><span class="token punctuation">;</span>

    <span class="token function">selectionSort</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-160-close">(</span>array<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> evensFirst<span class="token punctuation brace-round brace-close brace-level-2" id="pair-160-open">)</span><span class="token punctuation">;</span>
    <span class="token function">printArray</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-161-close">(</span>array<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-161-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-165-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>The above snippet produces the following result:</p><pre>2 4 6 8 1 3 5 7 9
</pre><p>As you can see, using a function pointer in this context provides a nice way to allow a caller to “hook” their own functionality into something you’ve previously written and tested, which helps facilitate code reuse! Previously, if you wanted to sort one array in descending order and another in ascending order, you’d need multiple versions of the sort routine. Now you can have one version that can sort any way the caller desires!</p><p>Note: If a function parameter is of a function type, it will be converted to a pointer to the function type. This means</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-void">void</span> <span class="token function">selectionSort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-168-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> size<span class="token punctuation">,</span> <span class="token keyword keyword-bool">bool</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-166-close">(</span><span class="token operator">*</span>comparisonFcn<span class="token punctuation brace-round brace-close brace-level-2" id="pair-166-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-167-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-167-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-168-open">)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>can be equivalently written as:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-void">void</span> <span class="token function">selectionSort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-170-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> size<span class="token punctuation">,</span> <span class="token keyword keyword-bool">bool</span> <span class="token function">comparisonFcn</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-169-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-169-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-170-open">)</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This only works for function parameters, not stand-alone function pointers, and so is of somewhat limited use.</p><p><strong>Providing default functions</strong></p><p>If you’re going to allow the caller to pass in a function as a parameter, it can often be useful to provide some standard functions for the caller to use for their convenience. For example, in the selection sort example above, providing the ascending() and descending() function along with the selectionSort() function would make the caller’s life easier, as they wouldn’t have to rewrite ascending() or descending() every time they want to use them.</p><p>You can even set one of these as a default parameter:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token comment">// Default the sort to ascending sort</span>
<span class="token keyword keyword-void">void</span> <span class="token function">selectionSort</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-173-close">(</span><span class="token keyword keyword-int">int</span><span class="token operator">*</span> array<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> size<span class="token punctuation">,</span> <span class="token keyword keyword-bool">bool</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-171-close">(</span><span class="token operator">*</span>comparisonFcn<span class="token punctuation brace-round brace-close brace-level-2" id="pair-171-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-172-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-172-open">)</span> <span class="token operator">=</span> ascending<span class="token punctuation brace-round brace-close brace-level-1" id="pair-173-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>In this case, as long as the user calls selectionSort normally (not through a function pointer), the comparisonFcn parameter will default to ascending.</p><p><strong>Making function pointers prettier with type aliases</strong></p><p>Let’s face it -- the syntax for pointers to functions is ugly. However, type aliases can be used to make pointers to functions look more like regular variables:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-using">using</span> ValidateFunction <span class="token operator">=</span> <span class="token keyword keyword-bool">bool</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-174-close">(</span><span class="token operator">*</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-174-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-175-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-175-open">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This defines a type alias called “ValidateFunction” that is a pointer to a function that takes two ints and returns a bool.</p><p>Now instead of doing this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-bool">bool</span> <span class="token function">validate</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-178-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation">,</span> <span class="token keyword keyword-bool">bool</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-176-close">(</span><span class="token operator">*</span>fcnPtr<span class="token punctuation brace-round brace-close brace-level-2" id="pair-176-open">)</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-177-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-177-open">)</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-178-open">)</span><span class="token punctuation">;</span> <span class="token comment">// ugly</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>You can do this:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-bool">bool</span> <span class="token function">validate</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-179-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation">,</span> ValidateFunction pfcn<span class="token punctuation brace-round brace-close brace-level-1" id="pair-179-open">)</span> <span class="token comment">// clean</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><strong>Using std::function</strong></p><p>An alternate method of defining and storing function pointers is to use std::function, which is part of the standard library &lt;functional&gt; header. To define a function pointer using this method, declare a std::function object like so:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token keyword keyword-bool">bool</span> <span class="token function">validate</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-181-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-bool">bool</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-180-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-180-open">)</span><span class="token operator">&gt;</span> fcn<span class="token punctuation brace-round brace-close brace-level-1" id="pair-181-open">)</span><span class="token punctuation">;</span> <span class="token comment">// std::function method that returns a bool and takes two int parameters</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 32px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>As you see, both the return type and parameters go inside angled brackets, with the parameters inside parentheses. If there are no parameters, the parentheses can be left empty.</p><p>Updating our earlier example with std::function:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-182-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-182-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-187-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-187-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">goo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-183-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-183-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-188-close">{</span>
    <span class="token keyword keyword-return">return</span> <span class="token number">6</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-188-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-184-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-184-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-190-close">{</span>
    std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-185-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-185-open">)</span><span class="token operator">&gt;</span> fcnPtr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-189-close">{</span> <span class="token operator">&amp;</span>foo <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-189-open">}</span><span class="token punctuation">;</span> <span class="token comment">// declare function pointer that returns an int and takes no parameters</span>
    fcnPtr <span class="token operator">=</span> <span class="token operator">&amp;</span>goo<span class="token punctuation">;</span> <span class="token comment">// fcnPtr now points to function goo</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">fcnPtr</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-186-close">(</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-186-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span> <span class="token comment">// call the function just like normal</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-190-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 32px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>Note that you can also type alias std::function:</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-using">using</span> ValidateFunctionRaw <span class="token operator">=</span> <span class="token keyword keyword-bool">bool</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-191-close">(</span><span class="token operator">*</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-191-open">)</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-192-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-192-open">)</span><span class="token punctuation">;</span> <span class="token comment">// type alias to raw function pointer</span>
<span class="token keyword keyword-using">using</span> ValidateFunction <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-bool">bool</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-193-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-193-open">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span> <span class="token comment">// type alias to std::function</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p><strong>Type inference for function pointers</strong></p><p>Much like the <em>auto</em> keyword can be used to infer the type of normal variables, the <em>auto</em> keyword can also infer the type of a function pointer.</p><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">foo</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-194-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-round brace-close brace-level-1" id="pair-194-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-197-close">{</span>
	<span class="token keyword keyword-return">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-197-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-195-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-195-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-199-close">{</span>
	<span class="token keyword keyword-auto">auto</span> fcnPtr<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-198-close">{</span> <span class="token operator">&amp;</span>foo <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-198-open">}</span><span class="token punctuation">;</span>
	std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">fcnPtr</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-196-close">(</span><span class="token number">5</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-196-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

	<span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-199-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span><span style="height: 16px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div><p>This works exactly like you’d expect, and the syntax is very clean. The downside is, of course, that all of the details about the function’s parameters types and return type are hidden, so it’s easier to make a mistake when making a call with the function, or using its return value.</p><p><strong>Conclusion</strong></p><p>Function pointers are useful primarily when you want to store functions in an array (or other structure), or when you need to pass a function to another function. Because the native syntax to declare function pointers is ugly and error prone, we recommend using std::function. In places where a function pointer type is only used once (e.g. a single parameter or return value), std::function can be used directly. In places where a function pointer type is used multiple times, a type alias to a std::function is a better choice (to prevent repeating yourself).</p><p><strong>Quiz time!</strong></p><ol start="1"><li>In this quiz, we’re going to write a version of our basic calculator using function pointers.</li></ol><p>1a) Create a short program asking the user for two integer inputs and a mathematical operation (‘+’, ‘-‘, ‘*’, ‘/’). Ensure the user enters a valid operation.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_0'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_0" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">getInteger</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-200-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-200-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-208-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter an integer: "</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-207-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-207-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-208-open">}</span>

<span class="token keyword keyword-char">char</span> <span class="token function">getOperation</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-201-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-201-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-211-close">{</span>
    <span class="token keyword keyword-char">char</span> op<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-209-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-209-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-do">do</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-210-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter an operation ('+', '-', '*', '/'): "</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> op<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-210-open">}</span>
    <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-202-close">(</span>op<span class="token operator">!=</span><span class="token string">'+'</span> <span class="token operator">&amp;&amp;</span> op<span class="token operator">!=</span><span class="token string">'-'</span> <span class="token operator">&amp;&amp;</span> op<span class="token operator">!=</span><span class="token string">'*'</span> <span class="token operator">&amp;&amp;</span> op<span class="token operator">!=</span><span class="token string">'/'</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-202-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> op<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-211-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-203-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-203-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-215-close">{</span>
    <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-212-close">{</span> <span class="token function">getInteger</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-204-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-204-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-212-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-char">char</span> op<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-213-close">{</span> <span class="token function">getOperation</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-205-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-205-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-213-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-214-close">{</span> <span class="token function">getInteger</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-206-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-206-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-214-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-215-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>1b) Write functions named add(), subtract(), multiply(), and division(). These should take two integer parameters and return an integer.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_1'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_1" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-int">int</span> <span class="token function">add</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-216-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-216-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-220-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-220-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">subtract</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-217-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-217-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-221-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-221-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">multiply</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-218-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-218-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-222-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-222-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">division</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-219-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-219-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-223-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-223-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>1c) Create a type alias named ArithmeticFunction for a pointer to a function that takes two integer parameters and returns an integer. Use std::function.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_2'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_2" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token keyword keyword-using">using</span> ArithmeticFunction <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-224-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-224-open">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>1d) Write a function named getArithmeticFunction() that takes an operator character and returns the appropriate function as a function pointer.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_3'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_3" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp">ArithmeticFunction <span class="token function">getArithmeticFunction</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-225-close">(</span><span class="token keyword keyword-char">char</span> op<span class="token punctuation brace-round brace-close brace-level-1" id="pair-225-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-228-close">{</span>
    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-226-close">(</span>op<span class="token punctuation brace-round brace-close brace-level-2" id="pair-226-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-227-close">{</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'+'</span><span class="token operator">:</span> <span class="token keyword keyword-return">return</span> <span class="token operator">&amp;</span>add<span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'-'</span><span class="token operator">:</span> <span class="token keyword keyword-return">return</span> <span class="token operator">&amp;</span>subtract<span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'*'</span><span class="token operator">:</span> <span class="token keyword keyword-return">return</span> <span class="token operator">&amp;</span>multiply<span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'/'</span><span class="token operator">:</span> <span class="token keyword keyword-return">return</span> <span class="token operator">&amp;</span>division<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-227-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token keyword keyword-nullptr">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-228-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>1e) Modify your main() function to call getArithmeticFunction(). Call the return value from that function with your inputs and print the result.</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_4'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_4" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-229-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-229-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-240-close">{</span>
    <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-236-close">{</span> <span class="token function">getInteger</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-230-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-230-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-236-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-char">char</span> op<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-237-close">{</span> <span class="token function">getOperation</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-231-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-231-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-237-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-238-close">{</span> <span class="token function">getInteger</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-232-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-232-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-238-open">}</span><span class="token punctuation">;</span>

    ArithmeticFunction fcn<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-239-close">{</span> <span class="token function">getArithmeticFunction</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-233-close">(</span>op<span class="token punctuation brace-round brace-close brace-level-3" id="pair-233-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-239-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-234-close">(</span>fcn<span class="token punctuation brace-round brace-close brace-level-2" id="pair-234-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> op <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fcn</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-235-close">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-235-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-240-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><p>Here’s the full program:</p><p><a class="solution_link_show" href="javascript:void(0)" onclick="cppSolutionToggle(document.getElementById('cpp_solution_id_5'),this,'Show Solution','Hide Solution')">Show Solution</a></p><div class="wpsolution" id="cpp_solution_id_5" style="display:none"><div class="code-toolbar"><pre class="line-numbers language-cpp" tabindex="0"><code class="match-braces language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;functional&gt;</span></span>

<span class="token keyword keyword-int">int</span> <span class="token function">getInteger</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-241-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-241-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-259-close">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter an integer: "</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-258-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-258-open">}</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> x<span class="token punctuation">;</span>
    <span class="token keyword keyword-return">return</span> x<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-259-open">}</span>

<span class="token keyword keyword-char">char</span> <span class="token function">getOperation</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-242-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-242-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-262-close">{</span>
    <span class="token keyword keyword-char">char</span> op<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-260-close">{</span><span class="token punctuation brace-curly brace-close brace-level-2" id="pair-260-open">}</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-do">do</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-261-close">{</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Enter an operation ('+', '-', '*', '/'): "</span><span class="token punctuation">;</span>
        std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> op<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-261-open">}</span>
    <span class="token keyword keyword-while">while</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-243-close">(</span>op<span class="token operator">!=</span><span class="token string">'+'</span> <span class="token operator">&amp;&amp;</span> op<span class="token operator">!=</span><span class="token string">'-'</span> <span class="token operator">&amp;&amp;</span> op<span class="token operator">!=</span><span class="token string">'*'</span> <span class="token operator">&amp;&amp;</span> op<span class="token operator">!=</span><span class="token string">'/'</span><span class="token punctuation brace-round brace-close brace-level-2" id="pair-243-open">)</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> op<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-262-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">add</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-244-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-244-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-263-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-263-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">subtract</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-245-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-245-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-264-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">-</span> y<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-264-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">multiply</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-246-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-246-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-265-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-265-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">division</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-247-close">(</span><span class="token keyword keyword-int">int</span> x<span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-round brace-close brace-level-1" id="pair-247-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-266-close">{</span>
    <span class="token keyword keyword-return">return</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-266-open">}</span>

<span class="token keyword keyword-using">using</span> ArithmeticFunction <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span>function<span class="token operator">&lt;</span><span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-248-close">(</span><span class="token keyword keyword-int">int</span><span class="token punctuation">,</span> <span class="token keyword keyword-int">int</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-248-open">)</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

ArithmeticFunction <span class="token function">getArithmeticFunction</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-249-close">(</span><span class="token keyword keyword-char">char</span> op<span class="token punctuation brace-round brace-close brace-level-1" id="pair-249-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-268-close">{</span>
    <span class="token keyword keyword-switch">switch</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-250-close">(</span>op<span class="token punctuation brace-round brace-close brace-level-2" id="pair-250-open">)</span>
    <span class="token punctuation brace-curly brace-open brace-level-2" id="pair-267-close">{</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'+'</span><span class="token operator">:</span> <span class="token keyword keyword-return">return</span> <span class="token operator">&amp;</span>add<span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'-'</span><span class="token operator">:</span> <span class="token keyword keyword-return">return</span> <span class="token operator">&amp;</span>subtract<span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'*'</span><span class="token operator">:</span> <span class="token keyword keyword-return">return</span> <span class="token operator">&amp;</span>multiply<span class="token punctuation">;</span>
    <span class="token keyword keyword-case">case</span> <span class="token string">'/'</span><span class="token operator">:</span> <span class="token keyword keyword-return">return</span> <span class="token operator">&amp;</span>division<span class="token punctuation">;</span>
    <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-267-open">}</span>

    <span class="token keyword keyword-return">return</span> <span class="token keyword keyword-nullptr">nullptr</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-268-open">}</span>

<span class="token keyword keyword-int">int</span> <span class="token function">main</span><span class="token punctuation brace-round brace-open brace-level-1" id="pair-251-close">(</span><span class="token punctuation brace-round brace-close brace-level-1" id="pair-251-open">)</span>
<span class="token punctuation brace-curly brace-open brace-level-1" id="pair-273-close">{</span>
    <span class="token keyword keyword-int">int</span> x<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-269-close">{</span> <span class="token function">getInteger</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-252-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-252-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-269-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-char">char</span> op<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-270-close">{</span> <span class="token function">getOperation</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-253-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-253-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-270-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-int">int</span> y<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-271-close">{</span> <span class="token function">getInteger</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-254-close">(</span><span class="token punctuation brace-round brace-close brace-level-3" id="pair-254-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-271-open">}</span><span class="token punctuation">;</span>

    ArithmeticFunction fcn<span class="token punctuation brace-curly brace-open brace-level-2" id="pair-272-close">{</span> <span class="token function">getArithmeticFunction</span><span class="token punctuation brace-round brace-open brace-level-3" id="pair-255-close">(</span>op<span class="token punctuation brace-round brace-close brace-level-3" id="pair-255-open">)</span> <span class="token punctuation brace-curly brace-close brace-level-2" id="pair-272-open">}</span><span class="token punctuation">;</span>
    <span class="token keyword keyword-if">if</span> <span class="token punctuation brace-round brace-open brace-level-2" id="pair-256-close">(</span>fcn<span class="token punctuation brace-round brace-close brace-level-2" id="pair-256-open">)</span>
        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> op <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">fcn</span><span class="token punctuation brace-round brace-open brace-level-2" id="pair-257-close">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation brace-round brace-close brace-level-2" id="pair-257-open">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>

    <span class="token keyword keyword-return">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation brace-curly brace-close brace-level-1" id="pair-273-open">}</span><span aria-hidden="true" class="line-numbers-rows"><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span><span style="height: 0px;"></span></span><span class="line-numbers-sizer" style="display: none;"></span></code></pre><div class="toolbar"><div class="toolbar-item"><button class="copy-to-clipboard-button" type="button" data-copy-state="copy"><span>Copy</span></button></div></div></div></div><div class="prevnext"><div class="prevnext-inline"><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/the-stack-and-the-heap/"><div class="nav-button nav-button-next"><div class="nav-button-icon"><i class="fa fa-chevron-circle-right" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Next lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">11.2</span>The stack and the heap</div></div></div></a><a class="nav-link" href="/"><div class="nav-button nav-button-index"><div class="nav-button-icon"><i class="fa fa-home" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Back to table of contents</div></div></div></a><a class="nav-link" href="https://www.learncpp.com/cpp-tutorial/chapter-10-comprehensive-quiz/"><div class="nav-button nav-button-prev"><div class="nav-button-icon"><i class="fa fa-chevron-circle-left" aria-hidden="true"></i></div><div class="nav-button-text"><div class="nav-button-title">Previous lesson</div><div class="nav-button-lesson"><span class="nav-button-lesson-number">10.x</span>Chapter 10 comprehensive quiz</div></div></div></a></div></div><div class="code-block code-block-10" style="margin:8px 0;clear:both"><div class="cf_monitor"><span id="ezoic-pub-ad-placeholder-106"></span><span class="ezoic-ad large-mobile-banner-1 large-mobile-banner-1106 adtester-container adtester-container-106" data-ez-name="learncpp_com-large-mobile-banner-1"><span id="div-gpt-ad-learncpp_com-large-mobile-banner-1-0" ezaw="970" ezah="90" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:250px;min-width:970px" class="ezoic-ad"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-mobile-banner-1-0')};</script></span></span></div></div></div><footer class="entry-meta entry-utility"></footer></div><span class="schema-publisher" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization"><span itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://www.learncpp.com/blog/wp-content/uploads/learncpp.png"></span><meta itemprop="name" content="Learn C++"></span><link itemprop="mainEntityOfPage" href="https://www.learncpp.com/function-pointers/"></article><nav id="nav-below" class="navigation" role="navigation"><div class="nav-previous"><em>Previous Post</em><a href="https://www.learncpp.com/cpp-tutorial/default-arguments/" rel="prev"><span>8.12 — Default arguments</span></a></div><div class="nav-next"><em>Next Post</em><a href="https://www.learncpp.com/cpp-tutorial/the-stack-and-the-heap/" rel="next"><span>11.2 — The stack and the heap</span></a></div></nav><div class="wpdiscuz_top_clearing"></div><div id="comments" class="comments-area"><div id="respond" style="width:0;height:0;clear:both;margin:0;padding:0"></div><div id="wpdcom" class="wpdiscuz_unauth wpd-default wpd-layout-2 wpd-comments-open"><div class="wc_social_plugin_wrapper"></div><div class="wpd-form-wrap"><div class="wpd-form-head"><div class="wpd-auth"><div class="wpd-login"></div></div></div><div class="wpd-form wpd-form-wrapper wpd-main-form-wrapper" id="wpd-main-form-wrapper-0_0"><form class="wpd_comm_form wpd_main_comm_form" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-0_0" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-0_0">Label</label>
<div id="qt_wc-textarea-0_0_toolbar" class="quicktags-toolbar"><input type="button" id="qt_wc-textarea-0_0_cpp_bold_button" class="ed_button button button-small" title="Bold text" value="b"><input type="button" id="qt_wc-textarea-0_0_cpp_underline_button" class="ed_button button button-small" title="Underlined text" value="u"><input type="button" id="qt_wc-textarea-0_0_cpp_link_button" class="ed_button button button-small" title="Link to another website" value="url"><input type="button" id="qt_wc-textarea-0_0_cpp_code_button" class="ed_button button button-small" title="A short piece of C++ code displayed as part of a sentence" value="Inline code"><input type="button" id="qt_wc-textarea-0_0_cpp_code_block_button" class="ed_button button button-small" title="A syntax-highlighted block of C++ code" value="C++ code block"><input type="button" id="qt_wc-textarea-0_0_cpp_help_button" class="ed_button button button-small" title="Opens a new tab with help on how to use these buttons" value="Help!"></div><textarea id="wc-textarea-0_0" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-0_0" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-0_0" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-0_0" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-0_0" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><span style="margin-top:6px">Notify me about replies:&nbsp;&nbsp;</span>
<label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-0_0" class="wc_notification_new_comment-0_0 wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-0_0" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="0_0" name="wpdiscuz_unique_id"></form></div><div id="wpdiscuz_hidden_secondary_form" style="display:none"><div class="wpd-form wpd-form-wrapper wpd-secondary-form-wrapper" id="wpd-secondary-form-wrapper-wpdiscuzuniqueid" style="display:none"><div class="wpd-secondary-forms-social-content"></div><div class="clearfix"></div><form class="wpd_comm_form wpd-secondary-form-wrapper" method="post" enctype="multipart/form-data"><div class="wpd-field-comment"><div class="wpdiscuz-item wc-field-textarea"><div class="wpdiscuz-textarea-wrap wpd-txt"><div class="wpd-avatar"><img alt="guest" src="data:image/svg+xml,%3Csvg xmlns=%22http://www.w3.org/2000/svg%22 width=%2256%22 height=%2256%22%3E%3C/svg%3E" data-ezsrcset="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=112&amp;d=mm&amp;r=g 2x" class="ezlazyload avatar avatar-56 photo avatar-default" height="56" width="56" loading="lazy" ezimgfmt="rs rscb2 src ng ngcb2 srcset" data-ezsrc="https://www.learncpp.com/ezoimgfmt/secure.gravatar.com/avatar/?s=56&amp;d=mm&amp;r=g"></div><div class="wpd-textarea-wrap"><div id="wpd-editor-char-counter-wpdiscuzuniqueid" class="wpd-editor-char-counter"></div><label style="display:none" for="wc-textarea-wpdiscuzuniqueid">Label</label>
<textarea id="wc-textarea-wpdiscuzuniqueid" placeholder="Leave a comment..." aria-label="Leave a comment..." required="" name="wc_comment" class="wc_comment wpd-field"></textarea></div><div class="wpd-editor-buttons-right"></div></div></div></div><div class="wpd-form-foot"><div class="wpdiscuz-textarea-foot"><div class="wpdiscuz-button-actions"></div></div><div class="wpd-form-row"><div class="wpd-form-col-left"><div class="wpdiscuz-item wc_name-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-user"></i></div><input id="wc_name-wpdiscuzuniqueid" required="" aria-required="true" class="wc_name wpd-field" name="wc_name" placeholder="Name*" maxlength="50" pattern=".{3,50}">
<label for="wc_name-wpdiscuzuniqueid" class="wpdlb">Name*</label></div><div class="wpdiscuz-item wc_email-wrapper wpd-has-icon"><div class="wpd-field-icon"><i class="fas fa-at"></i></div><input id="wc_email-wpdiscuzuniqueid" required="" aria-required="true" class="wc_email wpd-field" type="email" name="wc_email" placeholder="Email*">
<label for="wc_email-wpdiscuzuniqueid" class="wpdlb">Email*</label><div class="wpd-field-desc"><i class="far fa-question-circle"></i><span>Your email address will not be displayed</span></div></div>Avatars from <a href="https://gravatar.com/">https://gravatar.com/</a> are connected to your provided email address.</div><div class="wpd-form-col-right"><div class="wc-field-submit"><label class="wpd_label" wpd-tooltip="Notify me about new replies to this comment"><input id="wc_notification_new_comment-wpdiscuzuniqueid" class="wc_notification_new_comment-wpdiscuzuniqueid wpd_label__checkbox" value="comment" type="checkbox" name="wpdiscuz_notification_type" checked="">
<span class="wpd_label__text"><span class="wpd_label__check"><i class="fas fa-bell wpdicon wpdicon-on"></i><i class="fas fa-bell-slash wpdicon wpdicon-off"></i></span></span></label><input id="wpd-field-submit-wpdiscuzuniqueid" class="wc_comm_submit wpd_not_clicked wpd-prim-button" type="submit" name="submit" value="Post Comment"></div></div><div class="clearfix"></div></div></div><input type="hidden" class="wpdiscuz_unique_id" value="wpdiscuzuniqueid" name="wpdiscuz_unique_id"></form></div></div></div><div id="wpd-threads" class="wpd-thread-wrapper"><div class="wpd-thread-head"><div class="wpd-thread-info" data-comments-count="609"><span class="wpdtc" title="609">609</span> Comments</div><div class="wpd-space"></div><div class="wpd-thread-filter"><div class="wpd-filter wpdf-sorting"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-desc wpdiscuz-sort-button-active" data-sorting="newest">Newest</span>
<i class="fas fa-sort-down"></i><div class="wpdiscuz-sort-buttons"><span class="wpdiscuz-sort-button wpdiscuz-date-sort-asc" data-sorting="oldest">Oldest</span>
<span class="wpdiscuz-sort-button wpdiscuz-vote-sort-up" data-sorting="by_vote">Most Voted</span></div></div></div></div><div class="wpd-comment-info-bar"><div class="wpd-current-view"><i class="fas fa-quote-left"></i>Inline Feedbacks</div><div class="wpd-filter-view-all">View all comments</div></div><div class="wpd-thread-list"><div class="wpdiscuz-comment-pagination" style="display:none"><div class="wpd-load-more-submit-wrap"><button name="submit" data-lastparentid="0" class="wpd-load-more-submit wpd-loaded wpd-prim-button">
Load More Comments</button></div><input id="wpdiscuzHasMoreComments" type="hidden" value="0"></div></div></div></div></div><div id="wpdiscuz-loading-bar" class="wpdiscuz-loading-bar-unauth"></div><div id="wpdiscuz-comment-message" class="wpdiscuz-comment-message-unauth"></div><div class="code-block code-block-14" style="margin: 8px 0; clear: both;">
<div class="cf_monitor"><div id="ezoic-pub-ad-placeholder-104"> </div></div></div>
</main><aside id="primary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-2" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor" style="float:right"><span id="ezoic-pub-ad-placeholder-103"></span><span class="ezoic-ad large-billboard-2 large-billboard-2103 adtester-container adtester-container-103" data-ez-name="learncpp_com-large-billboard-2"><span id="div-gpt-ad-learncpp_com-large-billboard-2-0" ezaw="160" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;width:100%;max-width:1200px;margin-left:auto!important;margin-right:auto!important;min-height:600px;min-width:160px" class="ezoic-ad" data-google-query-id="CKqF-d6a-PYCFbeE6QUdirsMUw"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-large-billboard-2-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-large-billboard-2_0__container__" style="border: 0pt none; width: 160px; height: 0px;"></div></span><span style="width:160px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=123ed9c3-daaf-4923-50aa-38c5080207fb&amp;ad_position_id=103&amp;impression_group_id=learncpp_com-large-billboard-2/2022-04-03/4254374632903202&amp;ad_size=160x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/function-pointers/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></section></aside><aside id="secondary" class="widget-area sidey" role="complementary" itemscope="" itemtype="http://schema.org/WPSideBar"><section id="custom_html-3" class="widget_text widget-container widget_custom_html"><div class="textwidget custom-html-widget"><div class="cf_monitor"><div style="float:left"><span id="ezoic-pub-ad-placeholder-102"></span><span class="ezoic-ad box-1 box-1102 adtester-container adtester-container-102" data-ez-name="learncpp_com-box-1"><span id="div-gpt-ad-learncpp_com-box-1-0" ezaw="300" ezah="600" style="position:relative;z-index:0;display:inline-block;padding:0;min-height:600px;min-width:300px" class="ezoic-ad" data-google-query-id="CKuF-d6a-PYCFbeE6QUdirsMUw"><script data-ezscrex="false" data-cfasync="false" style="display:none">if(typeof __ez_fad_position!='undefined'){__ez_fad_position('div-gpt-ad-learncpp_com-box-1-0')};</script><div id="google_ads_iframe_/1254144,22581327789/learncpp_com-box-1_0__container__" style="border: 0pt none; width: 300px; height: 0px;"></div></span><span style="width:300px;display:block;height:14px;margin:auto" class="reportline"><span style="text-align:center;font-size:smaller;float:left;line-height:normal"><a href="https://www.ezoic.com/what-is-ezoic/" target="_blank" rel="noopener noreferrer nofollow" style="cursor:pointer"><img src="https://go.ezoic.net/utilcave_com/img/ezoic.png" alt="Ezoic" loading="lazy" style="height:12px!important;padding:2px!important;border:0!important;cursor:pointer!important;width:58px!important;margin:0!important;box-sizing:content-box!important"></a></span><span class="ez-report-ad-button" name="?pageview_id=123ed9c3-daaf-4923-50aa-38c5080207fb&amp;ad_position_id=102&amp;impression_group_id=learncpp_com-box-1/2022-04-03/3173502482901384&amp;ad_size=300x600&amp;domain_id=221418&amp;url=https://www.learncpp.com/cpp-tutorial/function-pointers/" style="cursor:pointer!important;font-size:12px!important;color:#a5a5a5;float:right;text-decoration:none!important;font-family:arial!important;line-height:normal">report this ad</span></span></span></div></div></div></section></aside>