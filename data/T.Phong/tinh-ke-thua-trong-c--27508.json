{
    "chapter": "C++ Lớp Object",
    "title": "Tính kế thừa trong C++",
    "desicription": "Kế thừa là một trong những tính năng chính của lập trình hướng đối tượng trong C++. Nó cho phép người dùng tạo một lớp (lớp kế thừa) từ một lớp có sẵn (lớp chính). Để tìm hiểu về lớp kế thừa trong C++, mời bạn đọc tham khảo bài viết dưới đây của eLib.",
    "img": "https://www.elib.vn/images/doc/2020/20201028//thumb/600x254/tinh-ke-thua-trong-c-755.jpg",
    "content": "\n              <div id=\"1\">\n<h2 id=\"goto-h2-1\">1. Tính kế thừa trong C++</h2>\n</div>\n\n<p>Một trong những khái niệm quan trọng nhất trong lập trình hướng đối tượng là&nbsp;Tính kế thừa (Inheritance). Kế thừa trong C++ là sự liên quan giữa hai class với nhau, trong đó có class cơ sở (Base Class) và class con (Derived Class). Khi kế thừa class con được hưởng tất cả các phương thức và thuộc tính của class cơ sở. Tuy nhiên, nó chỉ được truy cập các thành viên public và protected của class cơ sở. Nó không được phép truy cập đến thành viên private của class cơ sở.</p>\n\n<p>Tư tưởng của kế thừa trong C++ là có thể tạo ra một class mới được xây dựng trên các lớp đang tồn tại. Khi kế thừa từ một lớp đang tồn tại bạn có sử dụng lại các phương thức và thuộc tính của lớp cơ sở, đồng thời có thể khai báo thêm các phương thức và thuộc tính khác.</p>\n\n<div id=\"2\">\n<h2>2. Lớp cơ sở (Base Class) và Lớp thừa kế (Derived Class) trong C++</h2>\n</div>\n\n<p>Một lớp có thể được kế thừa từ hơn một lớp khác, nghĩa là, nó có thể kế thừa dữ liệu và hàm từ nhiều lớp cơ sở. Để định nghĩa một lớp kế thừa (Derived Class), chúng ta sử dụng một danh sách để xác định các lớp cơ sở. Danh sách này liệt kê một hoặc nhiều lớp cơ sở và có form sau:</p>\n\n<div>\n<div>\n<div id=\"highlighter_14072\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">lop_ke_thua</span>:</span> access_modifier lop_co_so</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Ở đây,&nbsp;access_modifier&nbsp;là&nbsp;public, protected&nbsp;hoặc&nbsp;private, và&nbsp;lop_co_so&nbsp;là tên của lớp đã được định nghĩa trước đó. Nếu access_modifier không được sử dụng, thì mặc định là private.</p>\n\n<p>Bạn xem xét ví dụ sau với&nbsp;Hinh&nbsp;là lớp cơ sở và&nbsp;HinhChuNhat&nbsp;là lớp kế thừa:</p>\n\n<div>\n<div>\n<div id=\"highlighter_206316\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n  \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-comment\">// lop co so: Hinh</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hinh</span> {</span>\n   <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setChieuRong</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> rong)</span> </span>{\n         chieuRong = rong;\n      }\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setChieuDai</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> dai)</span> </span>{\n         chieuDai = dai;\n      }\n   <span class=\"hljs-keyword\">protected</span>:\n      <span class=\"hljs-keyword\">int</span> chieuRong;\n      <span class=\"hljs-keyword\">int</span> chieuDai;\n};\n\n<span class=\"hljs-comment\">// day la lop ke thua: HinhChuNhat</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HinhChuNhat</span>:</span> <span class=\"hljs-keyword\">public</span> Hinh {\n   <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">tinhDienTich</span><span class=\"hljs-params\">()</span> </span>{\n         <span class=\"hljs-keyword\">return</span> chieuRong * chieuDai;\n      }\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n   HinhChuNhat hcn;\n  \n   hcn.setChieuRong(<span class=\"hljs-number\">10</span>);\n   hcn.setChieuDai(<span class=\"hljs-number\">15</span>);\n   <span class=\"hljs-comment\">// in dien tich cua doi tuong.</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Dien tich HCN la: \"</span> &lt;&lt; hcn.tinhDienTich() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"Tính kế thừa trong C++\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201028/images/tinh-ke-thua-trong-c-_1603875835.png\"><p class=\"notepic\">Tính kế thừa trong C++</p></p>\n\n<div id=\"3\">\n<h2 id=\"goto-h2-3\">3. Điều khiển truy cập và Tính kế thừa trong C++</h2>\n</div>\n\n<p>Một lớp kế thừa có thể truy cập tất cả thành viên không phải là private của lớp cơ sở của nó. Vì thế, các thành viên lớp cơ sở, mà là hạn chế truy cập tới các hàm thành viên của lớp kế thừa, nên được khai báo là private trong lớp cơ sở.</p>\n\n<p>Chúng ta tổng kết các kiểu truy cập khác nhau, tương ứng với ai đó có thể truy cập chúng như sau:</p>\n\n<table align=\"center\" border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Truy cập</th>\n\t\t\t<th>public</th>\n\t\t\t<th>protected</th>\n\t\t\t<th>private</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">Trong cùng lớp</td>\n\t\t\t<td style=\"text-align: center;\">Có</td>\n\t\t\t<td style=\"text-align: center;\">Có</td>\n\t\t\t<td style=\"text-align: center;\">Có</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">Lớp kế thừa</td>\n\t\t\t<td style=\"text-align: center;\">Có</td>\n\t\t\t<td style=\"text-align: center;\">Có</td>\n\t\t\t<td style=\"text-align: center;\">Không</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">Bên ngoài lớp</td>\n\t\t\t<td style=\"text-align: center;\">Có</td>\n\t\t\t<td style=\"text-align: center;\">Không</td>\n\t\t\t<td style=\"text-align: center;\">Không</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Một lớp kế thừa (Derived Class) sẽ kế thừa tất cả các phương thức của lớp cơ sở, ngoại trừ:</p>\n\n<ul>\n\t<li>\n\t<p>Constructor, destructor và copy constructor của lớp cơ sở.</p>\n\t</li>\n\t<li>\n\t<p>Overloaded operator (toán tử nạp chồng) của lớp cơ sở.</p>\n\t</li>\n\t<li>\n\t<p>Hàm friend của lớp cơ sở.</p>\n\t</li>\n</ul>\n\n<div id=\"4\">\n<h2>4. Kiểu kế thừa trong C++</h2>\n</div>\n\n<p>Khi kế thừa từ một lớp cơ sở, lớp cơ sở đó có thể được kế thừa thông qua kiểu kế thừa là&nbsp;public, protected&nbsp;hoặc&nbsp;private. Kiểu kế thừa trong C++ được xác định bởi Access-specifier đã được giải thíc ở trên.</p>\n\n<p>Chúng ta hiếm khi sử dụng kiểu kế thừa&nbsp;protected&nbsp;hoặc&nbsp;private, nhưng kiểu kế thừa&nbsp;public&nbsp;thì được sử dụng phổ biến hơn. Trong khi sử dụng các kiểu kế thừa khác sau, bạn nên ghi nhớ các quy tắc sau:</p>\n\n<ul>\n\t<li>\n\t<p>Kiểu kế thừa Public:&nbsp;Khi kế thừa từ một lớp cơ sở là&nbsp;public, thì các thành viên&nbsp;public&nbsp;của lớp cơ sở trở thành các thành viên&nbsp;public&nbsp;của lớp kế thừa; và các thành viên&nbsp;protected&nbsp;của lớp có sở trở thành các thành viên&nbsp;protected&nbsp;của lớp kế thừa. Một thành viên là&nbsp;private&nbsp;của lớp cơ sở là không bao giờ có thể được truy cập trực tiếp từ một lớp kế thừa, nhưng có thể truy cập thông qua các lời gọi tới các thành viên&nbsp;public&nbsp;và&nbsp;protected&nbsp;của lớp cơ sở đó.</p>\n\t</li>\n\t<li>\n\t<p>Kiểu kế thừa protected:&nbsp;Khi kế thừa từ một lớp cơ sở là&nbsp;protected, thì các thành viên&nbsp;public&nbsp;và&nbsp;protected&nbsp;của lớp cơ sở trở thành các thành viên&nbsp;protected&nbsp;của lớp kế thừa</p>\n\t</li>\n\t<li>\n\t<p>Kiểu kế thừa private:&nbsp;Khi kế thừa từ một lớp cơ sở là&nbsp;private, thì các thành viên&nbsp;public&nbsp;và&nbsp;protected&nbsp;của lớp cơ sở trở thành các thành viên&nbsp;private&nbsp;của lớp kế thừa</p>\n\t</li>\n</ul>\n\n<div id=\"5\">\n<h2 id=\"goto-h2-5\">5. Đa kế thừa trong C++</h2>\n</div>\n\n<p>Một lớp trong C++ có thể kế thừa các thành viên từ nhiều lớp, và đây là cú pháp:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">lop_ke_thua</span>:</span> access_modifier lop_co_so_1, access_modifier lop_co_so_2 ...\n</code></pre>\n</div>\n\n<p>Tại đây, access_modifier là&nbsp;public, protected&nbsp;hoặc&nbsp;private&nbsp;và sẽ được cung cấp cho mỗi lớp cơ sở, và chúng sẽ được phân biệt với nhau bởi dấu phảy như trên. Bạn thử ví dụ sau:</p>\n\n<div>\n<div>\n<div id=\"highlighter_385165\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n  \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<span class=\"hljs-comment\">// lop co so: Hinh</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Hinh</span> {</span>\n   <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setChieuRong</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> rong)</span>\n      </span>{\n         chieuRong = rong;\n      }\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">setChieuDai</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> dai)</span>\n      </span>{\n         chieuDai = dai;\n      }\n   <span class=\"hljs-keyword\">protected</span>:\n      <span class=\"hljs-keyword\">int</span> chieuRong;\n      <span class=\"hljs-keyword\">int</span> chieuDai;\n};\n\n<span class=\"hljs-comment\">// lop co so: ChiPhiSonMau</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ChiPhiSonMau</span> {</span>\n   <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">tinhChiPhi</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> dienTich, <span class=\"hljs-keyword\">int</span> donGia)</span> </span>{\n         <span class=\"hljs-keyword\">return</span> dienTich * donGia;\n      }\n};\n\n<span class=\"hljs-comment\">// day la lop ke thua: HinhChuNhat</span>\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HinhChuNhat</span>:</span> <span class=\"hljs-keyword\">public</span> Hinh, <span class=\"hljs-keyword\">public</span> ChiPhiSonMau {\n   <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">tinhDienTich</span><span class=\"hljs-params\">()</span> </span>{\n         <span class=\"hljs-keyword\">return</span> chieuRong * chieuDai;\n      }\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span> </span>{\n   HinhChuNhat hcn;\n   <span class=\"hljs-keyword\">int</span> dienTich;\n   <span class=\"hljs-keyword\">int</span> donGia = <span class=\"hljs-number\">200000</span>;\n  \n   hcn.setChieuRong(<span class=\"hljs-number\">15</span>);\n   hcn.setChieuDai(<span class=\"hljs-number\">30</span>);\n   dienTich = hcn.tinhDienTich();\n    \n   <span class=\"hljs-comment\">// in dien tich cua doi tuong.</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Tong dien tich la: \"</span> &lt;&lt;\n      hcn.tinhDienTich() &lt;&lt; <span class=\"hljs-string\">\" m2.\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-comment\">// in tong chi phi de son mau</span>\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Tong chi phi de son mau la: \"</span> &lt;&lt;\n      hcn.tinhChiPhi(dienTich, donGia) &lt;&lt; <span class=\"hljs-string\">\" VND.\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"Tính kế thừa trong C++\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201028/images/tinh-ke-thua-trong-c-1_1603875835.png\"><p class=\"notepic\">Tính kế thừa trong C++</p></p>\n\n<p>Trên đây là bài viết của eLib.VN về&nbsp;Tính kế thừa trong C++.&nbsp;Hy vọng qua bài viết, các bạn&nbsp;biết được kế thừa trong C++ là gì, và áp dụng phù hợp trong quá trình lập trình. Chúc các bạn thành công.</p>\n\n\n\n\n\n\n\n\n\n              "
}