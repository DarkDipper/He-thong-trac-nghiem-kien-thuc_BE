{
    "title": "Template trong C++",
    "desicription": "Khi học về lập trình hướng đối tượng (OOP) trong ngôn ngữ C++, trong quá trình lập trình, chắc ai cũng gặp trường hợp phải overload lại các hàm để dùng cho mỗi kiểu dữ liệu tương ứng, thì trong C++ có hỗ trợ cho chúng ta giải quyết vấn đề trên, Trong bài viết dưới đây eLib sẽ hướng dẫn bạn tiếp cận tới một kiến thức khá là quan trọng mà mỗi người học lập trình C++ đều phải biết và áp dụng nó. Đó chính là Template. Cùng theo dõi nhé!",
    "img": "https://www.elib.vn/images/doc/2020/20201027//thumb/600x254/template-trong-c-781.jpg",
    "content": "\n              <div id=\"1\">\n<h2>1.&nbsp;Template trong C++ là gì?</h2>\n</div>\n\n<p>Template trong C++&nbsp;là nền tảng của lập trình tổng quát (generic programming), tức là viết code theo các mà độc lập với bất kỳ kiểu cụ thể nào.</p>\n\n<p>Một Template là một blueprint hoặc là phương thức để tạo một lớp hoặc một hàm tổng quát. Các Library Container như Iterator và các thuật toán là các ví dụ của lập trình tổng quát và đã được phát triển bởi sử dụng khái niệm Template.</p>\n\n<p>Mỗi container có một định nghĩa đơn, ví dụ vector, nhưng chúng ta có thể định nghĩa nhiều loạt vector khác nhau, ví dụ:&nbsp;vector &lt;int&gt;&nbsp;hoặc&nbsp;vector &lt;string&gt;.</p>\n\n<p>Template là từ khóa trong C++, chúng ta có thể hiểu rằng là nó một kiểu dữ liệu trừu tượng, đặc trưng cho các kiểu dữ liệu cơ bản. Template là từ khóa báo cho trình biên dịch rằng đoạn mã sau đây định nghĩa cho nhiều kiểu dữ liệu và mã nguồn của nó sẽ được biên dịch sinh ra tương ứng cho từng kiểu dữ liệu trong quá trình biên dịch. Có hai kiểu Template trong C++:</p>\n\n<ul>\n\t<li>Function Template: là một khuôn mẫu hàm, cho phép định nghĩa các hàm tổng quát thao tác cho nhiều kiểu dữ liệu.</li>\n\t<li>Class template: là một khuôn mẫu lớp, cho phép định nghĩa các lớp tổng quát cho nhiều kiểu dữ liệu.</li>\n</ul>\n\n<div id=\"2\">\n<h2 id=\"goto-h2-1\">2. Function Template trong C++</h2>\n</div>\n\n<p>Cú pháp Function Template trong C++:</p>\n\n<div>\n<div>\n<div id=\"highlighter_3821\">\n<div>\n<pre><code class=\"language-cpp hljs\">emplate &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">kieu_du_lieu</span>&gt; <span class=\"hljs-title\">kieu_tham_chieu</span> <span class=\"hljs-title\">ten_ham</span>(<span class=\"hljs-title\">danh_sach_tham_so</span>) {</span>\n   <span class=\"hljs-comment\">// code</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Trong đó,&nbsp;kieu_du_lieu&nbsp;là một tên một kiểu dữ liệu được sử dụng bởi hàm. Tên này có thể được sử dụng bên trong định nghĩa hàm.</p>\n\n<p>Ví dụ: Function Template trong C++ trả về giá trị lớn nhất của hai giá trị:</p>\n\n<div>\n<div>\n<div id=\"highlighter_586024\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-keyword\">typename</span> T&gt;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">inline</span> T <span class=\"hljs-keyword\">const</span>&amp; <span class=\"hljs-title\">Max</span> <span class=\"hljs-params\">(T <span class=\"hljs-keyword\">const</span>&amp; a, T <span class=\"hljs-keyword\">const</span>&amp; b)</span> </span>{\n    <span class=\"hljs-keyword\">return</span> a &lt; b ? b:a;\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">39</span>;\n    <span class=\"hljs-keyword\">int</span> j = <span class=\"hljs-number\">20</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Max(i, j): \"</span> &lt;&lt; Max(i, j) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-keyword\">double</span> f1 = <span class=\"hljs-number\">13.5</span>;\n    <span class=\"hljs-keyword\">double</span> f2 = <span class=\"hljs-number\">20.7</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Max(f1, f2): \"</span> &lt;&lt; Max(f1, f2) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-built_in\">string</span> s1 = <span class=\"hljs-string\">\"Hello\"</span>;\n    <span class=\"hljs-built_in\">string</span> s2 = <span class=\"hljs-string\">\"C++\"</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Max(s1, s2): \"</span> &lt;&lt; Max(s1, s2) &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n\n<div>Kết quả:</div>\n</div>\n</div>\n</div>\n\n<div>\n<pre><code class=\"language-cpp hljs\">Max(i, j): <span class=\"hljs-number\">39</span>\nMax(f1, f2): <span class=\"hljs-number\">20.7</span>\nMax(s1, s2): Hello</code></pre>\n\n<div id=\"3\">\n<h2 id=\"goto-h2-2\">3. Class Template trong C++</h2>\n</div>\n\n<p>Giống như khi chúng ta có thể định nghĩa Function Template, chúng ta cũng có thể định nghĩa Class Template trong C++. Cú pháp chung của định nghĩa Class Template trong C++ là:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">kieu_du_lieu</span>&gt; <span class=\"hljs-title\">class</span> <span class=\"hljs-title\">ten_lop</span> {</span>\n    .\n    .\n    .\n}</code></pre>\n</div>\n</div>\n\n<p>Trong đó, kieu_du_lieu là tên kiểu, mà sẽ được xác định khi một lớp được khai báo. Bạn có thể định nghĩa nhiều hơn một kiểu dữ liệu tổng quát (generic) bởi sử dụng một danh sách phân biệt nhau bởi dấu phảy.</p>\n\n<div>\n<p>Ví dụ: định nghĩa lớp Stack và triển khai các phương thức tổng quát để push và pop các phần tử từ Stack đó. (Stack: ngăn xếp, push: thêm nút mới vào đỉnh stack, pop: thao tác lấy 1 phần tử từ đỉnh stack).</p>\n\n<div>\n<div>\n<div id=\"highlighter_529049\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;vector&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;string&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;stdexcept&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">T</span>&gt;\n<span class=\"hljs-title\">class</span> <span class=\"hljs-title\">Stack</span> {</span>\n   <span class=\"hljs-keyword\">private</span>:\n      <span class=\"hljs-built_in\">vector</span>&lt;T&gt; elems;    <span class=\"hljs-comment\">// cac phan tu</span>\n\n   <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">push</span><span class=\"hljs-params\">(T <span class=\"hljs-keyword\">const</span>&amp;)</span></span>;  <span class=\"hljs-comment\">// push phan tu vao stack</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">pop</span><span class=\"hljs-params\">()</span></span>;               <span class=\"hljs-comment\">// phan tu pop</span>\n      <span class=\"hljs-function\">T <span class=\"hljs-title\">top</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span></span>;            <span class=\"hljs-comment\">// tra ve phan tu tren cung</span>\n       \n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">bool</span> <span class=\"hljs-title\">empty</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> </span>{      <span class=\"hljs-comment\">// tra ve true neu trong</span>\n         <span class=\"hljs-keyword\">return</span> elems.empty();\n      }\n};\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">T</span>&gt;\n<span class=\"hljs-title\">void</span> <span class=\"hljs-title\">Stack</span>&lt;T&gt;:</span>:push (T <span class=\"hljs-keyword\">const</span>&amp; elem) {\n   <span class=\"hljs-comment\">// append copy of passed element</span>\n   elems.push_back(elem);   \n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">T</span>&gt;\n<span class=\"hljs-title\">void</span> <span class=\"hljs-title\">Stack</span>&lt;T&gt;:</span>:pop () {\n   <span class=\"hljs-keyword\">if</span> (elems.empty()) {\n      <span class=\"hljs-keyword\">throw</span> out_of_range(<span class=\"hljs-string\">\"Stack&lt;&gt;::pop(): empty stack\"</span>);\n   }\n    \n   <span class=\"hljs-comment\">// xoa phan tu cuoi cung</span>\n   elems.pop_back();        \n}\n\n<span class=\"hljs-keyword\">template</span> &lt;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">T</span>&gt;\n<span class=\"hljs-title\">T</span> <span class=\"hljs-title\">Stack</span>&lt;T&gt;:</span>:top () <span class=\"hljs-keyword\">const</span> {\n   <span class=\"hljs-keyword\">if</span> (elems.empty()) {\n      <span class=\"hljs-keyword\">throw</span> out_of_range(<span class=\"hljs-string\">\"Stack&lt;&gt;::top(): empty stack\"</span>);\n   }\n    \n   <span class=\"hljs-comment\">// tra ve ban copy cua phan tu cuoi cung</span>\n   <span class=\"hljs-keyword\">return</span> elems.back();     \n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n   <span class=\"hljs-keyword\">try</span> {\n      Stack&lt;<span class=\"hljs-keyword\">int</span>&gt; intStack;\n      Stack&lt;<span class=\"hljs-built_in\">string</span>&gt; stringStack;\n\n      <span class=\"hljs-comment\">// push int vao stack</span>\n      intStack.push(<span class=\"hljs-number\">7</span>);\n      <span class=\"hljs-built_in\">cout</span> &lt;&lt; intStack.top() &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n\n      <span class=\"hljs-comment\">// push string vao stack</span>\n      stringStack.push(<span class=\"hljs-string\">\"hello\"</span>);\n      <span class=\"hljs-built_in\">cout</span> &lt;&lt; stringStack.top() &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n      stringStack.pop();\n      stringStack.pop();\n   } <span class=\"hljs-keyword\">catch</span> (exception <span class=\"hljs-keyword\">const</span>&amp; ex) {\n      <span class=\"hljs-built_in\">cerr</span> &lt;&lt; <span class=\"hljs-string\">\"Exception: \"</span> &lt;&lt; ex.what() &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">-1</span>;\n   }\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Kết quả:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-number\">7</span>\nhello\nException: Stack&lt;&gt;::pop(): empty <span class=\"hljs-built_in\">stack</span>\n</code></pre>\n</div>\n</div>\n\n<p>Trên đây là bài viết của eLib.VN về Template trong C++. Việc sử dụng “template” làm giảm rất nhiều thời gian và công sức phải code lại một hàm mà dùng cho nhiều kiểu dữ liệu, dễ dàng bảo trì, phát triển hay thay đổi &nbsp;mã nguồn. Hãy thử áp dụng và trãi nghiệm, chúc các bạn thành công!</p>\n\n\n\n\n\n\n\n\n\n              "
}