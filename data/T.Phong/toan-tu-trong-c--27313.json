{
    "chapter": "Giới thiệu về lập trình C++",
    "title": "Toán tử trong C++",
    "desicription": "Trong bài viết dưới đây, eLib sẽ cùng các bạn tìm hiểu về các toán tử thường gặp trong lập trình C++ ngoài các toán tử tính toán số học bình thường mình sẽ cung cấp thêm cho các bạn nhiều nhất có thể về những toán tử bạn có thể và dễ gặp trong quá trình code để bạn không phải thắc mắc tốn time khi gặp phải. Cùng theo dõi nhé!",
    "img": "https://www.elib.vn/images/doc/2020/20201027//thumb/600x254/toan-tu-trong-c-202.jpg",
    "content": "\n              <div id=\"1\">\n<h2 id=\"goto-h2-1\">1. Toán tử số học trong C++</h2>\n</div>\n\n<p>Bảng dưới đây mô tả các toán tử số học được hỗ trợ bởi ngôn ngữ C++. Giả sử biến&nbsp;A = 10&nbsp;và biến&nbsp;B = 20:</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Toán tử</th>\n\t\t\t<th>Miêu tả</th>\n\t\t\t<th>Ví dụ</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">+</td>\n\t\t\t<td>Thêm hai toán hạng</td>\n\t\t\t<td>A + B sẽ cho kết quả là 30</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">-</td>\n\t\t\t<td>Trừ giá trị toán hạng hai từ toán hạng đầu</td>\n\t\t\t<td>A - B sẽ cho kết quả là -10</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">*</td>\n\t\t\t<td>Nhân hai toán hạng</td>\n\t\t\t<td>A * B sẽ cho kết quả là 200</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">/</td>\n\t\t\t<td>Chia lấy phần nguyên hai toán hạng</td>\n\t\t\t<td>B / A sẽ cho kết quả là 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">%</td>\n\t\t\t<td>Chia lấy phần dư</td>\n\t\t\t<td>B % A sẽ cho kết quả là 0</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">++</td>\n\t\t\t<td>Lượng gia giá trị toán hạng thêm 1 đơn vị</td>\n\t\t\t<td>A++ sẽ cho kết quả là 11</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">--</td>\n\t\t\t<td>Lượng giảm giá trị toán hạng một đơn vị</td>\n\t\t\t<td>A-- sẽ cho kết quả là 9</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<div id=\"2\">\n<h2>2. Toán tử quan hệ trong C++</h2>\n</div>\n\n<p>Các toán tử quan hệ được sử dụng kiểm tra mối quan hệ giữa hai toán hạng. Kết quả của một biểu thức có dùng các toán tử quan hệ là những giá trị Boolean (logic “true” hoặc “false”). Các toán tử quan hệ được sử dụng trong các cấu trúc điều khiển.</p>\n\n<p>Bảng dưới đây mô tả các toán tử quan hệ được hỗ trợ bởi ngôn ngữ C++. Giả sử biến&nbsp;A = 10&nbsp;và biến&nbsp;B = 20:</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Toán tử</th>\n\t\t\t<th>Miêu tả</th>\n\t\t\t<th>Ví dụ</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">==</td>\n\t\t\t<td>Kiểm tra nếu 2 toán hạng bằng nhau hay không. Nếu bằng thì điều kiện là true.</td>\n\t\t\t<td>(A == B) là không đúng.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">!=</td>\n\t\t\t<td>Kiểm tra 2 toán hạng có giá trị khác nhau hay không. Nếu không bằng thì điều kiện là true.</td>\n\t\t\t<td>(A != B) là true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&gt;</td>\n\t\t\t<td>Kiểm tra nếu toán hạng bên trái có giá trị lớn hơn toán hạng bên phải hay không. Nếu lớn hơn thì điều kiện là true.</td>\n\t\t\t<td>(A &gt; B) là không đúng.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&lt;</td>\n\t\t\t<td>Kiểm tra nếu toán hạng bên trái nhỏ hơn toán hạng bên phải hay không. Nếu nhỏ hơn thì là true.</td>\n\t\t\t<td>(A &lt; B) là true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&gt;=</td>\n\t\t\t<td>Kiểm tra nếu toán hạng bên trái có giá trị lớn hơn hoặc bằng giá trị của toán hạng bên phải hay không. Nếu đúng là true.</td>\n\t\t\t<td>(A &gt;= B) là không đúng.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&lt;=</td>\n\t\t\t<td>Kiểm tra nếu toán hạng bên trái có giá trị nhỏ hơn hoặc bằng toán hạng bên phải hay không. Nếu đúng là true.</td>\n\t\t\t<td>(A &lt;= B) là true.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<div id=\"3\">\n<h2 id=\"goto-h2-3\">3. Toán tử logic trong C++</h2>\n</div>\n\n<p>Bảng dưới đây mô tả các toán tử logic được hỗ trợ bởi ngôn ngữ C++. Giả sử biến&nbsp;A = true (hoặc 1)&nbsp;và biến&nbsp;B = false (hoặc 0):</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Toán tử</th>\n\t\t\t<th>Miêu tả</th>\n\t\t\t<th>Ví dụ</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&amp;&amp;</td>\n\t\t\t<td>Được gọi là toán tử logic AND (và). Nếu cả hai toán tử đều có giá trị khác 0 thì điều kiện trở lên true.</td>\n\t\t\t<td>(A &amp;&amp; B) là false.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">||</td>\n\t\t\t<td>Được gọi là toán tử logic OR (hoặc). Nếu một trong hai toán tử khác 0, thì điều kiện là true.</td>\n\t\t\t<td>(A || B) là true.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">!</td>\n\t\t\t<td>Được gọi là toán tử NOT (phủ định). Sử dụng để đảo ngược lại trạng thái logic của toán hạng đó. Nếu điều kiện toán hạng là true thì phủ định nó sẽ là false.</td>\n\t\t\t<td>!(A &amp;&amp; B) là true.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<div id=\"4\">\n<h2>4. Toán tử bit trong C++</h2>\n</div>\n\n<p>Các toán tử dạng bit cho phép chúng ta thao tác trên từng bit riêng biệt trong các kiểu dữ liệu nguyên thủy. Giả sử A = 60 (=&nbsp;0011 1100) và B = 13 (=&nbsp;0000 1101)</p>\n\n<table>\n</table>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Toán tử</th>\n\t\t\t<th>Miêu tả</th>\n\t\t\t<th>Ví dụ</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&amp;</td>\n\t\t\t<td>Toán tử AND (và) nhị phân sao chép một bit tới kết quả nếu nó tồn tại trong cả hai toán hạng.</td>\n\t\t\t<td>(A &amp; B) sẽ cho kết quả là 12, tức là 0000 1100</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">|</td>\n\t\t\t<td>Toán tử OR (hoặc) nhị phân sao chép một bit tới kết quả nếu nó tồn tại trong một hoặc hai toán hạng.</td>\n\t\t\t<td>(A | B) sẽ cho kết quả là 61, tức là 0011 1101</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">^</td>\n\t\t\t<td>Toán tử XOR nhị phân sao chép bit mà nó chỉ tồn tại trong một toán hạng mà không phải cả hai.</td>\n\t\t\t<td>(A ^ B) sẽ cho kết quả là 49, tức là 0011 0001</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">~</td>\n\t\t\t<td>Toán tử đảo bit (đảo bit 1 thành bit 0 và ngược lại).</td>\n\t\t\t<td>(~A ) sẽ cho kết quả là -61, tức là 1100 0011.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&lt;&lt;</td>\n\t\t\t<td>Toán tử dịch trái. Giá trị toán hạng trái được dịch chuyển sang trái bởi số các bit được xác định bởi toán hạng bên phải.</td>\n\t\t\t<td>A &lt;&lt; 2 sẽ cho kết quả 240, tức là 1111 0000 (dịch sang trái hai bit)</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&gt;&gt;</td>\n\t\t\t<td>Toán tử dịch phải. Giá trị toán hạng trái được dịch chuyển sang phải bởi số các bit được xác định bởi toán hạng bên phải.</td>\n\t\t\t<td>A &gt;&gt; 2 sẽ cho kết quả là 15, tức là 0000 1111 (dịch sang phải hai bit)</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<div id=\"5\">\n<h2 id=\"goto-h2-5\">5. Toán tử gán trong C++</h2>\n</div>\n\n<p>Toán tử gán dùng để gán một giá trị vào một biến và có thể gán nhiều giá trị cho nhiều biến cùng một lúc.</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Toán tử</th>\n\t\t\t<th>Miêu tả</th>\n\t\t\t<th>Ví dụ</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">=</td>\n\t\t\t<td>Toán tử gán đơn giản. Gán giá trị toán hạng bên phải cho toán hạng trái.</td>\n\t\t\t<td>C = A + B sẽ gán giá trị của A + B vào trong C</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">+=</td>\n\t\t\t<td>Thêm giá trị toán hạng phải tới toán hạng trái và gán giá trị đó cho toán hạng trái.</td>\n\t\t\t<td>C += A tương đương với C = C + A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">-=</td>\n\t\t\t<td>Trừ đi giá trị toán hạng phải từ toán hạng trái và gán giá trị này cho toán hạng trái.</td>\n\t\t\t<td>C -= A tương đương với C = C - A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">*=</td>\n\t\t\t<td>Nhân giá trị toán hạng phải với toán hạng trái và gán giá trị này cho toán hạng trái.</td>\n\t\t\t<td>C *= A tương đương với C = C * A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">/=</td>\n\t\t\t<td>Chia toán hạng trái cho toán hạng phải và gán giá trị này cho toán hạng trái.</td>\n\t\t\t<td>C /= A tương đương với C = C / A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">%=</td>\n\t\t\t<td>Lấy phần dư của phép chia toán hạng trái cho toán hạng phải và gán cho toán hạng trái.</td>\n\t\t\t<td>C %= A tương đương với C = C % A</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&lt;&lt;=</td>\n\t\t\t<td>Dịch trái toán hạng trái sang số vị trí là giá trị toán hạng phải.</td>\n\t\t\t<td>C &lt;&lt;= 2 tương đương với C = C &lt;&lt; 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&gt;&gt;=</td>\n\t\t\t<td>Dịch phải toán hạng trái sang số vị trí là giá trị toán hạng phải.</td>\n\t\t\t<td>C &gt;&gt;= 2 tương đương với C = C &gt;&gt; 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&amp;=</td>\n\t\t\t<td>Phép AND bit</td>\n\t\t\t<td>C &amp;= 2 tương đương với C = C &amp; 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">^=</td>\n\t\t\t<td>Phép OR loại trừ bit</td>\n\t\t\t<td>C ^= 2 tương đương với C = C ^ 2</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">|=</td>\n\t\t\t<td>Phép OR bit.</td>\n\t\t\t<td>C |= 2 tương đương với C = C | 2</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<div id=\"6\">\n<h2>6. Toán tử hỗn hợp trong C++</h2>\n</div>\n\n<p>Có một số toán tử hỗn hợp quan trọng là&nbsp;sizeof&nbsp;và&nbsp;? :&nbsp;được hỗ trợ bởi ngôn ngữ C++.</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Toán tử</th>\n\t\t\t<th>Miêu tả</th>\n\t\t\t<th>Ví dụ</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">sizeof()</td>\n\t\t\t<td>Trả lại kích cỡ của một biến</td>\n\t\t\t<td>sizeof(a), với a là integer, thì sẽ trả lại kết quả là 4.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">&amp;</td>\n\t\t\t<td>Trả lại địa chỉ của một biến.</td>\n\t\t\t<td>&amp;a; sẽ cho địa chỉ thực sự của biến a.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">*</td>\n\t\t\t<td>Trỏ tới một biến.</td>\n\t\t\t<td>*a; sẽ trỏ tới biến a.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">? :</td>\n\t\t\t<td>Biểu thức điều kiện</td>\n\t\t\t<td>Nếu điều kiện là true ? thì giá trị X : Nếu không thì giá trị Y</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<div id=\"7\">\n<h2 id=\"goto-h2-7\">7. Thứ tự ưu tiên</h2>\n</div>\n\n<p id=\"goto-h3-1\"><strong>Thứ tự ưu tiên của các toán tử trong C++</strong></p>\n\n<p>Thứ tự ưu tiên quyết định trật tự thực hiện các toán tử trên các biểu thức. Bảng dưới đây liệt kê thứ tự thực hiện các toán tử trong C.</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Loại&nbsp;</th>\n\t\t\t<th>Toán tử&nbsp;</th>\n\t\t\t<th>Thứ tự ưu tiên&nbsp;</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Postfix&nbsp;</td>\n\t\t\t<td>() [] -&gt; . ++ - - &nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Unary&nbsp;</td>\n\t\t\t<td>+ - ! ~ ++ - - (type)* &amp; sizeof&nbsp;</td>\n\t\t\t<td>Phải sang trái&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Tính nhân&nbsp;</td>\n\t\t\t<td>* / %&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Tính cộng&nbsp;</td>\n\t\t\t<td>+ -&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Dịch chuyển&nbsp;</td>\n\t\t\t<td>&lt;&lt; &gt;&gt;&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Quan hệ&nbsp;</td>\n\t\t\t<td>&lt; &lt;= &gt; &gt;=&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Cân bằng&nbsp;</td>\n\t\t\t<td>== !=&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Phép AND bit&nbsp;</td>\n\t\t\t<td>&amp;&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Phép XOR bit&nbsp;</td>\n\t\t\t<td>^&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Phép OR bit&nbsp;</td>\n\t\t\t<td>|&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Phép AND logic&nbsp;</td>\n\t\t\t<td>&amp;&amp;&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Phép OR logic&nbsp;</td>\n\t\t\t<td>||&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Điều kiện&nbsp;</td>\n\t\t\t<td>?:&nbsp;</td>\n\t\t\t<td>Phải sang trái&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Gán&nbsp;</td>\n\t\t\t<td>= += -= *= /= %=&gt;&gt;= &lt;&lt;= &amp;= ^= |=&nbsp;</td>\n\t\t\t<td>Phải sang trái&nbsp;</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>Dấu phảy&nbsp;</td>\n\t\t\t<td>,&nbsp;</td>\n\t\t\t<td>Trái sang phải&nbsp;</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p id=\"goto-h3-2\"><strong>Thay đổi thứ tự ưu tiên của các toán tử trong C++</strong></p>\n\n<p>Để thay đổi thứ tự ưu tiên trên một biểu thức, bạn có thể sử dụng dấu ngoặc đơn ():</p>\n\n<ul>\n\t<li>Phần được giới hạn trong ngoặc đơn được thực hiện trước.</li>\n\t<li>Nếu dùng nhiều ngoặc đơn lồng nhau thì toán tử nằm trong ngoặc đơn phía trong sẽ thực thi trước, sau đó đến các vòng phía ngoài.</li>\n\t<li>Trong phạm vi một cặp ngoặc đơn thì quy tắc thứ tự ưu tiên vẫn giữ nguyên tác dụng.</li>\n</ul>\n\n<p>Ví dụ, x = 10 + 5 * 2; ở đây, x được gán giá trị 20, chứ không phải 30 bởi vì toán tử * có quyền ưu tiên cao hơn toán tử +, vì thế đầu tiên nó thực hiện phép nhân 5 * 2 và sau đó thêm với 10.</p>\n\n<p>Để thay đổi thứ tự ưu tiên ta dùng dấu (), ví dụ, x = (10 + 5) * 2; ở đây x = 30.</p>\n\n<p>Trên đây là bài viết của eLib.VN về&nbsp;Toán tử trong C++. Chúng tôi hy vọng bài viết hữu ích cho những bạn đang nghiên cứu về lập trình C++. Chúc các bạn thành công và vững vàng với đam mê lập trình của mình.</p>\n\n\n\n\n\n\n\n\n\n              "
}