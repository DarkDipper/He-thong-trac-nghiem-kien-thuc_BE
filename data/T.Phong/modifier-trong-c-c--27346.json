{
    "title": "Modifier trong C/C++",
    "desicription": "Chúng ta đã biết về  kiểu dữ liệu cơ bản trong C++, bao gồm kiểu int, char, kiểu double short int, unsigned char, long double, và kiểu signed int. Trong đó các từ như short, unsigned, long, signed được gọi là các kiểu Modifier, để tìm hiểu modifier trong C++ là gì, mời bạn đọc cùng tham khảo bài viết dưới đây của eLib.VN",
    "img": "https://www.elib.vn/images/doc/2020/20201027//thumb/600x254/modifier-trong-c-c-565.jpg",
    "content": "\n              <div id=\"1\">\n<h2>1.&nbsp;Modifier trong C/C++</h2>\n</div>\n\n<p>C++ cho phép các kiểu dữ liệu&nbsp;char, int và double&nbsp;có các Modifier đặt trước chúng. Một Modifier được sử dụng để thông báo ý nghĩa của kiểu cơ sở, giúp cho nó tăng sự chính xác hơn với sự cần thiết của các tình huống đa dạng.</p>\n\n<p>Dưới đây là các Modifier trong C/C++:</p>\n\n<ul>\n\t<li>\n\t<p>signed (có dấu)</p>\n\t</li>\n\t<li>\n\t<p>unsigned (không có dấu)</p>\n\t</li>\n\t<li>\n\t<p>long</p>\n\t</li>\n\t<li>\n\t<p>short</p>\n\t</li>\n</ul>\n\n<p>Các Modifier là:&nbsp;signed, unsigned, long,&nbsp;và&nbsp;short&nbsp;có thể được áp dụng cho kiểu integer. Ngoài ra,&nbsp;signed&nbsp;và&nbsp;unsigned&nbsp;có thể được áp dụng cho kiểu char, và&nbsp;long&nbsp;có thể áp dụng cho kiểu double.</p>\n\n<p>Các Modifier là&nbsp;signed&nbsp;và&nbsp;unsigned&nbsp;cũng có thể được sử dụng như là tiền tố cho các Modifier là&nbsp;long&nbsp;hoặc&nbsp;short&nbsp;modifiers. Ví dụ:&nbsp;unsigned long int.</p>\n\n<p>C++ cho phép kiểu khai báo tắt để khai báo các&nbsp;unsigned, short,&nbsp;or&nbsp;long&nbsp;integer. Bạn có thể chỉ đơn giản sử dụng từ&nbsp;unsigned, short,&nbsp;hoặc&nbsp;long, mà không cần int. Ví dụ sau minh họa hai khai báo là hợp lệ trong C/C++ để khai báo các biến unsigned integer:</p>\n\n<div>\n<div>\n<div id=\"highlighter_166558\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-keyword\">unsigned</span> x;\n<span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> y;</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Để phân biệt sự khác nhau giữa hai Modifier là signed integer và unsigned integer được thông dịch bởi C/C++, bạn nên chạy chương trình sau:</p>\n\n<div>\n<div>\n<div id=\"highlighter_286038\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n  \n<span class=\"hljs-comment\">/*\n * Chương trình này chỉ ra diểm khác nhau giữa\n * 2 kiểu số nguyên signed và unsigned.\n*/</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">int</span> i;           <span class=\"hljs-comment\">// số nguyên signed short int</span>\n    <span class=\"hljs-keyword\">short</span> <span class=\"hljs-keyword\">unsigned</span> <span class=\"hljs-keyword\">int</span> j;  <span class=\"hljs-comment\">// số nguyên unsigned short int  </span>\n    j = <span class=\"hljs-number\">32769</span>;  \n    i = j;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">\" \"</span> &lt;&lt; j;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Nó sẽ cho kết quả:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-number\">-32767</span> <span class=\"hljs-number\">32769</span></code></pre>\n</div>\n\n<p>Nếu bạn quay trở lại chương&nbsp;Kiểu dữ liệu trong C/C++, và đọc phần dãy giá trị của short int và unsigned short int, bạn sẽ nhận ra sự khác nhau khi chạy chương trình trên với j &lt;= 32767 và với j &gt;= 32767.</p>\n\n<div id=\"2\">\n<h2 id=\"goto-h2-1\">2. Qualifier trong C/C++</h2>\n</div>\n\n<p>Qualifier cung cấp thông tin bổ sung về các biến theo sau nó.</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Qualifier</th>\n\t\t\t<th>Ý nghĩa</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">const</td>\n\t\t\t<td>Đối tượng của kiểu&nbsp;const&nbsp;không thể bị thay đổi bởi chương trình trong khi thực thi</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">volatile</td>\n\t\t\t<td>Modifier này nói cho compiler rằng giá trị của biến có thể được thay đổi một cách không rõ ràng (không báo trước) bởi chương trình.</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">restrict</td>\n\t\t\t<td>Một con trỏ được đặt là&nbsp;restrict&nbsp;thì có ý nghĩa là đối tượng nó trỏ đến có thể được truy cập. Restrict được thêm vào trong chuẩn C99.</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p><strong>Ví dụ:</strong></p>\n\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> n1 = <span class=\"hljs-number\">0</span>;           <span class=\"hljs-comment\">// non-const object</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> n2 = <span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// const object</span>\n    <span class=\"hljs-keyword\">int</span> <span class=\"hljs-keyword\">const</span> n3 = <span class=\"hljs-number\">0</span>;     <span class=\"hljs-comment\">// const object (same as n2)</span>\n    <span class=\"hljs-keyword\">volatile</span> <span class=\"hljs-keyword\">int</span> n4 = <span class=\"hljs-number\">0</span>;  <span class=\"hljs-comment\">// volatile object</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span>\n    {</span>\n        <span class=\"hljs-keyword\">int</span> n1;\n        <span class=\"hljs-keyword\">mutable</span> <span class=\"hljs-keyword\">int</span> n2;\n    } x = {<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>};      <span class=\"hljs-comment\">// const object with mutable member</span>\n \n    n1 = <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// ok, modifiable object</span>\n<span class=\"hljs-comment\">//  n2 = 2; // error: non-modifiable object</span>\n    n4 = <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// ok, treated as a side-effect</span>\n<span class=\"hljs-comment\">//  x.n1 = 4; // error: member of a const object is const</span>\n    x.n2 = <span class=\"hljs-number\">4</span>; <span class=\"hljs-comment\">// ok, mutable member of a const object isn't const</span>\n \n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span>&amp; r1 = n1; <span class=\"hljs-comment\">// reference to const bound to non-const object</span>\n<span class=\"hljs-comment\">//  r1 = 2; // error: attempt to modify through reference to const</span>\n    <span class=\"hljs-keyword\">const_cast</span>&lt;<span class=\"hljs-keyword\">int</span>&amp;&gt;(r1) = <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// ok, modifies non-const object n1</span>\n \n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span>&amp; r2 = n2; <span class=\"hljs-comment\">// reference to const bound to const object</span>\n<span class=\"hljs-comment\">//  r2 = 2; // error: attempt to modify through reference to const</span>\n<span class=\"hljs-comment\">//  const_cast&lt;int&amp;&gt;(r2) = 2; // undefined behavior: attempt to modify const object n2</span>\n}</code></pre>\n\n<p>Kết quả:</p>\n\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\"># typical machine code produced on an x86_64 platform</span>\n# (only the code that contributes to observable side-effects is emitted)\nmain:\n    movl    $<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-4</span>(%rsp) <span class=\"hljs-meta\"># volatile int n4 = 0;</span>\n    movl    $<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">-4</span>(%rsp) # n4 = <span class=\"hljs-number\">3</span>;\n    xorl    %eax, %eax   <span class=\"hljs-meta\"># return 0 (implicit)</span>\n    ret</code></pre>\n\n<p>Trên đây là bài viết của eLib.VN về&nbsp;Modifier trong C/C++.&nbsp;Hy vọng qua bài này bạn sẽ hiểu và vận dụng trong quá trình học tập và làm việc với C++. Chúc các bạn thành công!</p>\n\n<div class=\"quiz\" style=\"background-color: rgb(250, 239, 195); padding:10px\">\n<p><span style=\"background-color: rgb(250, 239, 195);\">Như vậy là chúng ta đã hoàn thành nội dung&nbsp;<strong>\"Giới thiệu về lập trình C++</strong></span><strong style=\"background-color: rgb(250, 239, 195);\"><strong>\"</strong></strong><span style=\"background-color: rgb(250, 239, 195);\">. Để củng cố và nắm vững nội dung đã học, mời bạn cùng thử sức với&nbsp;<a href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\">&nbsp;</a></span><a href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\"><strong>\"Bộ Câu hỏi</strong></a><a href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\"><span style=\"background-color: rgb(250, 239, 195);\">&nbsp;</span></a><strong style=\"background-color: rgb(250, 239, 195);\"><a href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\">Trắc Nghiệm C++ có đáp án chi tiết\"</a></strong></p>\n\n<p style=\"text-align:center\"><a class=\"btn btn-tracnghiem\" href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\" target=\"_blank\"><span>Trắc Nghiệm</span></a></p>\n</div>\n\n\n\n\n\n\n\n\n\n              "
}