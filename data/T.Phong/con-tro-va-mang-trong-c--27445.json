{
    "title": "Con trỏ và mảng trong C++",
    "desicription": "Trong bài viết dưới đây, eLib sẽ cùng các bạn đi tìm hiểu mối quan hệ giữa con trỏ và mảng trong ngôn ngữ lập trình C++. Bạn sẽ học thêm về một số toán tử của con trỏ, sử dụng các toán tử đó để duyệt mảng. Do đó, bạn sẽ biết thêm 1 cách mới để lặp qua mảng sử dụng con trỏ. Cùng theo dõi nhé!",
    "img": "https://www.elib.vn/images/doc/2020/20201028//thumb/600x254/con-tro-va-mang-trong-c-825.jpg",
    "content": "\n              <div id=\"1\">\n<h2>1. Mối quan hệ giữa con trỏ và mảng</h2>\n</div>\n\n<p>Con trỏ&nbsp;và&nbsp;mảng&nbsp;trong C++&nbsp;có mối liên hệ chặt chẽ với nhau. Thực tế, con trỏ và mảng có thể thay thế cho nhau trong một số trường hợp. Ví dụ, một con trỏ mà trỏ tới phần đầu của mảng có thể truy cập mảng đó bởi sử dụng: con trỏ số học hoặc chỉ số của mảng.</p>\n\n<p>Ví dụ:</p>\n\n<div>\n<div>\n<div id=\"highlighter_807607\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAX = <span class=\"hljs-number\">3</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span>  arr[MAX] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>};\n    <span class=\"hljs-keyword\">int</span>  *contro;\n\n    <span class=\"hljs-comment\">// contro tro toi mang</span>\n    contro = arr; <span class=\"hljs-comment\">// arr dai dien cho gia tri dau tien cua mang arr</span>\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; MAX; i++) {\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Dia chi cua arr[\"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">\"] = \"</span>;\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; contro &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Gia tri cua arr[\"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-string\">\"] = \"</span>;\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; *contro &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n\n        <span class=\"hljs-comment\">// tro toi vi tri tiep theo</span>\n        contro++;\n   }\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n\n<div>Kết quả:</div>\n</div>\n</div>\n</div>\n\n<div>\n<pre><code class=\"language-cpp hljs\">Dia chi cua arr[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0x6ffe30</span>\nGia tri cua arr[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">10</span>\nDia chi cua arr[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">0x6ffe34</span>\nGia tri cua arr[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">20</span>\nDia chi cua arr[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">0x6ffe38</span>\nGia tri cua arr[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">30</span></code></pre>\n</div>\n\n<p>Tuy nhiên, con trỏ và mảng không hoàn toàn thay thế được cho nhau. Ví dụ:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> </span>\n \n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">int</span> MAX = <span class=\"hljs-number\">3</span>;\n \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-keyword\">int</span>  arr[MAX] = {<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>};\n \n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>; i &lt; MAX; i++) {\n        *arr = i;    <span class=\"hljs-comment\">// cu phap nay la dung.</span>\n        arr++;       <span class=\"hljs-comment\">// cu phap nay la sai.</span>\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; arr[i];\n   }\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n\n<p>Việc áp dụng toán tử con trỏ * tới biến mảng&nbsp;arr&nbsp;là hợp lệ, nhưng nó không hợp lệ khi sửa đổi giá trị biến arr. Lý do là biến mảng arr là một hằng số con trỏ trỏ tới phần đầu mảng.</p>\n</div>\n\n<p>Bởi vì, một tên mảng tạo một hằng con trỏ, nó có thể vẫn được sử dụng trong các biểu thức con trỏ, miễn là nó không bị sửa đổi. Ví dụ sau là một lệnh hợp lệ mà gán arr[2] giá trị 100.</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\">*(arr + <span class=\"hljs-number\">2</span>) = <span class=\"hljs-number\">100</span>;</code></pre>\n</div>\n\n<p>Lệnh trên là hợp lệ và sẽ biên dịch thành công vì&nbsp;arr&nbsp;không bị thay đổi.</p>\n\n<div id=\"2\">\n<h2>2.&nbsp;Sự khác nhau giữa con trỏ và mảng trong C++</h2>\n</div>\n\n<p>Việc sao chép 1 số lượng lớn các phần tử sẽ gây&nbsp;tốn rất nhiều vùng nhớ&nbsp;và&nbsp;giảm hiệu suất.</p>\n\n<p>Vì vậy, khi truyền một mảng cho một hàm, mảng sẽ được chuyển đổi ngầm định thành một con trỏ trỏ đến mảng, và con trỏ được truyền vào hàm:</p>\n\n<div id=\"collapse-expand-6\">\n<div id=\"copycodetagfor-6\">\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printSize</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> *<span class=\"hljs-built_in\">array</span>)</span>\n</span>{\n\t<span class=\"hljs-comment\">// tham số array là con trỏ int*</span>\n\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-built_in\">array</span>) &lt;&lt; <span class=\"hljs-string\">'\\n'</span>; <span class=\"hljs-comment\">// kích thước con trỏ int*, không phải kích thước mảng</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n\t<span class=\"hljs-keyword\">int</span> <span class=\"hljs-built_in\">array</span>[] = { <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">7</span> };\n\t<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-built_in\">array</span>) &lt;&lt; <span class=\"hljs-string\">'\\n'</span>; <span class=\"hljs-comment\">// kích thước mảng: sizeof(int) * array length</span>\n\n\tprintSize(<span class=\"hljs-built_in\">array</span>); <span class=\"hljs-comment\">// đối số array được chuyển thành con trỏ int* tại đây</span>\n\n\tsystem(<span class=\"hljs-string\">\"pause\"</span>);\n\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n\n<p>Output:</p>\n\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-number\">14</span>\n<span class=\"hljs-number\">6</span>\n</code></pre>\n\n<p>Lưu ý rằng điều này xảy ra ngay cả khi tham số được khai báo là một mảng cố định:</p>\n\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printSize</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a[<span class=\"hljs-number\">100</span>])</span></span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">printSize</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a[])</span></span>;</code></pre>\n\n<p>Chú ý:&nbsp;Để tránh nhầm lẫn về việc đang thao tác với mảng hay con trỏ, ưu tiên sử dụng cú pháp con trỏ (*) cho tham số hàm là mảng.</p>\n\n<p>Trên đây là bài viết của eLib.VN về&nbsp;Con trỏ và mảng trong C++.&nbsp;Việc sử dụng con trỏ để quản lý mảng một chiều thường được dùng khi viết các hàm thao tác với mảng. Chúc các bạn thuần thục và sử dụng dễ dàng hơn các thao tác liên quan đến mảng và con trỏ.</p>\n\n\n\n\n\n\n\n\n\n              "
}