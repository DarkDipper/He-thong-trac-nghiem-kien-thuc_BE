{
    "title": "Xử lý ngoại lệ trong C++",
    "desicription": "Ngoại lệ (exception) là vấn đề - lỗi phát sinh trong quá trình thực thi chương trình. Thường khi chương trình đang chạy mà phát sinh ngoại lệ (lỗi) thì dẫn đến chương trình kết thúc ngay lập tức. Có vô số nguyên nhân để chương trình đang chạy mà phát sinh ngoại lệ. Để tìm hiểu rõ hơn cách xử lý ngoại lệ trong C++, mời bạn đọc cùng eLib tham khảo bài viết dưới đây.",
    "img": "https://www.elib.vn/images/doc/2020/20201029//thumb/600x254/xu-ly-ngoai-le-trong-c-180.jpg",
    "content": "\n              <div id=\"1\">\n<h2 id=\"goto-h2-1\">1. Xử lý ngoại lệ (Exception Handling) trong C++</h2>\n</div>\n\n<p>Một&nbsp;Exception (ngoại lệ)&nbsp;là một vấn đề xuất hiện trong khi thực thi một chương trình, làm gián đoạn chương trình. Một Exception trong C++ là một phản hồi về một tình huống ngoại lệ mà xuất hiện trong khi một chương trình đang chạy, ví dụ như chia cho số 0.</p>\n\n<p>Exception cung cấp một cách để truyền điều khiển từ một phần của một chương trình tới phần khác. Exception Handling (Xử lý ngoại lệ) trong C++ được xây dựng dựa trên 3 từ khóa là:&nbsp;try, catch,&nbsp;và&nbsp;throw.</p>\n\n<ul>\n\t<li>\n\t<p>throw:&nbsp;Một chương trình ném một Exception khi một vấn đề xuất hiện. Việc này được thực hiện bởi sử dụng từ khóa&nbsp;throw&nbsp;trong C++.</p>\n\t</li>\n\t<li>\n\t<p>catch:&nbsp;Một chương trình bắt một Exception với một Exception Handler tại vị trí trong một chương trình nơi bạn muốn xử lý vấn đề đó. Từ khóa&nbsp;catch&nbsp;trong C++ chỉ dẫn việc bắt một exception.</p>\n\t</li>\n\t<li>\n\t<p>try:&nbsp;Một khối&nbsp;try&nbsp;có thể được bắt bởi một số lượng cụ thể exception. Nó được theo sau bởi một hoặc nhiều khối catch.</p>\n\t</li>\n</ul>\n\n<p>Giả sử một khối sẽ tạo một Exeption, một phương thức bắt một exception bởi sử dụng kết hợp các từ khóa&nbsp;try&nbsp;và&nbsp;catch. Một khối try/catch được đặt xung quanh code mà có thể tạo một exception. Code bên trong một khối try/catch được xem như là code được bảo vệ, và cú pháp để sử dụng try/catch trong C++ như sau:</p>\n\n<div>\n<div>\n<div id=\"highlighter_101189\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-keyword\">try</span>\n{\n   <span class=\"hljs-comment\">// phan code duoc bao ve</span>\n}<span class=\"hljs-keyword\">catch</span>( ten_Exception e1 )\n{\n   <span class=\"hljs-comment\">// day la khoi catch</span>\n}<span class=\"hljs-keyword\">catch</span>( ten_Exception e2 )\n{\n   <span class=\"hljs-comment\">// day la khoi catch</span>\n}<span class=\"hljs-keyword\">catch</span>( ten_Exception eN )\n{\n   <span class=\"hljs-comment\">// day la khoi catch</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Bạn có thể liệt kê nhiều lệnh&nbsp;catch&nbsp;để bắt các kiểu exception khác nhau trong trường hợp khối&nbsp;try&nbsp;của bạn xuất hiện nhiều hơn một exception trong các tình huống khác nhau.</p>\n\n<div id=\"2\">\n<h2 id=\"goto-h2-2\">2. Ném (throw) Exception trong C++</h2>\n</div>\n\n<p>Exception có thể bị ném ở bất cứ đâu bên trong một khối code bởi sử dụng các lệnh&nbsp;throw&nbsp;trong C++. Toán hạng của lệnh throw quyết định kiểu cho exception và có thể là bất kỳ biểu thức nào và kiểu kết quả của biểu thức quyết định kiểu của exception bị ném.</p>\n\n<p>Ví dụ sau minh họa việc ném một exception khi chia cho số 0 trong C++:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">chia</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span>\n</span>{\n   <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-number\">0</span> )\n   {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"Chu y: Ban dang chi cho so 0!!!\"</span>;\n   }\n   <span class=\"hljs-keyword\">return</span> (a/b);\n}</code></pre>\n</div>\n\n<div id=\"3\">\n<h2>3. Bắt (catch) Exception trong C++</h2>\n</div>\n\n<p>Khối&nbsp;catch&nbsp;theo sau khối try trong C++ sẽ bắt bất kỳ exception nào. Bạn có thể xác định kiểu của exception bạn muốn bắt và điều này được xác định bởi khai báo exception mà xuất hiện trong các dấu ngoặc đơn theo sau từ khóa catch trong C++.</p>\n\n<div>\n<div>\n<div id=\"highlighter_649468\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-keyword\">try</span>\n{\n   <span class=\"hljs-comment\">// phan code duoc bao ve</span>\n} <span class=\"hljs-keyword\">catch</span>( ten_Exception e )\n{\n  <span class=\"hljs-comment\">// phan code de xu ly ngoai le co ten la ten_Exception</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Code trên sẽ bắt một exception có kiểu là&nbsp;ten_Exception. Nếu bạn muốn xác định rằng một khối catch nến xử lý bất kỳ kiểu exception nào bị ném trong một khối try, bạn phải đặt một dấu ba chấm (…) trong các dấu ngoặc đơn theo sau từ khóa catch, như sau:</p>\n\n<div>\n<div>\n<div id=\"highlighter_926720\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-keyword\">try</span>\n{\n   <span class=\"hljs-comment\">// phan code duoc bao ve</span>\n} <span class=\"hljs-keyword\">catch</span>(...)\n{\n  <span class=\"hljs-comment\">// phan code de xu ly bat ky kieu ngoai le nao</span>\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Ví dụ sau ném một exception khi chia cho số 0 và chúng ta bắt nó trong khối catch.</p>\n\n<div>\n<div>\n<div id=\"highlighter_700253\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">chia</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> a, <span class=\"hljs-keyword\">int</span> b)</span>\n</span>{\n   <span class=\"hljs-keyword\">if</span>( b == <span class=\"hljs-number\">0</span> )\n   {\n      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"Chu y: Ban dang chi cho so 0!\"</span>;\n   }\n   <span class=\"hljs-keyword\">return</span> (a/b);\n}<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span> <span class=\"hljs-params\">()</span>\n</span>{\n   <span class=\"hljs-keyword\">int</span> x = <span class=\"hljs-number\">15</span>;\n   <span class=\"hljs-keyword\">int</span> y = <span class=\"hljs-number\">0</span>;\n   <span class=\"hljs-keyword\">double</span> z = <span class=\"hljs-number\">0</span>;\n  \n   <span class=\"hljs-keyword\">try</span> {\n     z = chia(x, y);\n     <span class=\"hljs-built_in\">cout</span> &lt;&lt; z &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   }<span class=\"hljs-keyword\">catch</span> (<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span>* msg) {\n     <span class=\"hljs-built_in\">cerr</span> &lt;&lt; msg &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n   }   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Bởi vì chúng ta đang tạo một exception có kiểu&nbsp;const char*, vì thế trong khi bắt exception này, chúng ta phải sử dụng const char* trong khối catch.</p>\n\n<p>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201029/images/xu-ly-ngoai-le-trong-c-_1603955256.png\"></p>\n\n<div id=\"4\">\n<h2 id=\"goto-h2-4\">4. Standard Exception trong C++</h2>\n</div>\n\n<p>C++ cung cấp một danh sách các Standard Exception được định nghĩa trong&nbsp;<exception></exception>mà chúng ta có thể sử dụng trong các chương trình. Những exception này được sắp xếp theo cấu trúc thứ tự cha-con như sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201029/images/xu-ly-ngoai-le-trong-c-2_1603955257.png\" style=\"width: 550px; height: 659px;\"></p>\n\n<p>Bảng dưới là miêu tả ngắn gọn về mỗi exception được đề cập trong sơ đồ trên:</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Exception</th>\n\t\t\t<th>Mô tả</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::exception</td>\n\t\t\t<td>Một exception và lớp cha của tất cả Standard Exception trong C++</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::bad_alloc</td>\n\t\t\t<td>Có thể được ném bởi&nbsp;new</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::bad_cast</td>\n\t\t\t<td>Có thể được ném bởi&nbsp;dynamic_cast</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::bad_exception</td>\n\t\t\t<td>Đây là thiết bị hữu ích để xử lý Unexpected Exception trong một chương trình C++</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::bad_typeid</td>\n\t\t\t<td>Có thể được ném bởi&nbsp;typeid</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::logic_error</td>\n\t\t\t<td>Một exception mà theo lý thuyết có thể được phát hiện bởi việc đọc code</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::domain_error</td>\n\t\t\t<td>Đây là một exception được ném khi một miền toán học không hợp lệ được sử dụng</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::invalid_argument</td>\n\t\t\t<td>Được ném do các tham số không hợp lệ</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::length_error</td>\n\t\t\t<td>Được ném khi một std::string quá lớn được tạo ra</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::out_of_range</td>\n\t\t\t<td>Có thể được ném bởi một phương thức, ví dụ std::vector và std::bitset&lt;&gt;::operator[]().</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::runtime_error</td>\n\t\t\t<td>Một exception mà theo lý thuyết không thể được phát hiện bởi việc đọc code</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::overflow_error</td>\n\t\t\t<td>Được ném nếu một sự tràn luồng toán học (mathematical overflow) xuất hiện</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::range_error</td>\n\t\t\t<td>Xuất hiện khi bạn cố gắng lưu giữ một giá trị bên ngoài dãy giá trị</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>std::underflow_error</td>\n\t\t\t<td>Được ném nếu một mathematical underflow (sự tràn dưới) xuất hiện</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<div id=\"5\">\n<h2 id=\"goto-h2-5\">5. Định nghĩa Exception mới trong C++</h2>\n</div>\n\n<p>Bạn có thể định nghĩa các&nbsp;exception&nbsp;cho riêng bạn bằng việc kế thừa và ghi đè tính năng lớp exception trong C++. Ví dụ sau minh họa cách bạn có thể sử dụng lớp std::exception để triển khai exception của riêng bạn theo một cách chuẩn trong C++:</p>\n\n<div>\n<div>\n<div id=\"highlighter_155498\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;exception&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">MyException</span> :</span> <span class=\"hljs-keyword\">public</span> exception\n{\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">char</span> * <span class=\"hljs-title\">what</span> <span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title\">throw</span> <span class=\"hljs-params\">()</span>\n  </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"Exception trong C++\"</span>;\n  }\n};\n  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n  <span class=\"hljs-keyword\">try</span>\n  {\n    <span class=\"hljs-keyword\">throw</span> MyException();\n  }\n  <span class=\"hljs-keyword\">catch</span>(MyException&amp; e)\n  {\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"MyException da duoc bat!\"</span> &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">cout</span> &lt;&lt; e.what() &lt;&lt; <span class=\"hljs-built_in\">std</span>::<span class=\"hljs-built_in\">endl</span>;\n  }\n  <span class=\"hljs-keyword\">catch</span>(<span class=\"hljs-built_in\">std</span>::exception&amp; e)\n  {\n    <span class=\"hljs-comment\">// phan nay danh cho cac error khac</span>\n  }\n}</code></pre>\n</div>\n\n<div>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</div>\n</div>\n</div>\n</div>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201029/images/xu-ly-ngoai-le-trong-c-3_1603955257.png\"></p>\n\n<p>Ở đây,&nbsp;what()&nbsp;là một phương thức public được cung cấp bởi lớp exception trong C++ và nó đã được ghi đè bởi tất cả các lớp exception con. Ví dụ này trả về nguyên nhân của một exception trong C++.</p>\n\n<p>Trên đây là bài viết của eLib.VN về&nbsp;Xử lý ngoại lệ trong C++.&nbsp;Hy vọng qua bài này bạn sẽ hiểu và vận dụng trong quá trình học tập và làm việc với C++. Chúc các bạn thành công!</p>\n\n\n\n\n\n\n\n\n\n              "
}