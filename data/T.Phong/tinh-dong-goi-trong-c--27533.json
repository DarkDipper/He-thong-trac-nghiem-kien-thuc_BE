{
    "chapter": "C++ Lớp Object",
    "title": "Tính đóng gói trong C++",
    "desicription": "Trong lập trình hướng đối tượng, tính đóng gói là quá trình giữ cho các thông tin chi tiết về cách cài đặt một đối tượng, được ẩn đi khỏi người dùng của đối tượng. Thay vào đó, người dùng của đối tượng sẽ truy cập vào đối tượng thông qua một giao diện công khai. Bằng cách này, người dùng có thể sử dụng đối tượng mà không cần phải hiểu về cách mà nó được cài đặt. Để hiểu rõ hơn về tính đóng gói trong lập trình C++, mời bạn đọc tham khảo bài viết dưới đây của eLib.VN",
    "img": "https://www.elib.vn/images/doc/2020/20201028//thumb/600x254/tinh-dong-goi-trong-c-503.jpg",
    "content": "\n              <div id=\"1\">\n<h2 id=\"goto-h2-1\">1. Tính đóng gói trong C++</h2>\n</div>\n\n<p>Tất cả chương trình C++ bao gồm hai thành phần nền tảng là:</p>\n\n<ul>\n\t<li>\n\t<p>Các lệnh (code) chương trình:&nbsp;Đây là phần chương trình mà thực hiện các hành động và cúng được gọi là các hàm.</p>\n\t</li>\n\t<li>\n\t<p>Dữ liệu chương trình:&nbsp;Dữ liệu là thông tin của chương trình mà tác động đến các hàm chương trình.</p>\n\t</li>\n</ul>\n\n<p>Tính đóng gói (Encapsulation) là một khái niệm của lập trình hướng đối tượng mà ràng buộc dữ liệu và các hàm mà thao tác dữ liệu đó, và giữ chúng an toàn bởi ngăn cản sự gây trở ngại và sự lạm dụng từ bên ngoài. Tính đóng gói dẫn đến khái niệm OOP quan trọng là&nbsp;Data Hiding.</p>\n\n<p>Tính đóng gói - Data encapsulation&nbsp;là một kỹ thuật đóng gói dữ liệu, và các hàm mà sử dụng chúng và trừu tượng hóa dữ liệu là một kỹ thuật chỉ trưng bày tới các Interface và ẩn Implementation Detail (chi tiết trình triển khai) tới người sử dụng.</p>\n\n<p>C++ hỗ trợ các thuộc tính của đóng gói và ẩn dữ liệu thông qua việc tạo các kiểu tự định nghĩa (user-defined), gọi là classes. Chúng ta đã học rằng một lớp có thể chứa các thành viên&nbsp;private, protected&nbsp;và&nbsp;public. Theo mặc định, tất cả thành phần được định nghĩa trong một lớp là private. Ví dụ:</p>\n\n<div>\n<div>\n<div id=\"highlighter_910511\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Box</span>\n{</span>\n   <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">double</span> <span class=\"hljs-title\">tinhTheTich</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>)</span>\n      </span>{\n         <span class=\"hljs-keyword\">return</span> chieudai * chieurong * chieucao;\n      }\n   <span class=\"hljs-keyword\">private</span>:\n      <span class=\"hljs-keyword\">double</span> chieudai;      <span class=\"hljs-comment\">// Chieu dai cua mot box</span>\n      <span class=\"hljs-keyword\">double</span> chieurong;     <span class=\"hljs-comment\">// Chieu rong cua mot box</span>\n      <span class=\"hljs-keyword\">double</span> chieucao;      <span class=\"hljs-comment\">// Chieu cao cua mot box</span>\n};</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>&nbsp;</p>\n\n<div>\n<div>\n<div>\n<div>Các biến&nbsp;chieudai, chieurong, và chieucao&nbsp;là&nbsp;private. Nghĩa là chúng chỉ có thể được truy cập bởi các thành viên khác của lớp Box, và không thể bởi bất kỳ phần khác trong chương trình của bạn. Đây là một cách thực hiện tính đóng gói trong C++.</div>\n</div>\n</div>\n</div>\n\n<p>Để làm cho các phần của lớp là&nbsp;public&nbsp;(ví dụ: có thể truy cập tới các phần khác trong chương trình của bạn), bạn phải khai báo chúng sau từ khóa&nbsp;public. Tất cả biến và hàm được định nghĩa sau từ khóa public là có thể truy cập cho tất cả các hàm trong chương trình của bạn.</p>\n\n<div id=\"2\">\n<h2 id=\"goto-h2-2\">2. Ví dụ về tính đóng gói trong C++</h2>\n</div>\n\n<p>Trong bất kỳ chương trình C++ nào, nơi bạn triển khai một lớp với các thành viên là public và private thì đó là ví dụ của tính đóng gói và Trừu tượng hóa dữ liệu trong C++. Bạn xem xét ví dụ sau:</p>\n\n<div>\n<div>\n<div id=\"highlighter_109206\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span>{</span>\n   <span class=\"hljs-keyword\">public</span>:\n      <span class=\"hljs-comment\">// khai bao constructor</span>\n      A(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>)\n      {\n        tong = i;\n      }\n      <span class=\"hljs-comment\">// du lieu ma la nhin thay voi ben ngoai</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">congThem</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> motso)</span>\n      </span>{\n          tong += motso;\n      }\n      <span class=\"hljs-comment\">// du lieu ma la nhin thay voi ben ngoai</span>\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">tinhTong</span><span class=\"hljs-params\">()</span>\n      </span>{\n          <span class=\"hljs-keyword\">return</span> tong;\n      };\n   <span class=\"hljs-keyword\">private</span>:\n      <span class=\"hljs-comment\">// du lieu ma la bi an voi ben ngoai</span>\n      <span class=\"hljs-keyword\">int</span> tong;\n};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   A a;\n    \n   a.congThem(<span class=\"hljs-number\">15</span>);\n   a.congThem(<span class=\"hljs-number\">25</span>);\n   a.congThem(<span class=\"hljs-number\">35</span>);   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Tong gia tri la: \"</span> &lt;&lt; a.tinhTong() &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201028/images/tinh-dong-goi-trong-c-_1603879452.png\" style=\"width: 425px; height: 69px;\"></p>\n\n<p>Lớp trên cộng hai số và trả về tổng của chúng. Các thành viên public là&nbsp;congThem&nbsp;và&nbsp;tinhTong&nbsp;là các Interface (mà là nhìn thấy) tới bên ngoài và một người sử dụng cần biết chúng để sử dụng lớp đó. Thành viên private là&nbsp;tong&nbsp;là cái gì đó mà người sử dụng không cần biết đến, nhưng là cần thiết cho lớp đó hoạt động một cách chính xác.</p>\n\n<div id=\"3\">\n<h2 id=\"goto-h2-3\">3. Chiến lược thiết kế trong C++</h2>\n</div>\n\n<p>Hầu hết chúng ta đã có ít nhiều kinh nghiệm về việc làm cho các thành viên lớp là private theo mặc định, trừ khi chúng ta thực sự cần thiết phải trưng bày chúng. Đó là một kinh nghiệm về&nbsp;tính đóng gói&nbsp;tốt.</p>\n\n<p>Kinh nghiệm này được áp dụng thường xuyên nhất cho các thành viên dữ liệu, nhưng nó áp dụng như nhau cho tất cả thành viên, bao gồm cả các hàm virtual trong C++.</p>\n\n<p>Trên đây là bài viết của eLib.VN về tính đóng gói trong lập trình C++. Chúng tôi hy vọng&nbsp;bài này sẽ giúp các bạn nhiều hơn trong quá trình tìm hiểu OOP. Chúc các bạn thành công.</p>\n\n\n\n\n\n\n\n\n\n              "
}