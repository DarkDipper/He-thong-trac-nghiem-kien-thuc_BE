{
    "chapter": "Lập trình C++ nâng cao",
    "title": "Đa luồng trong C++",
    "desicription": "Đa luồng (Multithreading) là một form chuyên dụng của đa nhiệm (multitasking) và một đa nhiệm là tính năng cho phép máy tính của bạn chạy hai hoặc nhiều chương trình đồng thời. Để tìm hiểu rõ hơn về Đa luồng trong C++, mời bạn đọc tham khảo bài viết dưới đây của eLib",
    "img": "https://www.elib.vn/images/doc/2020/20201029//thumb/600x254/da-luong-trong-c-109.jpg",
    "content": "\n              <div id=\"1\">\n<h2 id=\"goto-h2-1\">1. Đa luồng (Multithread) trong C++</h2>\n</div>\n\n<p>Đa luồng (Multithreading)&nbsp;là một form chuyên dụng của đa nhiệm (multitasking) và một đa nhiệm là tính năng cho phép máy tính của bạn chạy hai hoặc nhiều chương trình đồng thời. Nói chung, có hai kiểu đa nhiệm là: process-based và thread-based tương ứng: dựa trên tiến trình và dựa trên luồng.</p>\n\n<p>Đa nhiệm dựa trên tiến trình xử lý việc thực thi đồng thời của các chương trình. Đa nhiệm dựa trên luồng xử lý việc thực thi đồng thời các phần của cùng một chương trình.</p>\n\n<p>Một chương trình đa luồng chứa hai hoặc nhiều phần mà có thể chạy đồng thời. Mỗi phần của chương trình đó được gọi là một thread, và mỗi thread định nghĩa một path riêng biệt của sự thực thi.</p>\n\n<p>C++ không chứa bất kỳ hỗ trợ có sẵn nào cho các ứng dụng đa luồng. Thay vào đó, nó dựa hoàn toàn vào Hệ điều hành để cung cấp tính năng này.</p>\n\n<p>Chương này giả sử bạn đang làm việc trên Hệ điều hành Linux và chúng tôi đang chuẩn bị viết chương trình đa luồng trong C++ bởi sử dụng POSIX. POSIX Threads hoặc Pthreads cung cấp API mà có sẵn trên nhiều hệ thống như FreeBSD, NetBSD, GNU/Linux, Mac OS X và Solaris.</p>\n\n<div id=\"2\">\n<h2 id=\"goto-h2-2\">2. Tạo Thread trong C++</h2>\n</div>\n\n<p>Đây là chương trình chúng ta sử dụng để tạo một POSIX thread:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pthread.h&gt;</span></span>\npthread_create (thread, attr, start_routine, arg) </code></pre>\n</div>\n\n<p>Ở đây,&nbsp;pthread_create&nbsp;tạo một thread mới và làm nó có thể thực thi. Chương trình này có thể được gọi bất cứ thời điểm nào ở bất cứ đâu trong code của bạn. Dưới đây là miêu tả các tham số:</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>Tham số</th>\n\t\t\t<th>Mô tả</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">thread</td>\n\t\t\t<td>Một định danh duy nhất cho thread mới được trả về bởi chương trình con</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">attr</td>\n\t\t\t<td>Một thuộc tính mà có thể được sử dụng để thiết lập các thuộc tính của thread. Bạn có thể xác định một đối tượng thuộc tính thread, hoặc NULL cho các giá trị mặc định</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">start_routine</td>\n\t\t\t<td>Chương trình C++ mà thread này sẽ thực thi một khi nó được tạo</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">arg</td>\n\t\t\t<td>Một tham số đơn mà có thể được truyền tới start_routine. Nó phải được truyền bởi tham chiếu dạng một con trỏ của kiểu void. NULL có thể được sử dụng nếu không có tham số nào được truyền</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p>Số thread tối đa có thể được tạo bởi một tiến trình là phụ thuộc vào trình triển khai (Implementation). Một khi được tạo, các thread là ngang hàng, và có thể tạo các thread khác. Không có sự phụ thuộc giữa các thread trong C++.</p>\n\n<div id=\"3\">\n<h2 id=\"goto-h2-3\">3. Kết thúc Thread trong C++</h2>\n</div>\n\n<p>Chương trình sau được sử dụng để kết thúc một POSIX thread trong C++:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pthread.h&gt;</span></span>\npthread_exit (status)</code></pre>\n</div>\n\n<p>Ở đây&nbsp;pthread_exit&nbsp;được sử dụng để kết thúc một thread. Chương trình pthread_exit() được gọi sau khi một thread đã hoàn thành công việc của nó và không cần thiết phải tồn tại nữa.</p>\n\n<p>Nếu main() kết thúc trước các thread nó đã tạo, và kết thúc chương trình pthread_create(), thì các thread khác sẽ tiếp tục thực thi. Nếu không thì, chúng sẽ tự động được kết thúc khi main() hoàn thành.</p>\n\n<div id=\"4\">\n<h2 id=\"goto-h2-4\">4. Ví dụ đa luồng trong C++</h2>\n</div>\n\n<p>Ví dụ đơn giản sau tạo 5 thread với chương trình pthread_create(). Mỗi thread in một thông báo \"Hello World!\", và sau đó kết thúc với một lời gọi tới pthread_exit() trong C++:</p>\n\n<div>\n<div>\n<div id=\"highlighter_112839\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pthread.h&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> THREAD_NUMBER 4</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> *<span class=\"hljs-title\">InLoiChao</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *threadid)</span>\n</span>{\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Hello World! Thread ID la \"</span> &lt;&lt; threadid &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    pthread_exit(<span class=\"hljs-literal\">NULL</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">pthread_t</span> threads[THREAD_NUMBER];\n    <span class=\"hljs-keyword\">int</span> rc;\n    <span class=\"hljs-keyword\">int</span> i;\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; THREAD_NUMBER; i++) {\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nmain() : dang tao thread! \"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n        rc = pthread_create(&amp;threads[i], <span class=\"hljs-literal\">NULL</span>,\n            InLoiChao, (<span class=\"hljs-keyword\">int</span>*)i);\n        <span class=\"hljs-keyword\">if</span> (rc) {\n            <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nError: Khong the tao thread!\"</span> &lt;&lt; rc &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n            <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">-1</span>);\n        }\n    }\n    pthread_exit(<span class=\"hljs-literal\">NULL</span>);\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201029/images/da-luong-trong-c-_1603956771.png\" style=\"width: 519px; height: 249px;\"></p>\n\n<div id=\"5\">\n<h2 id=\"goto-h2-5\">5. Truyền tham số tới Thread trong C++</h2>\n</div>\n\n<p>Ví dụ này minh họa cách truyền nhiều tham số thông qua một cấu trúc. Bạn có thể truyền bất kỳ kiểu dữ liệu nào trong một Thread callback, bởi vì nó trỏ tới void như được giải thích trong ví dụ sau:</p>\n\n<div>\n<div>\n<div id=\"highlighter_524254\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pthread.h&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> THREAD_NUMBER  5</span>\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">du_lieu</span>{</span>\n<span class=\"hljs-keyword\">int</span>  id;\n<span class=\"hljs-keyword\">char</span>* thongdiep;\n};\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span>* <span class=\"hljs-title\">InLoiChao</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span>* thamso)</span>\n</span>{\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">du_lieu</span>* <span class=\"hljs-title\">data</span>;</span>\n    data = (struct du_lieu*)thamso;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nThread ID la: \"</span> &lt;&lt; data-&gt;id;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nThong diep: \"</span> &lt;&lt; data-&gt;thongdiep &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    pthread_exit(<span class=\"hljs-literal\">NULL</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">pthread_t</span> threads[THREAD_NUMBER];\n    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">du_lieu</span> <span class=\"hljs-title\">td</span>[<span class=\"hljs-title\">THREAD_NUMBER</span>];</span>\n    <span class=\"hljs-keyword\">int</span> rc;\n    <span class=\"hljs-keyword\">int</span> i;   <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; THREAD_NUMBER; i++) {\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nmain() : dang tao thread! \"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n        td[i].id = i;\n        td[i].thongdiep = <span class=\"hljs-string\">\"\\nDay la thong diep\"</span>;\n        rc = pthread_create(&amp;threads[i], <span class=\"hljs-literal\">NULL</span>,\n            InLoiChao, (<span class=\"hljs-keyword\">void</span>*)&amp;td[i]);\n        <span class=\"hljs-keyword\">if</span> (rc) {\n            <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nError: Khong the tao thread! \"</span> &lt;&lt; rc &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n            <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">-1</span>);\n        }\n    }\n    pthread_exit(<span class=\"hljs-literal\">NULL</span>);\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201029/images/da-luong-trong-c-1_1603956771.png\" style=\"width: 467px; height: 540px;\"></p>\n\n<div id=\"6\">\n<h2 id=\"goto-h2-6\">6. Kết hợp và Tháo gỡ các Thread trong C++</h2>\n</div>\n\n<p>Hai cú pháp sau được sử dụng để kết hợp (joining) hoặc tháo gỡ (detaching) các Thread trong C++:</p>\n\n<div>\n<div>\n<div id=\"highlighter_179617\">\n<div>\n<pre><code class=\"language-cpp hljs\">pthread_join (threadid, status) \npthread_detach (threadid)</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Chương trình con pthread_join() đóng khối thread đang gọi tới khi threadid kết thúc. Khi một thread được tạo, một trong các thuộc tính định nghĩa nó là joinable hoặc detached. Chỉ các thread được tạo với dạng joinable có thể được kết hợp. Nếu một thread được tạo với dạng detached, nó không bao giờ được kết hợp.</p>\n\n<p>Ví dụ sau minh họa cách đợi cho các thread kết thúc bởi sử dụng chương trình kết hợp Pthread trong C++:</p>\n\n<div>\n<div>\n<div id=\"highlighter_680530\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;cstdlib&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;pthread.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;unistd.h&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">define</span> THREAD_NUMBER 5</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> *<span class=\"hljs-title\">wait</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">void</span> *tid)</span>\n</span>{\n<span class=\"hljs-keyword\">int</span> i;\nsleep(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nDang tam dung mot Thread \"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n<span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nThread voi ID la : \"</span> &lt;&lt; tid &lt;&lt; <span class=\"hljs-string\">\"  ... dang thoat! \"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\npthread_exit(<span class=\"hljs-literal\">NULL</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    <span class=\"hljs-keyword\">int</span> rc;\n    <span class=\"hljs-keyword\">int</span> i;\n    <span class=\"hljs-keyword\">pthread_t</span> threads[THREAD_NUMBER];\n    <span class=\"hljs-keyword\">pthread_attr_t</span> attr;\n    <span class=\"hljs-keyword\">void</span>* status;\n    <span class=\"hljs-comment\">// khoi tao va thiet lap mot thread co the ket hop</span>\n    pthread_attr_init(&amp;attr);\n    pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_JOINABLE);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; THREAD_NUMBER; i++) {\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nmain() : dang tao thread! \"</span> &lt;&lt; i &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n        rc = pthread_create(&amp;threads[i], <span class=\"hljs-literal\">NULL</span>, wait, (<span class=\"hljs-keyword\">void</span>*)i);\n        <span class=\"hljs-keyword\">if</span> (rc) {\n            <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nError: Khong the tao thread! \"</span> &lt;&lt; rc &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n            <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">-1</span>);\n        }\n    }\n    <span class=\"hljs-comment\">// giai phong thuoc tinh va doi thread khac</span>\n    pthread_attr_destroy(&amp;attr);\n    <span class=\"hljs-keyword\">for</span> (i = <span class=\"hljs-number\">0</span>; i &lt; THREAD_NUMBER; i++) {\n        rc = pthread_join(threads[i], &amp;status);\n        <span class=\"hljs-keyword\">if</span> (rc) {\n            <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nError: khong the ket hop! \"</span> &lt;&lt; rc &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n            <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">-1</span>);\n        }\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nMain: ket huc thread id :\"</span> &lt;&lt; i;\n        <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"  va thoat voi trang thai:\"</span> &lt;&lt; status &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    }   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"\\nMain: thoat chuong trinh!\"</span> &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    pthread_exit(<span class=\"hljs-literal\">NULL</span>);\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201029/images/da-luong-trong-c-2_1603956771.png\" style=\"width: 544px; height: 785px;\"></p>\n\n<p>Trên đây là bài viết của eLib.VN về&nbsp;Đa luồng trong C++.&nbsp;Hy vọng qua bài này bạn sẽ hiểu và vận dụng trong quá trình học tập và làm việc với C++. Chúc các bạn thành công!</p>\n\n<div class=\"quiz\" style=\"background-color: rgb(250, 239, 195); padding:10px\">\n<p><span style=\"background-color: rgb(250, 239, 195);\">Như vậy là chúng ta đã hoàn thành nội dung&nbsp;<strong>\"Lập trình C++ nâng cao&nbsp;</strong></span><strong style=\"background-color: rgb(250, 239, 195);\"><strong>\"</strong></strong><span style=\"background-color: rgb(250, 239, 195);\">. Để củng cố và nắm vững nội dung đã học, mời bạn cùng thử sức với&nbsp;</span><a href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\" style=\"background-color: rgb(250, 239, 195);\"><strong>\"Bộ Câu hỏi</strong></a><a href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\" style=\"background-color: rgb(250, 239, 195);\">&nbsp;</a><strong style=\"background-color: rgb(250, 239, 195);\"><a href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\">Trắc Nghiệm C++ có đáp án chi tiết\"</a></strong></p>\n\n<p style=\"text-align:center\"><a class=\"btn btn-tracnghiem\" href=\"https://tracnghiem.net/cntt/400-cau-hoi-trac-nghiem-lap-trinh-c-c-co-dap-an-va-loi-giai-chi-tiet-107.html\" target=\"_blank\"><span>Trắc Nghiệm</span></a></p>\n</div>\n\n\n\n\n\n\n\n\n\n              "
}