{
    "chapter": "C++ Lớp Object",
    "title": "Tính trừu tượng trong C++",
    "desicription": "Tính trừu tượng (Abstraction) là một trong 4 tính chất đặc trưng quan trọng của các ngôn ngữ lập trình hướng đối tượng. Mục tiêu chính của nó là làm giảm sự phức tạp bằng cách ẩn các chi tiết không liên quan trực tiếp tới người dùng. Điều đó cho phép người dùng vẫn thực hiện được các công việc cần thiết dựa trên một thực thể trừu tượng được cung cấp mà không cần hiểu hoặc thậm chí không nghĩ về tất cả sự phức tạp ẩn giấu bên trong. Để tìm hiểu rõ hơn về tính trừu tượng trong C++, mời bạn đọc tham khảo bài viết dưới đây của eLib.",
    "img": "https://www.elib.vn/images/doc/2020/20201028//thumb/600x254/tinh-truu-tuong-trong-c-458.jpg",
    "content": "\n              <div id=\"1\">\n<h2 id=\"goto-h2-1\">1. Tính trừu tượng trong C++</h2>\n</div>\n\n<p>Trừu tượng hóa dữ liệu (Data abstraction)&nbsp;liên quan tới việc chỉ cung cấp thông tin cần thiết tới bên ngoài và ẩn chi tiết cơ sở của chúng, ví dụ: để biểu diễn thông tin cần thiết trong chương trình mà không hiển thị chi tiết về chúng.</p>\n\n<p>Trừu tượng hóa dữ liệu (Data abstraction) là một kỹ thuật lập trình mà dựa trên sự phân biệt của Interface và Implementation (trình triển khai).</p>\n\n<p>Xem xét ví dụ về một chiếc TV, bạn có thể bật/tắt, thay đổi kênh, chỉnh âm lượng, và thêm các thiết bị ngoại vi như loa, VCR và DVD. Nhưng bạn không biết các chi tiết nội vi của nó, đó là, bạn không biết cách nó nhận tín hiệu qua không khí hoặc qua dây cáp, cách phiên dịch chúng và cuối cùng là hiển thị chúng trên màn hình.</p>\n\n<p>Vì thế, có thể nói rằng một chiếc TV phân biệt rõ ràng trình triển khai nội vi của nó với giao diện ngoại vi và bạn có thể thao tác với interface với các nút nguồn, điều khiển âm lượng mà không cần có bất kỳ hiểu biết về những gì diễn ra bên trong nó.</p>\n\n<p>Bây giờ, về mặt ngôn ngữ lập trình C++, thì các lớp C++ cung cấp Trừu tượng hóa dữ liệu (Data abstraction) ở mức thật tuyệt vời. Chúng cung cấp đủ các phương thức public tới bên ngoài để thao tác với tính năng của đối tượng và để thao tác dữ liệu đối tượng, ví dụ: trạng thái mà không cần thực sự biết về cách lớp đó đã được triển khai nội tại.</p>\n\n<p>Ví dụ, chương trình của bạn có thể tạo một lời gọi tới hàm&nbsp;sort()&nbsp;mà không cần biết về hàm đó thực sự sử dụng thuật toán gì để sắp xếp các giá trị đã cho. Thực ra, trình triển khai cơ sở (underlying implementation) của tính năng sắp xếp có thể thay đổi tùy vào thư viện, và miễn là Interface vẫn như cũ thì lời gọi hàm của bạn vẫn tiếp tục làm việc.</p>\n\n<p>Trong C++, chúng ta sử dụng các&nbsp;Lớp&nbsp;để định nghĩa kiểu dữ liệu trừu tượng (abstract data types (ADT)) của riêng chúng ta. Bạn có thể sử dụng đối tượng cout của lớp&nbsp;ostream&nbsp;cho luồng dữ liệu tới đầu ra chuẩn như sau:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">( )</span>\n</span>{\n   <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Hello C++\"</span> &lt;&lt;<span class=\"hljs-built_in\">endl</span>;\n   <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n\n<p>Tại đây, bạn không cần hiểu cách cout hiển thị văn bản trên màn hình. Bạn chỉ cần biết Public Interface và Underlying Implementation của cout là sẵn sàng để thay đổi.</p>\n\n<div id=\"2\">\n<h2>2. Nhãn truy cập (Access Label) trong C++</h2>\n</div>\n\n<p>Trong C++, chúng ta sử dụng Access Label để định nghĩa Abstract Interface (Giao diện trừu tượng) cho lớp. Một lớp có thể chứa 0 hoặc nhiều Access Label.</p>\n\n<ul>\n\t<li>\n\t<p>Các thành viên được định nghĩa với một nhãn public là có thể truy cập cho tất cả các phần của chương trình. Trừu tượng hóa dữ liệu của một kiểu được định nghĩa bởi các thành viên public của nó.</p>\n\t</li>\n\t<li>\n\t<p>Các thành viên được định nghĩa với một nhãn private là không thể truy cập cho code mà sử dụng lớp đó. Khu vực private ẩn trình triển khai này với code mà sử dụng kiểu đó.</p>\n\t</li>\n</ul>\n\n<p>Không có hạn chế về tần suất mà một nhãn truy cập (Access Label) có thể xuất hiện. Mỗi Access Label xác định độ truy cập (Access Level) của sự định nghĩa thành viên tiếp theo. Độ truy cập đã xác định còn tồn tại hiệu quả tới khi gặp Access Label kế tiếp hoặc gặp dấu ngoặc móc đóng của thân lớp.</p>\n\n<div id=\"3\">\n<h2 id=\"goto-h2-3\">3. Lợi ích của Trừu tượng hóa dữ liệu trong C++</h2>\n</div>\n\n<p>Trừu tượng hóa dữ liệu trong C++ mang lại hai lợi thế quan trọng:</p>\n\n<ul>\n\t<li>\n\t<p>Phần nội vi hay bên trong lớp được bảo vệ tránh khỏi các lỗi do người dùng vô ý, mà có thể gây hư hỏng trạng thái của dữ liệu.</p>\n\t</li>\n\t<li>\n\t<p>Triển khai lớp có thể tiến hành qua thời gian để đáp ứng yêu cầu thay đổi hoặc bug các báo cáo mà không yêu cầu thay đổi trong code của người dùng.</p>\n\t</li>\n</ul>\n\n<p>Bằng việc định nghĩa các thành viên dữ liệu chỉ trong khu vực private của lớp, tác giả của lớp có thể tự do tạo các thay đổi trong dữ liệu. Nếu trình triển khai thay đổi, thì chỉ mã hóa lớp là cần kiểm tra để biết khía cạnh nào đem lại thay đổi. Nếu dữ liệu là public, thì khi đó bất kỳ hàm nào mà truy cập một cách trực tiếp tới các thành viên dữ liệu của phép biểu diễn cũ có thể bị phá vỡ.</p>\n\n<div id=\"4\">\n<h2>4. Ví dụ về Trừu tượng hóa dữ liệu trong C++</h2>\n</div>\n\n<p>Trong bất kỳ chương trình C++ nào, nơi bạn triển khai một lớp với các thành viên là public và private, thì đó là một ví dụ của trừu tượng hóa dữ liệu. Bạn xem xét ví dụ sau:</p>\n\n<div>\n<div>\n<div id=\"highlighter_331536\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> {</span>\n<span class=\"hljs-keyword\">public</span>:\n    <span class=\"hljs-comment\">// khai bao constructor</span>\n    A(<span class=\"hljs-keyword\">int</span> i = <span class=\"hljs-number\">0</span>)\n    {\n        tong = i;\n    }\n    <span class=\"hljs-comment\">// du lieu ma la nhin thay voi ben ngoai</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">congThem</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> motso)</span>\n    </span>{\n        tong += motso;\n    }\n    <span class=\"hljs-comment\">// du lieu ma la nhin thay voi ben ngoai</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">tinhTong</span><span class=\"hljs-params\">()</span>\n    </span>{\n        <span class=\"hljs-keyword\">return</span> tong;\n    };\n<span class=\"hljs-keyword\">private</span>:\n    <span class=\"hljs-comment\">// du lieu ma la bi an voi ben ngoai</span>\n    <span class=\"hljs-keyword\">int</span> tong;\n};\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span>\n</span>{\n    A a;\n\n    a.congThem(<span class=\"hljs-number\">10</span>);\n    a.congThem(<span class=\"hljs-number\">20</span>);\n    a.congThem(<span class=\"hljs-number\">50</span>);\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Tong gia tri la: \"</span> &lt;&lt; a.tinhTong() &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Biên dịch và chạy chương trình C++ trên sẽ cho kết quả sau:</p>\n\n<p style=\"text-align: center;\"><img alt=\"\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201030/images/tinh-truu-tuong-trong-c-_1604029527.png\" style=\"width: 475px; height: 71px;\"></p>\n\n<p>Lớp trên cộng hai số và trả về tổng của chúng. Các thành viên public là&nbsp;congThem&nbsp;và&nbsp;tinhTong&nbsp;là các Interface (mà là nhìn thấy) tới bên ngoài và một người sử dụng cần biết chúng để sử dụng lớp đó. Thành viên private là&nbsp;tong&nbsp;là cái gì đó mà người sử dụng không cần biết đến, nhưng là cần thiết cho lớp đó hoạt động một cách chính xác.</p>\n\n<div id=\"5\">\n<h2 id=\"goto-h2-5\">5. Chiến lược thiết kế trong C++</h2>\n</div>\n\n<p>Trừu tượng hóa dữ liệu phân biệt code thành Interface và Implementation. Vì thế, trong khi thiết kế thành phần của bạn, bạn phải giữ Interface độc lập với Implementation, để mà nếu bạn thay đổi underlying implementation thì Interface sẽ vẫn còn tồn tại như cũ.</p>\n\n<p>Trong trường hợp này, bất kỳ chương trình nào đang sử dụng các Interface này, chúng sẽ không bị ảnh hưởng và sẽ cần một sự tái biên dịch với Implementation mới nhất này.</p>\n\n<p>Trên đây là bài viết của eLib.VN về tính trừu tượng trong C++.&nbsp;Tính trừu tượng trong lập trình hướng đối tượng là tính chất đơn giản nhưng không kém phần quan trọng. Hiểu một cách cốt lõi&nbsp;khi sử dụng&nbsp;abstract class&nbsp;đó là nếu trong class abstract khai báo phương thức abstract thì bắt buộc các class khác khi kế thừa nó phải định nghĩa lại. Đây là tính chất sẽ sử dụng thường xuyên trong các bài toán liên quan đến trừu tượng sau này.</p>\n\n\n\n\n\n\n\n\n\n              "
}