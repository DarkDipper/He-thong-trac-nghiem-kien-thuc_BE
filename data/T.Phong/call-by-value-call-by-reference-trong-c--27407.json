{
    "title": "Call by value & Call by reference trong C++",
    "desicription": "Khi học lập trình C++, một tính chất không thể không nhắc đến chính là khả năng truyền tham chiếu và truyền tham trị. Trong bài viết dưới đây hãy cùng eLib.VN tìm hiểu xem chúng là gì, cách sử dụng và khi nào nên sử dụng chúng.",
    "img": "https://www.elib.vn/images/doc/2020/20201027//thumb/600x254/call-by-value-call-by-reference-trong-c-782.jpg",
    "content": "\n              <div id=\"1\">\n<h2>1.&nbsp;Phương thức&nbsp;call by value&nbsp;trong C++&nbsp;</h2>\n</div>\n\n<p>Phương thức&nbsp;call by value&nbsp;trong C++ của các đối số truyền vào một hàm sao chép giá trị thực của một đối số vào tham số chính thức của hàm. Trong trường hợp này, các thay đổi được thực hiện cho tham số bên trong hàm không ảnh hưởng đến đối số.</p>\n\n<p>Theo mặc định, lập trình C++ sử dụng call by value để chuyển đối số. Nói chung, nó có nghĩa là mã trong một hàm không thể thay đổi các đối số được sử dụng để gọi hàm. Hãy xem xét hàm&nbsp;swap() như sau.</p>\n\n<div>\n<div>\n<div id=\"highlighter_269580\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-comment\">/* khai bao prototype */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span></span>;\n  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// dinh nghia cac bien local</span>\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">200</span>;\n  \n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Truoc swap, gia tri cua a : \"</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Truoc swap, gia tri cua b : \"</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n  \n    <span class=\"hljs-comment\">// goi ham swap() de hoan doi cac gia tri</span>\n    swap(a, b);\n  \n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Sau swap, gia tri cua a : \"</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Sau swap, gia tri cua b : \"</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/*\n * ham hoan doi cac gia tri\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> x, <span class=\"hljs-keyword\">int</span> y)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> temp;\n\n    temp = x;\n    x = y;\n    y = temp;\n\n    <span class=\"hljs-keyword\">return</span>;\n}</code></pre>\n</div>\n</div>\n</div>\n</div>\n\n<p>Kết quả:</p>\n\n<div>\n<pre><code class=\"language-cpp hljs\">Truoc swap, gia tri cua a : <span class=\"hljs-number\">100</span>\nTruoc swap, gia tri cua b : <span class=\"hljs-number\">200</span>\nSau swap, gia tri cua a : <span class=\"hljs-number\">100</span>\nSau swap, gia tri cua b : <span class=\"hljs-number\">200</span></code></pre>\n</div>\n\n<p>Kết quả trên cho thấy rằng không có thay đổi trong các giá trị, mặc dù chúng đã được thay đổi bên trong hàm.</p>\n\n<div id=\"2\">\n<h2>2.&nbsp;Phương thức&nbsp;call by reference&nbsp;trong C++</h2>\n</div>\n\n<p>Phương thức&nbsp;call by reference&nbsp;trong C++ của các đối số truyền cho một hàm sao chép địa chỉ của một đối số vào tham số chính thức. Bên trong hàm, địa chỉ được sử dụng để truy cập đối số thực tế được sử dụng trong cuộc gọi hàm. Nó có nghĩa là những thay đổi được thực hiện cho tham số ảnh hưởng đến đối số đã truyền.</p>\n\n<p>Để chuyển một giá trị theo tham chiếu, các con trỏ đối số được chuyển tới các hàm giống như bất kỳ giá trị nào khác. Vì vậy, bạn cần phải khai báo các tham số hàm như các kiểu con trỏ như trong hàm&nbsp;swap(), hoán đổi các giá trị của hai biến số nguyên được trỏ tới, bởi các đối số của chúng. Ví dụ:</p>\n\n<div>\n<div>\n<div id=\"highlighter_259168\">\n<div>\n<pre><code class=\"language-cpp hljs\"><span class=\"hljs-meta\">#<span class=\"hljs-meta-keyword\">include</span> <span class=\"hljs-meta-string\">&lt;iostream&gt;</span></span>\n\n<span class=\"hljs-keyword\">using</span> <span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-built_in\">std</span>;\n\n<span class=\"hljs-comment\">/* khai bao prototype */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> *x, <span class=\"hljs-keyword\">int</span> *y)</span></span>;\n  \n<span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span> </span>{\n    <span class=\"hljs-comment\">// dinh nghia cac bien local</span>\n    <span class=\"hljs-keyword\">int</span> a = <span class=\"hljs-number\">100</span>;\n    <span class=\"hljs-keyword\">int</span> b = <span class=\"hljs-number\">200</span>;\n  \n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Truoc swap, gia tri cua a : \"</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Truoc swap, gia tri cua b : \"</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n  \n    <span class=\"hljs-comment\">// goi ham swap() de hoan doi cac gia tri</span>\n    swap(&amp;a, &amp;b);\n  \n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Sau swap, gia tri cua a : \"</span> &lt;&lt; a &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n    <span class=\"hljs-built_in\">cout</span> &lt;&lt; <span class=\"hljs-string\">\"Sau swap, gia tri cua b : \"</span> &lt;&lt; b &lt;&lt; <span class=\"hljs-built_in\">endl</span>;\n  \n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-comment\">/*\n * ham hoan doi cac gia tri\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">swap</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">int</span> *x, <span class=\"hljs-keyword\">int</span> *y)</span> </span>{\n    <span class=\"hljs-keyword\">int</span> temp;\n\n    temp = *x;\n    *x = *y;\n    *y = temp;\n\n    <span class=\"hljs-keyword\">return</span>;\n}</code></pre>\n</div>\n\n<div>Kết quả:</div>\n</div>\n</div>\n</div>\n\n<div>\n<pre><code class=\"language-cpp hljs\">Truoc swap, gia tri cua a : <span class=\"hljs-number\">100</span>\nTruoc swap, gia tri cua b : <span class=\"hljs-number\">200</span>\nSau swap, gia tri cua a : <span class=\"hljs-number\">200</span>\nSau swap, gia tri cua b : <span class=\"hljs-number\">100</span></code></pre>\n</div>\n\n<p>Kết quả cho thấy sự thay đổi bên trong hàm swap() cũng đã phản ánh bên ngoài hàm, không giống như&nbsp;call by value&nbsp;mà các thay đổi không phản ánh bên ngoài hàm.</p>\n\n<div id=\"3\">\n<h2>3. So sánh tham trị và tham chiếu</h2>\n</div>\n\n<p>Hãy cùng nhìn lại bảng sau để thấy được sự khác biệt giữa truyền tham chiếu và truyền tham trị.</p>\n\n<table border=\"1\" cellpadding=\"10\" cellspacing=\"10\" style=\"width:100%;\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th>STT</th>\n\t\t\t<th>Truyền tham trị</th>\n\t\t\t<th>Truyền tham chiếu</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">1</td>\n\t\t\t<td>Một bản sao giá trị của biến được truyền vào hàm</td>\n\t\t\t<td>Một địa chỉ ô nhớ của biến được truyền vào hàm</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">2</td>\n\t\t\t<td>Những thay đổi trong hàm được giới hạn trong hàm, không làm thay đổi giá trị của biến được truyền vào hàm</td>\n\t\t\t<td>Những thay đổi không chỉ giới hạn trong hàm mà còn làm thay đổi giá trị của biến được truyền vào hàm nếu trong hàm cũng làm thay đổi giá trị biến đó</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td style=\"text-align: center;\">3</td>\n\t\t\t<td>Đối số trong hàm và tham số chính thức được tạo tại hai vị trí bộ nhớ khác nhau</td>\n\t\t\t<td>Đối số trong hàm và tham số chính thức được tạo tại cùng một vị trí bộ nhớ</td>\n\t\t</tr>\n\t</tbody>\n</table>\n\n<p style=\"box-sizing: inherit; margin: 0px 0px 10px; text-align: justify; justify-content: space-around; font-family: Muli, sans-serif; font-size: 16px;\"><img alt=\"\" height=\"579\" src=\"https://s.elib.vn/images/fckeditor/upload/2020/20201027/images/so-sanh-tham-tri-va-tham-chieu_1603791567.JPG\" style=\"box-sizing: inherit; border: 0px; vertical-align: middle; max-width: 100%; height: auto; margin: 0px auto; display: block; object-fit: cover;\" width=\"769\"></p>\n\n<p>Trên đây là bài viết của eLib.VN về&nbsp;Truyền Tham Chiếu Và Truyền Tham Trị Trong C++.&nbsp;Hy vọng qua bài viết của mình, các bạn đã có cái nhìn rõ ràng hơn về truyền tham chiếu và tham trị cũng như sự khác nhau và cách sử dụng của chúng trong thực tế. Chúc các bạn thành công trên con đường lập trình của mình.</p>\n\n\n\n\n\n\n\n\n\n              "
}